
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  00000aac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001158  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099e  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  000026ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e9  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  9e:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#include <stdbool.h>
#include "Src/const.h"
#include "Src/utils.h"

void USART_Init() {
	sei();
  a6:	78 94       	sei
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	a8 95       	wdr
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  bc:	0f be       	out	0x3f, r0	; 63
	
	//bool WD_RST = MCUSR & 0x08;
	//bool BO_RST = MCUSR & 0x04;
	//bool EXT_RST = MCUSR & 0x02;
	//bool PON_RST = MCUSR & 0x01;
	MCUSR = MCUSR & 0xF0;
  be:	84 b7       	in	r24, 0x34	; 52
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	84 bf       	out	0x34, r24	; 52
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	99 e2       	ldi	r25, 0x29	; 41
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	a8 95       	wdr
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	//END Test
		
	wdt_enable(WDTO_8S);
	
	WDTCSR = 1<<WDIE;
  d8:	90 e4       	ldi	r25, 0x40	; 64
  da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	
	//UCSR0A |= (1<<U2X0); //Удвоение частоты
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //Trust transmit and receive from USART - T/R ENable = True
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01) | (1 << UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0L = BAUD_PRESCALE;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = BAUD_PRESCALE >> 8;
  ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <USART_Init+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <USART_Init+0x5c>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <USART_Receive>:
	// Не менее 20 миллисекунд согласно документации
	_delay_ms(20);
}

byte USART_Receive(void) {	
	while( !(UCSR0A & (1<<RXC0)) );
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <USART_Receive+0x4>
	return UDR0;	
 110:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 114:	08 95       	ret

00000116 <USART_Receive_Str>:

void USART_Receive_Str(byte *calledstring, DynamicArray* a) {
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	8c 01       	movw	r16, r24
 126:	7b 01       	movw	r14, r22
	char ch;
	
	int i = 0;	
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
					calledstring[i] = CHR_LINE_FEED;
					insertArray(a, CHR_LINE_FEED);
					return;
				} else {
					calledstring[i] = ch;
 12c:	0f 2e       	mov	r0, r31
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	df 2e       	mov	r13, r31
 132:	f0 2d       	mov	r31, r0
		if (i == FRAME_SIZE) {
			return;
		}		
	
		// Get input char	
		ch = USART_Receive();
 134:	0e 94 83 00 	call	0x106	; 0x106 <USART_Receive>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
 138:	8a 33       	cpi	r24, 0x3A	; 58
 13a:	01 f1       	breq	.+64     	; 0x17c <USART_Receive_Str+0x66>
 13c:	20 97       	sbiw	r28, 0x00	; 0
 13e:	d1 f3       	breq	.-12     	; 0x134 <USART_Receive_Str+0x1e>
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	e1 f4       	brne	.+56     	; 0x17c <USART_Receive_Str+0x66>
 144:	1c 16       	cp	r1, r28
 146:	1d 06       	cpc	r1, r29
 148:	cc f4       	brge	.+50     	; 0x17c <USART_Receive_Str+0x66>
				int previous_index = i - 1;
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	49 f4       	brne	.+18     	; 0x16a <USART_Receive_Str+0x54>
					calledstring[i] = CHR_LINE_FEED;
 158:	c0 0f       	add	r28, r16
 15a:	d1 1f       	adc	r29, r17
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	88 83       	st	Y, r24
					insertArray(a, CHR_LINE_FEED);
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	c7 01       	movw	r24, r14
 164:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
					return;
 168:	15 c0       	rjmp	.+42     	; 0x194 <USART_Receive_Str+0x7e>
				} else {
					calledstring[i] = ch;
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	d0 82       	st	Z, r13
					insertArray(a, ch);
 172:	6d 2d       	mov	r22, r13
 174:	c7 01       	movw	r24, r14
 176:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 17a:	08 c0       	rjmp	.+16     	; 0x18c <USART_Receive_Str+0x76>
				} else {
					calledstring[i] = ch;
					insertArray(a, ch);
				}
			} else {
				calledstring[i] = ch;
 17c:	f8 01       	movw	r30, r16
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	80 83       	st	Z, r24
				insertArray(a, ch);
 184:	68 2f       	mov	r22, r24
 186:	c7 01       	movw	r24, r14
 188:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			}	
		}
		
		i++;
 18c:	21 96       	adiw	r28, 0x01	; 1
	char ch;
	
	int i = 0;	
	while(1) {				
		// Check error from receive 
		if (i == FRAME_SIZE) {
 18e:	c0 32       	cpi	r28, 0x20	; 32
 190:	d1 05       	cpc	r29, r1
 192:	81 f6       	brne	.-96     	; 0x134 <USART_Receive_Str+0x1e>
			}	
		}
		
		i++;
	}	
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	08 95       	ret

000001a4 <USART_Send>:

void USART_Send(byte data) {
	while( !(UCSR0A & ( 1 << UDRE0 )) );
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	90 81       	ld	r25, Z
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <USART_Send+0x4>
	UDR0 = data;
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b2:	08 95       	ret

000001b4 <blink_WD>:
	// Info Blink
	blink();
}

void blink_WD() {
	PORTB |= ( 1 << PINB4 ); //0xFF; //On
 1b4:	2c 9a       	sbi	0x05, 4	; 5
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <blink_WD+0x6>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <blink_WD+0xc>
 1c0:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB4 ); //0x00; //OFF
 1c2:	2c 98       	cbi	0x05, 4	; 5
 1c4:	08 95       	ret

000001c6 <blink>:
}

void blink() {
	PORTB |= ( 1 << PINB5 ); //0xFF; //On
 1c6:	2d 9a       	sbi	0x05, 5	; 5
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <blink+0x6>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <blink+0xc>
 1d2:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
 1d4:	2d 98       	cbi	0x05, 5	; 5
 1d6:	08 95       	ret

000001d8 <USART_Transmit_Str>:
void USART_Send(byte data) {
	while( !(UCSR0A & ( 1 << UDRE0 )) );
	UDR0 = data;
}

void USART_Transmit_Str(DynamicArray* a) {
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	8c 01       	movw	r16, r24
			break;		
	}
	*/
	
	//Array
	int count = a->size;
 1e6:	dc 01       	movw	r26, r24
 1e8:	14 96       	adiw	r26, 0x04	; 4
 1ea:	ed 90       	ld	r14, X+
 1ec:	fc 90       	ld	r15, X
 1ee:	15 97       	sbiw	r26, 0x05	; 5
	for (int i = 0; i < count; i++) {		
 1f0:	1e 14       	cp	r1, r14
 1f2:	1f 04       	cpc	r1, r15
 1f4:	bc f4       	brge	.+46     	; 0x224 <USART_Transmit_Str+0x4c>
		if (a->array[i] != 0)
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	80 81       	ld	r24, Z
 1fc:	81 11       	cpse	r24, r1
 1fe:	0a c0       	rjmp	.+20     	; 0x214 <USART_Transmit_Str+0x3c>
 200:	11 c0       	rjmp	.+34     	; 0x224 <USART_Transmit_Str+0x4c>
 202:	d8 01       	movw	r26, r16
 204:	ed 91       	ld	r30, X+
 206:	fc 91       	ld	r31, X
 208:	ec 0f       	add	r30, r28
 20a:	fd 1f       	adc	r31, r29
 20c:	80 81       	ld	r24, Z
 20e:	81 11       	cpse	r24, r1
 210:	03 c0       	rjmp	.+6      	; 0x218 <USART_Transmit_Str+0x40>
 212:	08 c0       	rjmp	.+16     	; 0x224 <USART_Transmit_Str+0x4c>
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
			// Send char
			USART_Send(a->array[i]);
 218:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Send>
	}
	*/
	
	//Array
	int count = a->size;
	for (int i = 0; i < count; i++) {		
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	ec 16       	cp	r14, r28
 220:	fd 06       	cpc	r15, r29
 222:	79 f7       	brne	.-34     	; 0x202 <USART_Transmit_Str+0x2a>
		else
			break;
	}
	
	// Info Blink
	blink();
 224:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <blink>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <Clean_Data>:
	PORTB |= ( 1 << PINB5 ); //0xFF; //On
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
}

void Clean_Data(byte *input_data) {
 236:	fc 01       	movw	r30, r24
 238:	80 96       	adiw	r24, 0x20	; 32
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		input_data[i] = 0;
 23a:	11 92       	st	Z+, r1
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
}

void Clean_Data(byte *input_data) {
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 23c:	e8 17       	cp	r30, r24
 23e:	f9 07       	cpc	r31, r25
 240:	e1 f7       	brne	.-8      	; 0x23a <Clean_Data+0x4>
		input_data[i] = 0;
	}
}
 242:	08 95       	ret

00000244 <__vector_6>:

// Watch dog
ISR(WDT_vect) {
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	wdt_reset();
 266:	a8 95       	wdr

	//USART_Init();
	
	blink_WD();
 268:	0e 94 da 00 	call	0x1b4	; 0x1b4 <blink_WD>
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <main>:

int main(void) {
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	a6 97       	sbiw	r28, 0x26	; 38
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTB as Output
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 2a6:	fe 01       	movw	r30, r28
 2a8:	31 96       	adiw	r30, 0x01	; 1
 2aa:	80 e2       	ldi	r24, 0x20	; 32
 2ac:	df 01       	movw	r26, r30
 2ae:	1d 92       	st	X+, r1
 2b0:	8a 95       	dec	r24
 2b2:	e9 f7       	brne	.-6      	; 0x2ae <main+0x20>
	
	USART_Init();       
 2b4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	while(1) {
		// Create array
		DynamicArray inputArray;
		initArray(&inputArray, 32);
 2b8:	60 e2       	ldi	r22, 0x20	; 32
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	ce 01       	movw	r24, r28
 2be:	81 96       	adiw	r24, 0x21	; 33
 2c0:	0e 94 13 02 	call	0x426	; 0x426 <initArray>
		
		// Get request
		USART_Receive_Str(input, &inputArray);
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5d       	subi	r22, 0xDF	; 223
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 8b 00 	call	0x116	; 0x116 <USART_Receive_Str>
		
		// Get CRC8 byte index
		byte index_crc8 = getCRC8Index(input, &inputArray, FRAME_SIZE);
 2d2:	40 e2       	ldi	r20, 0x20	; 32
 2d4:	be 01       	movw	r22, r28
 2d6:	6f 5d       	subi	r22, 0xDF	; 223
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <getCRC8Index>
 2e2:	08 2f       	mov	r16, r24
			
		// Add CRC8 byte
		byte crc8_code = crc8dy(&inputArray, index_crc8);
 2e4:	68 2f       	mov	r22, r24
 2e6:	ce 01       	movw	r24, r28
 2e8:	81 96       	adiw	r24, 0x21	; 33
 2ea:	0e 94 e6 01 	call	0x3cc	; 0x3cc <crc8dy>
 2ee:	18 2f       	mov	r17, r24
		//input[index_crc8] = crc8_code;
		
		if (inputArray.array[index_crc8] == crc8_code) {
 2f0:	e9 a1       	ldd	r30, Y+33	; 0x21
 2f2:	fa a1       	ldd	r31, Y+34	; 0x22
 2f4:	e0 0f       	add	r30, r16
 2f6:	f1 1d       	adc	r31, r1
 2f8:	80 81       	ld	r24, Z
 2fa:	18 13       	cpse	r17, r24
 2fc:	37 c0       	rjmp	.+110    	; 0x36c <main+0xde>
						
			//Clear request data
			freeArray(&inputArray);	
 2fe:	ce 01       	movw	r24, r28
 300:	81 96       	adiw	r24, 0x21	; 33
 302:	0e 94 50 02 	call	0x4a0	; 0x4a0 <freeArray>
			initArray(&inputArray, 50);
 306:	62 e3       	ldi	r22, 0x32	; 50
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	ce 01       	movw	r24, r28
 30c:	81 96       	adiw	r24, 0x21	; 33
 30e:	0e 94 13 02 	call	0x426	; 0x426 <initArray>
			
			insertArray(&inputArray, CHR_COLON);
 312:	6a e3       	ldi	r22, 0x3A	; 58
 314:	ce 01       	movw	r24, r28
 316:	81 96       	adiw	r24, 0x21	; 33
 318:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, 1);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	ce 01       	movw	r24, r28
 320:	81 96       	adiw	r24, 0x21	; 33
 322:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, 2);
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	ce 01       	movw	r24, r28
 32a:	81 96       	adiw	r24, 0x21	; 33
 32c:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, 3);
 330:	63 e0       	ldi	r22, 0x03	; 3
 332:	ce 01       	movw	r24, r28
 334:	81 96       	adiw	r24, 0x21	; 33
 336:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, crc8_code);
 33a:	61 2f       	mov	r22, r17
 33c:	ce 01       	movw	r24, r28
 33e:	81 96       	adiw	r24, 0x21	; 33
 340:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, CHR_COLON);
 344:	6a e3       	ldi	r22, 0x3A	; 58
 346:	ce 01       	movw	r24, r28
 348:	81 96       	adiw	r24, 0x21	; 33
 34a:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, CHR_CARRET_RETURN);
 34e:	6d e0       	ldi	r22, 0x0D	; 13
 350:	ce 01       	movw	r24, r28
 352:	81 96       	adiw	r24, 0x21	; 33
 354:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, CHR_LINE_FEED);
 358:	6a e0       	ldi	r22, 0x0A	; 10
 35a:	ce 01       	movw	r24, r28
 35c:	81 96       	adiw	r24, 0x21	; 33
 35e:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			
			// Send response ( ECHO )
			USART_Transmit_Str(&inputArray);			
 362:	ce 01       	movw	r24, r28
 364:	81 96       	adiw	r24, 0x21	; 33
 366:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit_Str>
 36a:	27 c0       	rjmp	.+78     	; 0x3ba <main+0x12c>
		} else /* ERROR */ {
						
			freeArray(&inputArray);	
 36c:	ce 01       	movw	r24, r28
 36e:	81 96       	adiw	r24, 0x21	; 33
 370:	0e 94 50 02 	call	0x4a0	; 0x4a0 <freeArray>
			initArray(&inputArray, 32);
 374:	60 e2       	ldi	r22, 0x20	; 32
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	ce 01       	movw	r24, r28
 37a:	81 96       	adiw	r24, 0x21	; 33
 37c:	0e 94 13 02 	call	0x426	; 0x426 <initArray>
			
			insertArray(&inputArray, CHR_COLON);
 380:	6a e3       	ldi	r22, 0x3A	; 58
 382:	ce 01       	movw	r24, r28
 384:	81 96       	adiw	r24, 0x21	; 33
 386:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, crc8_code);			
 38a:	61 2f       	mov	r22, r17
 38c:	ce 01       	movw	r24, r28
 38e:	81 96       	adiw	r24, 0x21	; 33
 390:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, CHR_COLON);
 394:	6a e3       	ldi	r22, 0x3A	; 58
 396:	ce 01       	movw	r24, r28
 398:	81 96       	adiw	r24, 0x21	; 33
 39a:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, CHR_CARRET_RETURN);
 39e:	6d e0       	ldi	r22, 0x0D	; 13
 3a0:	ce 01       	movw	r24, r28
 3a2:	81 96       	adiw	r24, 0x21	; 33
 3a4:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			insertArray(&inputArray, CHR_LINE_FEED);
 3a8:	6a e0       	ldi	r22, 0x0A	; 10
 3aa:	ce 01       	movw	r24, r28
 3ac:	81 96       	adiw	r24, 0x21	; 33
 3ae:	0e 94 27 02 	call	0x44e	; 0x44e <insertArray>
			
			// Send response
			USART_Transmit_Str(&inputArray);
 3b2:	ce 01       	movw	r24, r28
 3b4:	81 96       	adiw	r24, 0x21	; 33
 3b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit_Str>
		}
		
		// Clear array
		Clean_Data(input);
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	0e 94 1b 01 	call	0x236	; 0x236 <Clean_Data>
		
		// Free Array
		freeArray(&inputArray);	
 3c2:	ce 01       	movw	r24, r28
 3c4:	81 96       	adiw	r24, 0x21	; 33
 3c6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <freeArray>
		
		// Info Blink
		//blink();
	}
 3ca:	76 cf       	rjmp	.-276    	; 0x2b8 <main+0x2a>

000003cc <crc8dy>:
}
*/

uint8_t crc8dy(DynamicArray* a, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 3cc:	66 23       	and	r22, r22
 3ce:	91 f0       	breq	.+36     	; 0x3f4 <crc8dy+0x28>
		uint8_t temp = a->array[i]; //*pcBlock++;
 3d0:	fc 01       	movw	r30, r24
 3d2:	a0 81       	ld	r26, Z
 3d4:	b1 81       	ldd	r27, Z+1	; 0x01
 3d6:	9d 01       	movw	r18, r26
 3d8:	26 0f       	add	r18, r22
 3da:	31 1d       	adc	r19, r1
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	ed 91       	ld	r30, X+
		uint8_t index = crc ^ temp;
		crc = Crc8Table[index];
 3e0:	8e 27       	eor	r24, r30
 3e2:	e8 2f       	mov	r30, r24
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ea 5f       	subi	r30, 0xFA	; 250
 3e8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ea:	80 81       	ld	r24, Z
}
*/

uint8_t crc8dy(DynamicArray* a, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 3ec:	a2 17       	cp	r26, r18
 3ee:	b3 07       	cpc	r27, r19
 3f0:	b1 f7       	brne	.-20     	; 0x3de <crc8dy+0x12>
 3f2:	08 95       	ret
	return crc;
}
*/

uint8_t crc8dy(DynamicArray* a, uint8_t len) {
	uint8_t crc = 0xFF;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
		uint8_t index = crc ^ temp;
		crc = Crc8Table[index];
	}

	return crc;
}
 3f6:	08 95       	ret

000003f8 <getCRC8Index>:

byte getCRC8Index(byte *input_data, DynamicArray* a, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 3f8:	44 23       	and	r20, r20
 3fa:	99 f0       	breq	.+38     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3fc:	e8 2f       	mov	r30, r24
 3fe:	f9 2f       	mov	r31, r25
 400:	90 e0       	ldi	r25, 0x00	; 0
		// Need many checks
		if (input_data[i] == CHR_COLON && i > 0) {
 402:	21 91       	ld	r18, Z+
 404:	2a 33       	cpi	r18, 0x3A	; 58
 406:	41 f4       	brne	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 408:	99 23       	and	r25, r25
 40a:	31 f0       	breq	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
 40c:	80 81       	ld	r24, Z
 40e:	8d 30       	cpi	r24, 0x0D	; 13
 410:	19 f4       	brne	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				return i - 1;
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	89 0f       	add	r24, r25
 416:	08 95       	ret
			}
		}
		
		x++;
 418:	9f 5f       	subi	r25, 0xFF	; 255
	return crc;
}

byte getCRC8Index(byte *input_data, DynamicArray* a, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 41a:	49 13       	cpse	r20, r25
 41c:	f2 cf       	rjmp	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
				return i - 1;
			}
		}
		
		x++;
 41e:	84 2f       	mov	r24, r20
 420:	08 95       	ret

	return crc;
}

byte getCRC8Index(byte *input_data, DynamicArray* a, uint8_t frame_size) {
	uint8_t x = 0;
 422:	80 e0       	ldi	r24, 0x00	; 0
		
		x++;
	}
	
	return x;
}
 424:	08 95       	ret

00000426 <initArray>:

void initArray(DynamicArray* a, size_t initialSize) {
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ec 01       	movw	r28, r24
 430:	8b 01       	movw	r16, r22
	a->array = (byte*)malloc(initialSize * sizeof(byte));
 432:	cb 01       	movw	r24, r22
 434:	0e 94 60 02 	call	0x4c0	; 0x4c0 <malloc>
 438:	99 83       	std	Y+1, r25	; 0x01
 43a:	88 83       	st	Y, r24
	a->used = 0;
 43c:	1b 82       	std	Y+3, r1	; 0x03
 43e:	1a 82       	std	Y+2, r1	; 0x02
	a->size = initialSize;
 440:	1d 83       	std	Y+5, r17	; 0x05
 442:	0c 83       	std	Y+4, r16	; 0x04
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <insertArray>:

void insertArray(DynamicArray* a, byte element_byte) {
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
 456:	16 2f       	mov	r17, r22
	if (a->used == a->size) {
 458:	6a 81       	ldd	r22, Y+2	; 0x02
 45a:	7b 81       	ldd	r23, Y+3	; 0x03
 45c:	8c 81       	ldd	r24, Y+4	; 0x04
 45e:	9d 81       	ldd	r25, Y+5	; 0x05
 460:	68 17       	cp	r22, r24
 462:	79 07       	cpc	r23, r25
 464:	61 f4       	brne	.+24     	; 0x47e <insertArray+0x30>
		a->size += 1;
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	7d 83       	std	Y+5, r23	; 0x05
 46c:	6c 83       	std	Y+4, r22	; 0x04
		byte* newarr = (byte*)realloc(a->array, a->size * sizeof(byte));
 46e:	88 81       	ld	r24, Y
 470:	99 81       	ldd	r25, Y+1	; 0x01
 472:	0e 94 81 03 	call	0x702	; 0x702 <realloc>
		if (newarr == NULL) return; // Block don't selected - return
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	79 f0       	breq	.+30     	; 0x498 <insertArray+0x4a>
		a->array = newarr;
 47a:	99 83       	std	Y+1, r25	; 0x01
 47c:	88 83       	st	Y, r24
	}

	a->array[a->used++] = element_byte;
 47e:	28 81       	ld	r18, Y
 480:	39 81       	ldd	r19, Y+1	; 0x01
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	9b 81       	ldd	r25, Y+3	; 0x03
 486:	ac 01       	movw	r20, r24
 488:	4f 5f       	subi	r20, 0xFF	; 255
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	5b 83       	std	Y+3, r21	; 0x03
 48e:	4a 83       	std	Y+2, r20	; 0x02
 490:	f9 01       	movw	r30, r18
 492:	e8 0f       	add	r30, r24
 494:	f9 1f       	adc	r31, r25
 496:	10 83       	st	Z, r17
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	08 95       	ret

000004a0 <freeArray>:

void freeArray(DynamicArray* a) {
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	ec 01       	movw	r28, r24
	free(a->array);
 4a6:	88 81       	ld	r24, Y
 4a8:	99 81       	ldd	r25, Y+1	; 0x01
 4aa:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <free>
	a->array = NULL;
 4ae:	19 82       	std	Y+1, r1	; 0x01
 4b0:	18 82       	st	Y, r1
	a->used = a->size = 0;
 4b2:	1d 82       	std	Y+5, r1	; 0x05
 4b4:	1c 82       	std	Y+4, r1	; 0x04
 4b6:	1b 82       	std	Y+3, r1	; 0x03
 4b8:	1a 82       	std	Y+2, r1	; 0x02
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <malloc>:
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	91 05       	cpc	r25, r1
 4cc:	10 f4       	brcc	.+4      	; 0x4d2 <malloc+0x12>
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 4d6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	a0 e0       	ldi	r26, 0x00	; 0
 4e0:	b0 e0       	ldi	r27, 0x00	; 0
 4e2:	30 97       	sbiw	r30, 0x00	; 0
 4e4:	19 f1       	breq	.+70     	; 0x52c <malloc+0x6c>
 4e6:	40 81       	ld	r20, Z
 4e8:	51 81       	ldd	r21, Z+1	; 0x01
 4ea:	02 81       	ldd	r16, Z+2	; 0x02
 4ec:	13 81       	ldd	r17, Z+3	; 0x03
 4ee:	48 17       	cp	r20, r24
 4f0:	59 07       	cpc	r21, r25
 4f2:	c8 f0       	brcs	.+50     	; 0x526 <malloc+0x66>
 4f4:	84 17       	cp	r24, r20
 4f6:	95 07       	cpc	r25, r21
 4f8:	69 f4       	brne	.+26     	; 0x514 <malloc+0x54>
 4fa:	10 97       	sbiw	r26, 0x00	; 0
 4fc:	31 f0       	breq	.+12     	; 0x50a <malloc+0x4a>
 4fe:	12 96       	adiw	r26, 0x02	; 2
 500:	0c 93       	st	X, r16
 502:	12 97       	sbiw	r26, 0x02	; 2
 504:	13 96       	adiw	r26, 0x03	; 3
 506:	1c 93       	st	X, r17
 508:	27 c0       	rjmp	.+78     	; 0x558 <malloc+0x98>
 50a:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 50e:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 512:	22 c0       	rjmp	.+68     	; 0x558 <malloc+0x98>
 514:	21 15       	cp	r18, r1
 516:	31 05       	cpc	r19, r1
 518:	19 f0       	breq	.+6      	; 0x520 <malloc+0x60>
 51a:	42 17       	cp	r20, r18
 51c:	53 07       	cpc	r21, r19
 51e:	18 f4       	brcc	.+6      	; 0x526 <malloc+0x66>
 520:	9a 01       	movw	r18, r20
 522:	bd 01       	movw	r22, r26
 524:	ef 01       	movw	r28, r30
 526:	df 01       	movw	r26, r30
 528:	f8 01       	movw	r30, r16
 52a:	db cf       	rjmp	.-74     	; 0x4e2 <malloc+0x22>
 52c:	21 15       	cp	r18, r1
 52e:	31 05       	cpc	r19, r1
 530:	f9 f0       	breq	.+62     	; 0x570 <malloc+0xb0>
 532:	28 1b       	sub	r18, r24
 534:	39 0b       	sbc	r19, r25
 536:	24 30       	cpi	r18, 0x04	; 4
 538:	31 05       	cpc	r19, r1
 53a:	80 f4       	brcc	.+32     	; 0x55c <malloc+0x9c>
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	9b 81       	ldd	r25, Y+3	; 0x03
 540:	61 15       	cp	r22, r1
 542:	71 05       	cpc	r23, r1
 544:	21 f0       	breq	.+8      	; 0x54e <malloc+0x8e>
 546:	fb 01       	movw	r30, r22
 548:	93 83       	std	Z+3, r25	; 0x03
 54a:	82 83       	std	Z+2, r24	; 0x02
 54c:	04 c0       	rjmp	.+8      	; 0x556 <malloc+0x96>
 54e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 552:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 556:	fe 01       	movw	r30, r28
 558:	32 96       	adiw	r30, 0x02	; 2
 55a:	44 c0       	rjmp	.+136    	; 0x5e4 <malloc+0x124>
 55c:	fe 01       	movw	r30, r28
 55e:	e2 0f       	add	r30, r18
 560:	f3 1f       	adc	r31, r19
 562:	81 93       	st	Z+, r24
 564:	91 93       	st	Z+, r25
 566:	22 50       	subi	r18, 0x02	; 2
 568:	31 09       	sbc	r19, r1
 56a:	39 83       	std	Y+1, r19	; 0x01
 56c:	28 83       	st	Y, r18
 56e:	3a c0       	rjmp	.+116    	; 0x5e4 <malloc+0x124>
 570:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 574:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 578:	23 2b       	or	r18, r19
 57a:	41 f4       	brne	.+16     	; 0x58c <malloc+0xcc>
 57c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 580:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 584:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 588:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 58c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 590:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 594:	21 15       	cp	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	41 f4       	brne	.+16     	; 0x5aa <malloc+0xea>
 59a:	2d b7       	in	r18, 0x3d	; 61
 59c:	3e b7       	in	r19, 0x3e	; 62
 59e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5a6:	24 1b       	sub	r18, r20
 5a8:	35 0b       	sbc	r19, r21
 5aa:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 5ae:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 5b2:	e2 17       	cp	r30, r18
 5b4:	f3 07       	cpc	r31, r19
 5b6:	a0 f4       	brcc	.+40     	; 0x5e0 <malloc+0x120>
 5b8:	2e 1b       	sub	r18, r30
 5ba:	3f 0b       	sbc	r19, r31
 5bc:	28 17       	cp	r18, r24
 5be:	39 07       	cpc	r19, r25
 5c0:	78 f0       	brcs	.+30     	; 0x5e0 <malloc+0x120>
 5c2:	ac 01       	movw	r20, r24
 5c4:	4e 5f       	subi	r20, 0xFE	; 254
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	24 17       	cp	r18, r20
 5ca:	35 07       	cpc	r19, r21
 5cc:	48 f0       	brcs	.+18     	; 0x5e0 <malloc+0x120>
 5ce:	4e 0f       	add	r20, r30
 5d0:	5f 1f       	adc	r21, r31
 5d2:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 5d6:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 5da:	81 93       	st	Z+, r24
 5dc:	91 93       	st	Z+, r25
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <malloc+0x124>
 5e0:	e0 e0       	ldi	r30, 0x00	; 0
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	cf 01       	movw	r24, r30
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <free>:
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	09 f4       	brne	.+2      	; 0x5fa <free+0xa>
 5f8:	81 c0       	rjmp	.+258    	; 0x6fc <free+0x10c>
 5fa:	fc 01       	movw	r30, r24
 5fc:	32 97       	sbiw	r30, 0x02	; 2
 5fe:	13 82       	std	Z+3, r1	; 0x03
 600:	12 82       	std	Z+2, r1	; 0x02
 602:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 606:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 60a:	10 97       	sbiw	r26, 0x00	; 0
 60c:	81 f4       	brne	.+32     	; 0x62e <free+0x3e>
 60e:	20 81       	ld	r18, Z
 610:	31 81       	ldd	r19, Z+1	; 0x01
 612:	82 0f       	add	r24, r18
 614:	93 1f       	adc	r25, r19
 616:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 61a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 61e:	28 17       	cp	r18, r24
 620:	39 07       	cpc	r19, r25
 622:	51 f5       	brne	.+84     	; 0x678 <free+0x88>
 624:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 628:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 62c:	67 c0       	rjmp	.+206    	; 0x6fc <free+0x10c>
 62e:	ed 01       	movw	r28, r26
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	ce 17       	cp	r28, r30
 636:	df 07       	cpc	r29, r31
 638:	40 f4       	brcc	.+16     	; 0x64a <free+0x5a>
 63a:	4a 81       	ldd	r20, Y+2	; 0x02
 63c:	5b 81       	ldd	r21, Y+3	; 0x03
 63e:	9e 01       	movw	r18, r28
 640:	41 15       	cp	r20, r1
 642:	51 05       	cpc	r21, r1
 644:	f1 f0       	breq	.+60     	; 0x682 <free+0x92>
 646:	ea 01       	movw	r28, r20
 648:	f5 cf       	rjmp	.-22     	; 0x634 <free+0x44>
 64a:	d3 83       	std	Z+3, r29	; 0x03
 64c:	c2 83       	std	Z+2, r28	; 0x02
 64e:	40 81       	ld	r20, Z
 650:	51 81       	ldd	r21, Z+1	; 0x01
 652:	84 0f       	add	r24, r20
 654:	95 1f       	adc	r25, r21
 656:	c8 17       	cp	r28, r24
 658:	d9 07       	cpc	r29, r25
 65a:	59 f4       	brne	.+22     	; 0x672 <free+0x82>
 65c:	88 81       	ld	r24, Y
 65e:	99 81       	ldd	r25, Y+1	; 0x01
 660:	84 0f       	add	r24, r20
 662:	95 1f       	adc	r25, r21
 664:	02 96       	adiw	r24, 0x02	; 2
 666:	91 83       	std	Z+1, r25	; 0x01
 668:	80 83       	st	Z, r24
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	9b 81       	ldd	r25, Y+3	; 0x03
 66e:	93 83       	std	Z+3, r25	; 0x03
 670:	82 83       	std	Z+2, r24	; 0x02
 672:	21 15       	cp	r18, r1
 674:	31 05       	cpc	r19, r1
 676:	29 f4       	brne	.+10     	; 0x682 <free+0x92>
 678:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 67c:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 680:	3d c0       	rjmp	.+122    	; 0x6fc <free+0x10c>
 682:	e9 01       	movw	r28, r18
 684:	fb 83       	std	Y+3, r31	; 0x03
 686:	ea 83       	std	Y+2, r30	; 0x02
 688:	49 91       	ld	r20, Y+
 68a:	59 91       	ld	r21, Y+
 68c:	c4 0f       	add	r28, r20
 68e:	d5 1f       	adc	r29, r21
 690:	ec 17       	cp	r30, r28
 692:	fd 07       	cpc	r31, r29
 694:	61 f4       	brne	.+24     	; 0x6ae <free+0xbe>
 696:	80 81       	ld	r24, Z
 698:	91 81       	ldd	r25, Z+1	; 0x01
 69a:	84 0f       	add	r24, r20
 69c:	95 1f       	adc	r25, r21
 69e:	02 96       	adiw	r24, 0x02	; 2
 6a0:	e9 01       	movw	r28, r18
 6a2:	99 83       	std	Y+1, r25	; 0x01
 6a4:	88 83       	st	Y, r24
 6a6:	82 81       	ldd	r24, Z+2	; 0x02
 6a8:	93 81       	ldd	r25, Z+3	; 0x03
 6aa:	9b 83       	std	Y+3, r25	; 0x03
 6ac:	8a 83       	std	Y+2, r24	; 0x02
 6ae:	e0 e0       	ldi	r30, 0x00	; 0
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	12 96       	adiw	r26, 0x02	; 2
 6b4:	8d 91       	ld	r24, X+
 6b6:	9c 91       	ld	r25, X
 6b8:	13 97       	sbiw	r26, 0x03	; 3
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <free+0xd4>
 6be:	fd 01       	movw	r30, r26
 6c0:	dc 01       	movw	r26, r24
 6c2:	f7 cf       	rjmp	.-18     	; 0x6b2 <free+0xc2>
 6c4:	8d 91       	ld	r24, X+
 6c6:	9c 91       	ld	r25, X
 6c8:	11 97       	sbiw	r26, 0x01	; 1
 6ca:	9d 01       	movw	r18, r26
 6cc:	2e 5f       	subi	r18, 0xFE	; 254
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 6d8:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 6dc:	28 17       	cp	r18, r24
 6de:	39 07       	cpc	r19, r25
 6e0:	69 f4       	brne	.+26     	; 0x6fc <free+0x10c>
 6e2:	30 97       	sbiw	r30, 0x00	; 0
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <free+0x100>
 6e6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 6ea:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <free+0x104>
 6f0:	13 82       	std	Z+3, r1	; 0x03
 6f2:	12 82       	std	Z+2, r1	; 0x02
 6f4:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 6f8:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <realloc>:
 702:	a0 e0       	ldi	r26, 0x00	; 0
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e7 e8       	ldi	r30, 0x87	; 135
 708:	f3 e0       	ldi	r31, 0x03	; 3
 70a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__prologue_saves__+0x8>
 70e:	ec 01       	movw	r28, r24
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	21 f4       	brne	.+8      	; 0x71c <realloc+0x1a>
 714:	cb 01       	movw	r24, r22
 716:	0e 94 60 02 	call	0x4c0	; 0x4c0 <malloc>
 71a:	b4 c0       	rjmp	.+360    	; 0x884 <realloc+0x182>
 71c:	fc 01       	movw	r30, r24
 71e:	e6 0f       	add	r30, r22
 720:	f7 1f       	adc	r31, r23
 722:	9c 01       	movw	r18, r24
 724:	22 50       	subi	r18, 0x02	; 2
 726:	31 09       	sbc	r19, r1
 728:	e2 17       	cp	r30, r18
 72a:	f3 07       	cpc	r31, r19
 72c:	08 f4       	brcc	.+2      	; 0x730 <realloc+0x2e>
 72e:	a8 c0       	rjmp	.+336    	; 0x880 <realloc+0x17e>
 730:	d9 01       	movw	r26, r18
 732:	0d 91       	ld	r16, X+
 734:	1c 91       	ld	r17, X
 736:	11 97       	sbiw	r26, 0x01	; 1
 738:	06 17       	cp	r16, r22
 73a:	17 07       	cpc	r17, r23
 73c:	b0 f0       	brcs	.+44     	; 0x76a <realloc+0x68>
 73e:	05 30       	cpi	r16, 0x05	; 5
 740:	11 05       	cpc	r17, r1
 742:	08 f4       	brcc	.+2      	; 0x746 <realloc+0x44>
 744:	9b c0       	rjmp	.+310    	; 0x87c <realloc+0x17a>
 746:	c8 01       	movw	r24, r16
 748:	04 97       	sbiw	r24, 0x04	; 4
 74a:	86 17       	cp	r24, r22
 74c:	97 07       	cpc	r25, r23
 74e:	08 f4       	brcc	.+2      	; 0x752 <realloc+0x50>
 750:	95 c0       	rjmp	.+298    	; 0x87c <realloc+0x17a>
 752:	02 50       	subi	r16, 0x02	; 2
 754:	11 09       	sbc	r17, r1
 756:	06 1b       	sub	r16, r22
 758:	17 0b       	sbc	r17, r23
 75a:	01 93       	st	Z+, r16
 75c:	11 93       	st	Z+, r17
 75e:	6d 93       	st	X+, r22
 760:	7c 93       	st	X, r23
 762:	cf 01       	movw	r24, r30
 764:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <free>
 768:	89 c0       	rjmp	.+274    	; 0x87c <realloc+0x17a>
 76a:	5b 01       	movw	r10, r22
 76c:	a0 1a       	sub	r10, r16
 76e:	b1 0a       	sbc	r11, r17
 770:	4c 01       	movw	r8, r24
 772:	80 0e       	add	r8, r16
 774:	91 1e       	adc	r9, r17
 776:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 77a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 77e:	61 2c       	mov	r6, r1
 780:	71 2c       	mov	r7, r1
 782:	e1 2c       	mov	r14, r1
 784:	f1 2c       	mov	r15, r1
 786:	10 97       	sbiw	r26, 0x00	; 0
 788:	09 f4       	brne	.+2      	; 0x78c <realloc+0x8a>
 78a:	46 c0       	rjmp	.+140    	; 0x818 <realloc+0x116>
 78c:	8d 91       	ld	r24, X+
 78e:	9c 91       	ld	r25, X
 790:	11 97       	sbiw	r26, 0x01	; 1
 792:	a8 15       	cp	r26, r8
 794:	b9 05       	cpc	r27, r9
 796:	b1 f5       	brne	.+108    	; 0x804 <realloc+0x102>
 798:	6c 01       	movw	r12, r24
 79a:	42 e0       	ldi	r20, 0x02	; 2
 79c:	c4 0e       	add	r12, r20
 79e:	d1 1c       	adc	r13, r1
 7a0:	ca 14       	cp	r12, r10
 7a2:	db 04       	cpc	r13, r11
 7a4:	78 f1       	brcs	.+94     	; 0x804 <realloc+0x102>
 7a6:	4c 01       	movw	r8, r24
 7a8:	8a 18       	sub	r8, r10
 7aa:	9b 08       	sbc	r9, r11
 7ac:	64 01       	movw	r12, r8
 7ae:	42 e0       	ldi	r20, 0x02	; 2
 7b0:	c4 0e       	add	r12, r20
 7b2:	d1 1c       	adc	r13, r1
 7b4:	12 96       	adiw	r26, 0x02	; 2
 7b6:	bc 90       	ld	r11, X
 7b8:	12 97       	sbiw	r26, 0x02	; 2
 7ba:	13 96       	adiw	r26, 0x03	; 3
 7bc:	ac 91       	ld	r26, X
 7be:	b5 e0       	ldi	r27, 0x05	; 5
 7c0:	cb 16       	cp	r12, r27
 7c2:	d1 04       	cpc	r13, r1
 7c4:	40 f0       	brcs	.+16     	; 0x7d6 <realloc+0xd4>
 7c6:	b2 82       	std	Z+2, r11	; 0x02
 7c8:	a3 83       	std	Z+3, r26	; 0x03
 7ca:	91 82       	std	Z+1, r9	; 0x01
 7cc:	80 82       	st	Z, r8
 7ce:	d9 01       	movw	r26, r18
 7d0:	6d 93       	st	X+, r22
 7d2:	7c 93       	st	X, r23
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <realloc+0xe6>
 7d6:	0e 5f       	subi	r16, 0xFE	; 254
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	80 0f       	add	r24, r16
 7dc:	91 1f       	adc	r25, r17
 7de:	f9 01       	movw	r30, r18
 7e0:	91 83       	std	Z+1, r25	; 0x01
 7e2:	80 83       	st	Z, r24
 7e4:	eb 2d       	mov	r30, r11
 7e6:	fa 2f       	mov	r31, r26
 7e8:	e1 14       	cp	r14, r1
 7ea:	f1 04       	cpc	r15, r1
 7ec:	31 f0       	breq	.+12     	; 0x7fa <realloc+0xf8>
 7ee:	d7 01       	movw	r26, r14
 7f0:	13 96       	adiw	r26, 0x03	; 3
 7f2:	fc 93       	st	X, r31
 7f4:	ee 93       	st	-X, r30
 7f6:	12 97       	sbiw	r26, 0x02	; 2
 7f8:	41 c0       	rjmp	.+130    	; 0x87c <realloc+0x17a>
 7fa:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 7fe:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 802:	3c c0       	rjmp	.+120    	; 0x87c <realloc+0x17a>
 804:	68 16       	cp	r6, r24
 806:	79 06       	cpc	r7, r25
 808:	08 f4       	brcc	.+2      	; 0x80c <realloc+0x10a>
 80a:	3c 01       	movw	r6, r24
 80c:	7d 01       	movw	r14, r26
 80e:	12 96       	adiw	r26, 0x02	; 2
 810:	0d 90       	ld	r0, X+
 812:	bc 91       	ld	r27, X
 814:	a0 2d       	mov	r26, r0
 816:	b7 cf       	rjmp	.-146    	; 0x786 <realloc+0x84>
 818:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 81c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 820:	88 16       	cp	r8, r24
 822:	99 06       	cpc	r9, r25
 824:	e1 f4       	brne	.+56     	; 0x85e <realloc+0x15c>
 826:	66 16       	cp	r6, r22
 828:	77 06       	cpc	r7, r23
 82a:	c8 f4       	brcc	.+50     	; 0x85e <realloc+0x15c>
 82c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 830:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	41 f4       	brne	.+16     	; 0x848 <realloc+0x146>
 838:	8d b7       	in	r24, 0x3d	; 61
 83a:	9e b7       	in	r25, 0x3e	; 62
 83c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 840:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 844:	84 1b       	sub	r24, r20
 846:	95 0b       	sbc	r25, r21
 848:	e8 17       	cp	r30, r24
 84a:	f9 07       	cpc	r31, r25
 84c:	c8 f4       	brcc	.+50     	; 0x880 <realloc+0x17e>
 84e:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 852:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 856:	f9 01       	movw	r30, r18
 858:	71 83       	std	Z+1, r23	; 0x01
 85a:	60 83       	st	Z, r22
 85c:	0f c0       	rjmp	.+30     	; 0x87c <realloc+0x17a>
 85e:	cb 01       	movw	r24, r22
 860:	0e 94 60 02 	call	0x4c0	; 0x4c0 <malloc>
 864:	7c 01       	movw	r14, r24
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	59 f0       	breq	.+22     	; 0x880 <realloc+0x17e>
 86a:	a8 01       	movw	r20, r16
 86c:	be 01       	movw	r22, r28
 86e:	0e 94 47 04 	call	0x88e	; 0x88e <memcpy>
 872:	ce 01       	movw	r24, r28
 874:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <free>
 878:	c7 01       	movw	r24, r14
 87a:	04 c0       	rjmp	.+8      	; 0x884 <realloc+0x182>
 87c:	ce 01       	movw	r24, r28
 87e:	02 c0       	rjmp	.+4      	; 0x884 <realloc+0x182>
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
 888:	ee e0       	ldi	r30, 0x0E	; 14
 88a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__epilogue_restores__+0x8>

0000088e <memcpy>:
 88e:	fb 01       	movw	r30, r22
 890:	dc 01       	movw	r26, r24
 892:	02 c0       	rjmp	.+4      	; 0x898 <memcpy+0xa>
 894:	01 90       	ld	r0, Z+
 896:	0d 92       	st	X+, r0
 898:	41 50       	subi	r20, 0x01	; 1
 89a:	50 40       	sbci	r21, 0x00	; 0
 89c:	d8 f7       	brcc	.-10     	; 0x894 <memcpy+0x6>
 89e:	08 95       	ret

000008a0 <__prologue_saves__>:
 8a0:	2f 92       	push	r2
 8a2:	3f 92       	push	r3
 8a4:	4f 92       	push	r4
 8a6:	5f 92       	push	r5
 8a8:	6f 92       	push	r6
 8aa:	7f 92       	push	r7
 8ac:	8f 92       	push	r8
 8ae:	9f 92       	push	r9
 8b0:	af 92       	push	r10
 8b2:	bf 92       	push	r11
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ef 92       	push	r14
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
 8c8:	ca 1b       	sub	r28, r26
 8ca:	db 0b       	sbc	r29, r27
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	09 94       	ijmp

000008d8 <__epilogue_restores__>:
 8d8:	2a 88       	ldd	r2, Y+18	; 0x12
 8da:	39 88       	ldd	r3, Y+17	; 0x11
 8dc:	48 88       	ldd	r4, Y+16	; 0x10
 8de:	5f 84       	ldd	r5, Y+15	; 0x0f
 8e0:	6e 84       	ldd	r6, Y+14	; 0x0e
 8e2:	7d 84       	ldd	r7, Y+13	; 0x0d
 8e4:	8c 84       	ldd	r8, Y+12	; 0x0c
 8e6:	9b 84       	ldd	r9, Y+11	; 0x0b
 8e8:	aa 84       	ldd	r10, Y+10	; 0x0a
 8ea:	b9 84       	ldd	r11, Y+9	; 0x09
 8ec:	c8 84       	ldd	r12, Y+8	; 0x08
 8ee:	df 80       	ldd	r13, Y+7	; 0x07
 8f0:	ee 80       	ldd	r14, Y+6	; 0x06
 8f2:	fd 80       	ldd	r15, Y+5	; 0x05
 8f4:	0c 81       	ldd	r16, Y+4	; 0x04
 8f6:	1b 81       	ldd	r17, Y+3	; 0x03
 8f8:	aa 81       	ldd	r26, Y+2	; 0x02
 8fa:	b9 81       	ldd	r27, Y+1	; 0x01
 8fc:	ce 0f       	add	r28, r30
 8fe:	d1 1d       	adc	r29, r1
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	ed 01       	movw	r28, r26
 90c:	08 95       	ret

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
