
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  0000085c  000008f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  000009f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f02  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000986  00000000  00000000  00001a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078e  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fe  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003a46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 43 01 	call	0x286	; 0x286 <main>
  9e:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#include <stdbool.h>
#include "Src/const.h"
#include "Src/utils.h"

void USART_Init() {
	sei();
  a6:	78 94       	sei
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	a8 95       	wdr
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  bc:	0f be       	out	0x3f, r0	; 63
	
	//bool WD_RST = MCUSR & 0x08;
	//bool BO_RST = MCUSR & 0x04;
	//bool EXT_RST = MCUSR & 0x02;
	//bool PON_RST = MCUSR & 0x01;
	MCUSR = MCUSR & 0xF0;
  be:	84 b7       	in	r24, 0x34	; 52
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	84 bf       	out	0x34, r24	; 52
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	99 e2       	ldi	r25, 0x29	; 41
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	a8 95       	wdr
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	//END Test
		
	wdt_enable(WDTO_8S);
	
	WDTCSR = 1<<WDIE;
  d8:	90 e4       	ldi	r25, 0x40	; 64
  da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	
	//UCSR0A |= (1<<U2X0); //Удвоение частоты
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //Trust transmit and receive from USART - T/R ENable = True
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01) | (1 << UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0L = BAUD_PRESCALE;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = BAUD_PRESCALE >> 8;
  ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <USART_Init+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <USART_Init+0x5c>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <USART_Receive>:
	// Не менее 20 миллисекунд согласно документации
	_delay_ms(20);
}

byte USART_Receive(void) {	
	while( !(UCSR0A & (1<<RXC0)) );
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <USART_Receive+0x4>
	return UDR0;	
 110:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 114:	08 95       	ret

00000116 <USART_Receive_Str>:

void USART_Receive_Str(byte *calledstring, DynamicArray* a) {
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	8c 01       	movw	r16, r24
 126:	7b 01       	movw	r14, r22
	char ch;
	
	int i = 0;	
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
					calledstring[i] = CHR_LINE_FEED;
					insertArray(a, CHR_LINE_FEED);
					return;
				} else {
					calledstring[i] = ch;
 12c:	0f 2e       	mov	r0, r31
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	df 2e       	mov	r13, r31
 132:	f0 2d       	mov	r31, r0
		if (i == FRAME_SIZE) {
			return;
		}		
	
		// Get input char	
		ch = USART_Receive();
 134:	0e 94 83 00 	call	0x106	; 0x106 <USART_Receive>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
 138:	8a 33       	cpi	r24, 0x3A	; 58
 13a:	01 f1       	breq	.+64     	; 0x17c <USART_Receive_Str+0x66>
 13c:	20 97       	sbiw	r28, 0x00	; 0
 13e:	d1 f3       	breq	.-12     	; 0x134 <USART_Receive_Str+0x1e>
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	e1 f4       	brne	.+56     	; 0x17c <USART_Receive_Str+0x66>
 144:	1c 16       	cp	r1, r28
 146:	1d 06       	cpc	r1, r29
 148:	cc f4       	brge	.+50     	; 0x17c <USART_Receive_Str+0x66>
				int previous_index = i - 1;
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	49 f4       	brne	.+18     	; 0x16a <USART_Receive_Str+0x54>
					calledstring[i] = CHR_LINE_FEED;
 158:	c0 0f       	add	r28, r16
 15a:	d1 1f       	adc	r29, r17
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	88 83       	st	Y, r24
					insertArray(a, CHR_LINE_FEED);
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	c7 01       	movw	r24, r14
 164:	0e 94 cc 01 	call	0x398	; 0x398 <insertArray>
					return;
 168:	15 c0       	rjmp	.+42     	; 0x194 <USART_Receive_Str+0x7e>
				} else {
					calledstring[i] = ch;
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	d0 82       	st	Z, r13
					insertArray(a, ch);
 172:	6d 2d       	mov	r22, r13
 174:	c7 01       	movw	r24, r14
 176:	0e 94 cc 01 	call	0x398	; 0x398 <insertArray>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 17a:	08 c0       	rjmp	.+16     	; 0x18c <USART_Receive_Str+0x76>
				} else {
					calledstring[i] = ch;
					insertArray(a, ch);
				}
			} else {
				calledstring[i] = ch;
 17c:	f8 01       	movw	r30, r16
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	80 83       	st	Z, r24
				insertArray(a, ch);
 184:	68 2f       	mov	r22, r24
 186:	c7 01       	movw	r24, r14
 188:	0e 94 cc 01 	call	0x398	; 0x398 <insertArray>
			}	
		}
		
		i++;
 18c:	21 96       	adiw	r28, 0x01	; 1
	char ch;
	
	int i = 0;	
	while(1) {				
		// Check error from receive 
		if (i == FRAME_SIZE) {
 18e:	c0 32       	cpi	r28, 0x20	; 32
 190:	d1 05       	cpc	r29, r1
 192:	81 f6       	brne	.-96     	; 0x134 <USART_Receive_Str+0x1e>
			}	
		}
		
		i++;
	}	
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	08 95       	ret

000001a4 <USART_Send>:

void USART_Send(byte data) {
	while( !(UCSR0A & ( 1 << UDRE0 )) );
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	90 81       	ld	r25, Z
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <USART_Send+0x4>
	UDR0 = data;
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b2:	08 95       	ret

000001b4 <USART_Transmit_Str>:
}

void USART_Transmit_Str(DynamicArray* a) {
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	fc 01       	movw	r30, r24
			break;		
	}
	*/
	
	//Array
	int count = a->size;
 1c2:	e4 80       	ldd	r14, Z+4	; 0x04
 1c4:	f5 80       	ldd	r15, Z+5	; 0x05
	for (int i = 0; i < count; i++) {		
 1c6:	1e 14       	cp	r1, r14
 1c8:	1f 04       	cpc	r1, r15
 1ca:	c4 f4       	brge	.+48     	; 0x1fc <USART_Transmit_Str+0x48>
		if (a->array[i] != 0)
 1cc:	a0 81       	ld	r26, Z
 1ce:	b1 81       	ldd	r27, Z+1	; 0x01
 1d0:	8c 91       	ld	r24, X
 1d2:	81 11       	cpse	r24, r1
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <USART_Transmit_Str+0x36>
 1d6:	12 c0       	rjmp	.+36     	; 0x1fc <USART_Transmit_Str+0x48>
 1d8:	d8 01       	movw	r26, r16
 1da:	ed 91       	ld	r30, X+
 1dc:	fc 91       	ld	r31, X
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	80 81       	ld	r24, Z
 1e4:	81 11       	cpse	r24, r1
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <USART_Transmit_Str+0x3c>
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <USART_Transmit_Str+0x48>
 1ea:	8f 01       	movw	r16, r30
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
			// Send char
			USART_Send(a->array[i]);
 1f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Send>
	}
	*/
	
	//Array
	int count = a->size;
	for (int i = 0; i < count; i++) {		
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	ec 16       	cp	r14, r28
 1f8:	fd 06       	cpc	r15, r29
 1fa:	71 f7       	brne	.-36     	; 0x1d8 <USART_Transmit_Str+0x24>
			USART_Send(a->array[i]);
			//USART_Send(55);
		else
			break;
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <blink_WD>:

void blink_WD() {
	PORTB |= ( 1 << PINB4 ); //0xFF; //On
 20a:	2c 9a       	sbi	0x05, 4	; 5
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <blink_WD+0x6>
 214:	00 c0       	rjmp	.+0      	; 0x216 <blink_WD+0xc>
 216:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB4 ); //0x00; //OFF
 218:	2c 98       	cbi	0x05, 4	; 5
 21a:	08 95       	ret

0000021c <blink>:
}

void blink() {
	PORTB |= ( 1 << PINB5 ); //0xFF; //On
 21c:	2d 9a       	sbi	0x05, 5	; 5
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <blink+0x6>
 226:	00 c0       	rjmp	.+0      	; 0x228 <blink+0xc>
 228:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
 22a:	2d 98       	cbi	0x05, 5	; 5
 22c:	08 95       	ret

0000022e <Clean_Data>:
}

void Clean_Data(byte *input_data) {
 22e:	fc 01       	movw	r30, r24
 230:	80 96       	adiw	r24, 0x20	; 32
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		input_data[i] = 0;
 232:	11 92       	st	Z+, r1
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
}

void Clean_Data(byte *input_data) {
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 234:	e8 17       	cp	r30, r24
 236:	f9 07       	cpc	r31, r25
 238:	e1 f7       	brne	.-8      	; 0x232 <Clean_Data+0x4>
		input_data[i] = 0;
	}
}
 23a:	08 95       	ret

0000023c <__vector_6>:

// Watch dog
ISR(WDT_vect) {
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	wdt_reset();
 25e:	a8 95       	wdr

	//USART_Init();
	
	blink_WD();
 260:	0e 94 05 01 	call	0x20a	; 0x20a <blink_WD>
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <main>:

int main(void) {
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	a6 97       	sbiw	r28, 0x26	; 38
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTB as Output
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 29e:	fe 01       	movw	r30, r28
 2a0:	31 96       	adiw	r30, 0x01	; 1
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	df 01       	movw	r26, r30
 2a6:	1d 92       	st	X+, r1
 2a8:	8a 95       	dec	r24
 2aa:	e9 f7       	brne	.-6      	; 0x2a6 <main+0x20>
	
	USART_Init();       
 2ac:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	while(1) {
		// Init Array
		DynamicArray inputArray;
		initArray(&inputArray, 50);
 2b0:	62 e3       	ldi	r22, 0x32	; 50
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	ce 01       	movw	r24, r28
 2b6:	81 96       	adiw	r24, 0x21	; 33
 2b8:	0e 94 b8 01 	call	0x370	; 0x370 <initArray>
		
		// Get request
		USART_Receive_Str(input, &inputArray);
 2bc:	be 01       	movw	r22, r28
 2be:	6f 5d       	subi	r22, 0xDF	; 223
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	0e 94 8b 00 	call	0x116	; 0x116 <USART_Receive_Str>
		
		// Get CRC8 byte index
		byte index_crc8 = getCRC8Index(input, /*&inputArray,*/ FRAME_SIZE);
 2ca:	60 e2       	ldi	r22, 0x20	; 32
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 a1 01 	call	0x342	; 0x342 <getCRC8Index>
 2d4:	18 2f       	mov	r17, r24
		//byte index_crc8_1 = GetCRC8Index1(input, FRAME_SIZE, CHR_COLON);
			
		// Add CRC8 byte
		byte crc8_code = crc8(input, index_crc8);
 2d6:	68 2f       	mov	r22, r24
 2d8:	ce 01       	movw	r24, r28
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	0e 94 8d 01 	call	0x31a	; 0x31a <crc8>
		//input[index_crc8] = crc8_code;
		
		if (input[index_crc8] == crc8_code) {
 2e0:	e1 e0       	ldi	r30, 0x01	; 1
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ec 0f       	add	r30, r28
 2e6:	fd 1f       	adc	r31, r29
 2e8:	e1 0f       	add	r30, r17
 2ea:	f1 1d       	adc	r31, r1
 2ec:	90 81       	ld	r25, Z
 2ee:	89 13       	cpse	r24, r25
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <main+0x7a>
			insertArray(&inputArray, CHR_LINE_FEED);
			*/
			
			// Send response ( ECHO )
			//USART_Transmit_Str(input, &inputArray);
			USART_Transmit_Str(&inputArray);
 2f2:	ce 01       	movw	r24, r28
 2f4:	81 96       	adiw	r24, 0x21	; 33
 2f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_Str>
			
			// Info Blink
			blink();
 2fa:	0e 94 0e 01 	call	0x21c	; 0x21c <blink>
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <main+0x82>
			answer[9] = CHR_LINE_FEED;
			*/
			
			// Send response
			//USART_Transmit_Str(answer, &inputArray);
			USART_Transmit_Str(&inputArray);
 300:	ce 01       	movw	r24, r28
 302:	81 96       	adiw	r24, 0x21	; 33
 304:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_LINE_FEED, &inputArray);
			*/
		}
		
		// Clear array
		Clean_Data(input);
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	0e 94 17 01 	call	0x22e	; 0x22e <Clean_Data>
		
		// Free Array
		freeArray(&inputArray);	
 310:	ce 01       	movw	r24, r28
 312:	81 96       	adiw	r24, 0x21	; 33
 314:	0e 94 f5 01 	call	0x3ea	; 0x3ea <freeArray>
		
		// Info Blink
		//blink();
	}
 318:	cb cf       	rjmp	.-106    	; 0x2b0 <main+0x2a>

0000031a <crc8>:
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 31a:	66 23       	and	r22, r22
 31c:	81 f0       	breq	.+32     	; 0x33e <crc8+0x24>
 31e:	dc 01       	movw	r26, r24
 320:	9c 01       	movw	r18, r24
 322:	26 0f       	add	r18, r22
 324:	31 1d       	adc	r19, r1
 326:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
 328:	ed 91       	ld	r30, X+
 32a:	8e 27       	eor	r24, r30
 32c:	e8 2f       	mov	r30, r24
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ea 5f       	subi	r30, 0xFA	; 250
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 336:	a2 17       	cp	r26, r18
 338:	b3 07       	cpc	r27, r19
 33a:	b1 f7       	brne	.-20     	; 0x328 <crc8+0xe>
 33c:	08 95       	ret
	0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
	}

	return crc;
}
 340:	08 95       	ret

00000342 <getCRC8Index>:

// frame_size = 32
// end_line = 13
byte getCRC8Index(byte *input_data, /*DynamicArray* a,*/ uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 342:	66 23       	and	r22, r22
 344:	99 f0       	breq	.+38     	; 0x36c <getCRC8Index+0x2a>
 346:	e8 2f       	mov	r30, r24
 348:	f9 2f       	mov	r31, r25
 34a:	90 e0       	ldi	r25, 0x00	; 0
		// Need many checks
		if (input_data[i] == CHR_COLON && i > 0) {
 34c:	21 91       	ld	r18, Z+
 34e:	2a 33       	cpi	r18, 0x3A	; 58
 350:	41 f4       	brne	.+16     	; 0x362 <getCRC8Index+0x20>
 352:	99 23       	and	r25, r25
 354:	31 f0       	breq	.+12     	; 0x362 <getCRC8Index+0x20>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
 356:	80 81       	ld	r24, Z
 358:	8d 30       	cpi	r24, 0x0D	; 13
 35a:	19 f4       	brne	.+6      	; 0x362 <getCRC8Index+0x20>
				return i - 1;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	89 0f       	add	r24, r25
 360:	08 95       	ret
			}
		}
		
		x++;
 362:	9f 5f       	subi	r25, 0xFF	; 255

// frame_size = 32
// end_line = 13
byte getCRC8Index(byte *input_data, /*DynamicArray* a,*/ uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 364:	69 13       	cpse	r22, r25
 366:	f2 cf       	rjmp	.-28     	; 0x34c <getCRC8Index+0xa>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
				return i - 1;
			}
		}
		
		x++;
 368:	86 2f       	mov	r24, r22
 36a:	08 95       	ret
}

// frame_size = 32
// end_line = 13
byte getCRC8Index(byte *input_data, /*DynamicArray* a,*/ uint8_t frame_size) {
	uint8_t x = 0;
 36c:	80 e0       	ldi	r24, 0x00	; 0
		
		x++;
	}
	
	return x;
}
 36e:	08 95       	ret

00000370 <initArray>:

void initArray(DynamicArray* a, size_t initialSize) {
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	8b 01       	movw	r16, r22
	a->array = (byte*)malloc(initialSize * sizeof(byte));
 37c:	cb 01       	movw	r24, r22
 37e:	0e 94 05 02 	call	0x40a	; 0x40a <malloc>
 382:	99 83       	std	Y+1, r25	; 0x01
 384:	88 83       	st	Y, r24
	a->used = 0;
 386:	1b 82       	std	Y+3, r1	; 0x03
 388:	1a 82       	std	Y+2, r1	; 0x02
	a->size = initialSize;
 38a:	1d 83       	std	Y+5, r17	; 0x05
 38c:	0c 83       	std	Y+4, r16	; 0x04
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	08 95       	ret

00000398 <insertArray>:

void insertArray(DynamicArray* a, byte element_byte) {
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
 3a0:	16 2f       	mov	r17, r22
	if (a->used == a->size) {
 3a2:	6a 81       	ldd	r22, Y+2	; 0x02
 3a4:	7b 81       	ldd	r23, Y+3	; 0x03
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	9d 81       	ldd	r25, Y+5	; 0x05
 3aa:	68 17       	cp	r22, r24
 3ac:	79 07       	cpc	r23, r25
 3ae:	61 f4       	brne	.+24     	; 0x3c8 <insertArray+0x30>
		a->size += 1;
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	7d 83       	std	Y+5, r23	; 0x05
 3b6:	6c 83       	std	Y+4, r22	; 0x04
		byte* newarr = (byte*)realloc(a->array, a->size * sizeof(byte));
 3b8:	88 81       	ld	r24, Y
 3ba:	99 81       	ldd	r25, Y+1	; 0x01
 3bc:	0e 94 26 03 	call	0x64c	; 0x64c <realloc>
		if (newarr == NULL) return; // Block don't selected - return
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	79 f0       	breq	.+30     	; 0x3e2 <insertArray+0x4a>
		a->array = newarr;
 3c4:	99 83       	std	Y+1, r25	; 0x01
 3c6:	88 83       	st	Y, r24
	}

	a->array[a->used++] = element_byte;
 3c8:	28 81       	ld	r18, Y
 3ca:	39 81       	ldd	r19, Y+1	; 0x01
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	9b 81       	ldd	r25, Y+3	; 0x03
 3d0:	ac 01       	movw	r20, r24
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	5b 83       	std	Y+3, r21	; 0x03
 3d8:	4a 83       	std	Y+2, r20	; 0x02
 3da:	f9 01       	movw	r30, r18
 3dc:	e8 0f       	add	r30, r24
 3de:	f9 1f       	adc	r31, r25
 3e0:	10 83       	st	Z, r17
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	08 95       	ret

000003ea <freeArray>:

void freeArray(DynamicArray* a) {
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
	free(a->array);
 3f0:	88 81       	ld	r24, Y
 3f2:	99 81       	ldd	r25, Y+1	; 0x01
 3f4:	0e 94 9d 02 	call	0x53a	; 0x53a <free>
	a->array = NULL;
 3f8:	19 82       	std	Y+1, r1	; 0x01
 3fa:	18 82       	st	Y, r1
	a->used = a->size = 0;
 3fc:	1d 82       	std	Y+5, r1	; 0x05
 3fe:	1c 82       	std	Y+4, r1	; 0x04
 400:	1b 82       	std	Y+3, r1	; 0x03
 402:	1a 82       	std	Y+2, r1	; 0x02
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <malloc>:
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	91 05       	cpc	r25, r1
 416:	10 f4       	brcc	.+4      	; 0x41c <malloc+0x12>
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 420:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	a0 e0       	ldi	r26, 0x00	; 0
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	30 97       	sbiw	r30, 0x00	; 0
 42e:	19 f1       	breq	.+70     	; 0x476 <malloc+0x6c>
 430:	40 81       	ld	r20, Z
 432:	51 81       	ldd	r21, Z+1	; 0x01
 434:	02 81       	ldd	r16, Z+2	; 0x02
 436:	13 81       	ldd	r17, Z+3	; 0x03
 438:	48 17       	cp	r20, r24
 43a:	59 07       	cpc	r21, r25
 43c:	c8 f0       	brcs	.+50     	; 0x470 <malloc+0x66>
 43e:	84 17       	cp	r24, r20
 440:	95 07       	cpc	r25, r21
 442:	69 f4       	brne	.+26     	; 0x45e <malloc+0x54>
 444:	10 97       	sbiw	r26, 0x00	; 0
 446:	31 f0       	breq	.+12     	; 0x454 <malloc+0x4a>
 448:	12 96       	adiw	r26, 0x02	; 2
 44a:	0c 93       	st	X, r16
 44c:	12 97       	sbiw	r26, 0x02	; 2
 44e:	13 96       	adiw	r26, 0x03	; 3
 450:	1c 93       	st	X, r17
 452:	27 c0       	rjmp	.+78     	; 0x4a2 <malloc+0x98>
 454:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 458:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 45c:	22 c0       	rjmp	.+68     	; 0x4a2 <malloc+0x98>
 45e:	21 15       	cp	r18, r1
 460:	31 05       	cpc	r19, r1
 462:	19 f0       	breq	.+6      	; 0x46a <malloc+0x60>
 464:	42 17       	cp	r20, r18
 466:	53 07       	cpc	r21, r19
 468:	18 f4       	brcc	.+6      	; 0x470 <malloc+0x66>
 46a:	9a 01       	movw	r18, r20
 46c:	bd 01       	movw	r22, r26
 46e:	ef 01       	movw	r28, r30
 470:	df 01       	movw	r26, r30
 472:	f8 01       	movw	r30, r16
 474:	db cf       	rjmp	.-74     	; 0x42c <malloc+0x22>
 476:	21 15       	cp	r18, r1
 478:	31 05       	cpc	r19, r1
 47a:	f9 f0       	breq	.+62     	; 0x4ba <malloc+0xb0>
 47c:	28 1b       	sub	r18, r24
 47e:	39 0b       	sbc	r19, r25
 480:	24 30       	cpi	r18, 0x04	; 4
 482:	31 05       	cpc	r19, r1
 484:	80 f4       	brcc	.+32     	; 0x4a6 <malloc+0x9c>
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	9b 81       	ldd	r25, Y+3	; 0x03
 48a:	61 15       	cp	r22, r1
 48c:	71 05       	cpc	r23, r1
 48e:	21 f0       	breq	.+8      	; 0x498 <malloc+0x8e>
 490:	fb 01       	movw	r30, r22
 492:	93 83       	std	Z+3, r25	; 0x03
 494:	82 83       	std	Z+2, r24	; 0x02
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <malloc+0x96>
 498:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 49c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 4a0:	fe 01       	movw	r30, r28
 4a2:	32 96       	adiw	r30, 0x02	; 2
 4a4:	44 c0       	rjmp	.+136    	; 0x52e <malloc+0x124>
 4a6:	fe 01       	movw	r30, r28
 4a8:	e2 0f       	add	r30, r18
 4aa:	f3 1f       	adc	r31, r19
 4ac:	81 93       	st	Z+, r24
 4ae:	91 93       	st	Z+, r25
 4b0:	22 50       	subi	r18, 0x02	; 2
 4b2:	31 09       	sbc	r19, r1
 4b4:	39 83       	std	Y+1, r19	; 0x01
 4b6:	28 83       	st	Y, r18
 4b8:	3a c0       	rjmp	.+116    	; 0x52e <malloc+0x124>
 4ba:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4be:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4c2:	23 2b       	or	r18, r19
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <malloc+0xcc>
 4c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 4ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 4ce:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 4d2:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 4d6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4da:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4de:	21 15       	cp	r18, r1
 4e0:	31 05       	cpc	r19, r1
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <malloc+0xea>
 4e4:	2d b7       	in	r18, 0x3d	; 61
 4e6:	3e b7       	in	r19, 0x3e	; 62
 4e8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 4ec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 4f0:	24 1b       	sub	r18, r20
 4f2:	35 0b       	sbc	r19, r21
 4f4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 4f8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 4fc:	e2 17       	cp	r30, r18
 4fe:	f3 07       	cpc	r31, r19
 500:	a0 f4       	brcc	.+40     	; 0x52a <malloc+0x120>
 502:	2e 1b       	sub	r18, r30
 504:	3f 0b       	sbc	r19, r31
 506:	28 17       	cp	r18, r24
 508:	39 07       	cpc	r19, r25
 50a:	78 f0       	brcs	.+30     	; 0x52a <malloc+0x120>
 50c:	ac 01       	movw	r20, r24
 50e:	4e 5f       	subi	r20, 0xFE	; 254
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	24 17       	cp	r18, r20
 514:	35 07       	cpc	r19, r21
 516:	48 f0       	brcs	.+18     	; 0x52a <malloc+0x120>
 518:	4e 0f       	add	r20, r30
 51a:	5f 1f       	adc	r21, r31
 51c:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 520:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 524:	81 93       	st	Z+, r24
 526:	91 93       	st	Z+, r25
 528:	02 c0       	rjmp	.+4      	; 0x52e <malloc+0x124>
 52a:	e0 e0       	ldi	r30, 0x00	; 0
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	cf 01       	movw	r24, r30
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	08 95       	ret

0000053a <free>:
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	09 f4       	brne	.+2      	; 0x544 <free+0xa>
 542:	81 c0       	rjmp	.+258    	; 0x646 <free+0x10c>
 544:	fc 01       	movw	r30, r24
 546:	32 97       	sbiw	r30, 0x02	; 2
 548:	13 82       	std	Z+3, r1	; 0x03
 54a:	12 82       	std	Z+2, r1	; 0x02
 54c:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 550:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 554:	10 97       	sbiw	r26, 0x00	; 0
 556:	81 f4       	brne	.+32     	; 0x578 <free+0x3e>
 558:	20 81       	ld	r18, Z
 55a:	31 81       	ldd	r19, Z+1	; 0x01
 55c:	82 0f       	add	r24, r18
 55e:	93 1f       	adc	r25, r19
 560:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 564:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 568:	28 17       	cp	r18, r24
 56a:	39 07       	cpc	r19, r25
 56c:	51 f5       	brne	.+84     	; 0x5c2 <free+0x88>
 56e:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 572:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 576:	67 c0       	rjmp	.+206    	; 0x646 <free+0x10c>
 578:	ed 01       	movw	r28, r26
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	ce 17       	cp	r28, r30
 580:	df 07       	cpc	r29, r31
 582:	40 f4       	brcc	.+16     	; 0x594 <free+0x5a>
 584:	4a 81       	ldd	r20, Y+2	; 0x02
 586:	5b 81       	ldd	r21, Y+3	; 0x03
 588:	9e 01       	movw	r18, r28
 58a:	41 15       	cp	r20, r1
 58c:	51 05       	cpc	r21, r1
 58e:	f1 f0       	breq	.+60     	; 0x5cc <free+0x92>
 590:	ea 01       	movw	r28, r20
 592:	f5 cf       	rjmp	.-22     	; 0x57e <free+0x44>
 594:	d3 83       	std	Z+3, r29	; 0x03
 596:	c2 83       	std	Z+2, r28	; 0x02
 598:	40 81       	ld	r20, Z
 59a:	51 81       	ldd	r21, Z+1	; 0x01
 59c:	84 0f       	add	r24, r20
 59e:	95 1f       	adc	r25, r21
 5a0:	c8 17       	cp	r28, r24
 5a2:	d9 07       	cpc	r29, r25
 5a4:	59 f4       	brne	.+22     	; 0x5bc <free+0x82>
 5a6:	88 81       	ld	r24, Y
 5a8:	99 81       	ldd	r25, Y+1	; 0x01
 5aa:	84 0f       	add	r24, r20
 5ac:	95 1f       	adc	r25, r21
 5ae:	02 96       	adiw	r24, 0x02	; 2
 5b0:	91 83       	std	Z+1, r25	; 0x01
 5b2:	80 83       	st	Z, r24
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	9b 81       	ldd	r25, Y+3	; 0x03
 5b8:	93 83       	std	Z+3, r25	; 0x03
 5ba:	82 83       	std	Z+2, r24	; 0x02
 5bc:	21 15       	cp	r18, r1
 5be:	31 05       	cpc	r19, r1
 5c0:	29 f4       	brne	.+10     	; 0x5cc <free+0x92>
 5c2:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 5c6:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 5ca:	3d c0       	rjmp	.+122    	; 0x646 <free+0x10c>
 5cc:	e9 01       	movw	r28, r18
 5ce:	fb 83       	std	Y+3, r31	; 0x03
 5d0:	ea 83       	std	Y+2, r30	; 0x02
 5d2:	49 91       	ld	r20, Y+
 5d4:	59 91       	ld	r21, Y+
 5d6:	c4 0f       	add	r28, r20
 5d8:	d5 1f       	adc	r29, r21
 5da:	ec 17       	cp	r30, r28
 5dc:	fd 07       	cpc	r31, r29
 5de:	61 f4       	brne	.+24     	; 0x5f8 <free+0xbe>
 5e0:	80 81       	ld	r24, Z
 5e2:	91 81       	ldd	r25, Z+1	; 0x01
 5e4:	84 0f       	add	r24, r20
 5e6:	95 1f       	adc	r25, r21
 5e8:	02 96       	adiw	r24, 0x02	; 2
 5ea:	e9 01       	movw	r28, r18
 5ec:	99 83       	std	Y+1, r25	; 0x01
 5ee:	88 83       	st	Y, r24
 5f0:	82 81       	ldd	r24, Z+2	; 0x02
 5f2:	93 81       	ldd	r25, Z+3	; 0x03
 5f4:	9b 83       	std	Y+3, r25	; 0x03
 5f6:	8a 83       	std	Y+2, r24	; 0x02
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	12 96       	adiw	r26, 0x02	; 2
 5fe:	8d 91       	ld	r24, X+
 600:	9c 91       	ld	r25, X
 602:	13 97       	sbiw	r26, 0x03	; 3
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	19 f0       	breq	.+6      	; 0x60e <free+0xd4>
 608:	fd 01       	movw	r30, r26
 60a:	dc 01       	movw	r26, r24
 60c:	f7 cf       	rjmp	.-18     	; 0x5fc <free+0xc2>
 60e:	8d 91       	ld	r24, X+
 610:	9c 91       	ld	r25, X
 612:	11 97       	sbiw	r26, 0x01	; 1
 614:	9d 01       	movw	r18, r26
 616:	2e 5f       	subi	r18, 0xFE	; 254
 618:	3f 4f       	sbci	r19, 0xFF	; 255
 61a:	82 0f       	add	r24, r18
 61c:	93 1f       	adc	r25, r19
 61e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 622:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 626:	28 17       	cp	r18, r24
 628:	39 07       	cpc	r19, r25
 62a:	69 f4       	brne	.+26     	; 0x646 <free+0x10c>
 62c:	30 97       	sbiw	r30, 0x00	; 0
 62e:	29 f4       	brne	.+10     	; 0x63a <free+0x100>
 630:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 634:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 638:	02 c0       	rjmp	.+4      	; 0x63e <free+0x104>
 63a:	13 82       	std	Z+3, r1	; 0x03
 63c:	12 82       	std	Z+2, r1	; 0x02
 63e:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 642:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <realloc>:
 64c:	a0 e0       	ldi	r26, 0x00	; 0
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	ec e2       	ldi	r30, 0x2C	; 44
 652:	f3 e0       	ldi	r31, 0x03	; 3
 654:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__prologue_saves__+0x8>
 658:	ec 01       	movw	r28, r24
 65a:	00 97       	sbiw	r24, 0x00	; 0
 65c:	21 f4       	brne	.+8      	; 0x666 <realloc+0x1a>
 65e:	cb 01       	movw	r24, r22
 660:	0e 94 05 02 	call	0x40a	; 0x40a <malloc>
 664:	b4 c0       	rjmp	.+360    	; 0x7ce <realloc+0x182>
 666:	fc 01       	movw	r30, r24
 668:	e6 0f       	add	r30, r22
 66a:	f7 1f       	adc	r31, r23
 66c:	9c 01       	movw	r18, r24
 66e:	22 50       	subi	r18, 0x02	; 2
 670:	31 09       	sbc	r19, r1
 672:	e2 17       	cp	r30, r18
 674:	f3 07       	cpc	r31, r19
 676:	08 f4       	brcc	.+2      	; 0x67a <realloc+0x2e>
 678:	a8 c0       	rjmp	.+336    	; 0x7ca <realloc+0x17e>
 67a:	d9 01       	movw	r26, r18
 67c:	0d 91       	ld	r16, X+
 67e:	1c 91       	ld	r17, X
 680:	11 97       	sbiw	r26, 0x01	; 1
 682:	06 17       	cp	r16, r22
 684:	17 07       	cpc	r17, r23
 686:	b0 f0       	brcs	.+44     	; 0x6b4 <realloc+0x68>
 688:	05 30       	cpi	r16, 0x05	; 5
 68a:	11 05       	cpc	r17, r1
 68c:	08 f4       	brcc	.+2      	; 0x690 <realloc+0x44>
 68e:	9b c0       	rjmp	.+310    	; 0x7c6 <realloc+0x17a>
 690:	c8 01       	movw	r24, r16
 692:	04 97       	sbiw	r24, 0x04	; 4
 694:	86 17       	cp	r24, r22
 696:	97 07       	cpc	r25, r23
 698:	08 f4       	brcc	.+2      	; 0x69c <realloc+0x50>
 69a:	95 c0       	rjmp	.+298    	; 0x7c6 <realloc+0x17a>
 69c:	02 50       	subi	r16, 0x02	; 2
 69e:	11 09       	sbc	r17, r1
 6a0:	06 1b       	sub	r16, r22
 6a2:	17 0b       	sbc	r17, r23
 6a4:	01 93       	st	Z+, r16
 6a6:	11 93       	st	Z+, r17
 6a8:	6d 93       	st	X+, r22
 6aa:	7c 93       	st	X, r23
 6ac:	cf 01       	movw	r24, r30
 6ae:	0e 94 9d 02 	call	0x53a	; 0x53a <free>
 6b2:	89 c0       	rjmp	.+274    	; 0x7c6 <realloc+0x17a>
 6b4:	5b 01       	movw	r10, r22
 6b6:	a0 1a       	sub	r10, r16
 6b8:	b1 0a       	sbc	r11, r17
 6ba:	4c 01       	movw	r8, r24
 6bc:	80 0e       	add	r8, r16
 6be:	91 1e       	adc	r9, r17
 6c0:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 6c4:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 6c8:	61 2c       	mov	r6, r1
 6ca:	71 2c       	mov	r7, r1
 6cc:	e1 2c       	mov	r14, r1
 6ce:	f1 2c       	mov	r15, r1
 6d0:	10 97       	sbiw	r26, 0x00	; 0
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <realloc+0x8a>
 6d4:	46 c0       	rjmp	.+140    	; 0x762 <realloc+0x116>
 6d6:	8d 91       	ld	r24, X+
 6d8:	9c 91       	ld	r25, X
 6da:	11 97       	sbiw	r26, 0x01	; 1
 6dc:	a8 15       	cp	r26, r8
 6de:	b9 05       	cpc	r27, r9
 6e0:	b1 f5       	brne	.+108    	; 0x74e <realloc+0x102>
 6e2:	6c 01       	movw	r12, r24
 6e4:	42 e0       	ldi	r20, 0x02	; 2
 6e6:	c4 0e       	add	r12, r20
 6e8:	d1 1c       	adc	r13, r1
 6ea:	ca 14       	cp	r12, r10
 6ec:	db 04       	cpc	r13, r11
 6ee:	78 f1       	brcs	.+94     	; 0x74e <realloc+0x102>
 6f0:	4c 01       	movw	r8, r24
 6f2:	8a 18       	sub	r8, r10
 6f4:	9b 08       	sbc	r9, r11
 6f6:	64 01       	movw	r12, r8
 6f8:	42 e0       	ldi	r20, 0x02	; 2
 6fa:	c4 0e       	add	r12, r20
 6fc:	d1 1c       	adc	r13, r1
 6fe:	12 96       	adiw	r26, 0x02	; 2
 700:	bc 90       	ld	r11, X
 702:	12 97       	sbiw	r26, 0x02	; 2
 704:	13 96       	adiw	r26, 0x03	; 3
 706:	ac 91       	ld	r26, X
 708:	b5 e0       	ldi	r27, 0x05	; 5
 70a:	cb 16       	cp	r12, r27
 70c:	d1 04       	cpc	r13, r1
 70e:	40 f0       	brcs	.+16     	; 0x720 <realloc+0xd4>
 710:	b2 82       	std	Z+2, r11	; 0x02
 712:	a3 83       	std	Z+3, r26	; 0x03
 714:	91 82       	std	Z+1, r9	; 0x01
 716:	80 82       	st	Z, r8
 718:	d9 01       	movw	r26, r18
 71a:	6d 93       	st	X+, r22
 71c:	7c 93       	st	X, r23
 71e:	09 c0       	rjmp	.+18     	; 0x732 <realloc+0xe6>
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	80 0f       	add	r24, r16
 726:	91 1f       	adc	r25, r17
 728:	f9 01       	movw	r30, r18
 72a:	91 83       	std	Z+1, r25	; 0x01
 72c:	80 83       	st	Z, r24
 72e:	eb 2d       	mov	r30, r11
 730:	fa 2f       	mov	r31, r26
 732:	e1 14       	cp	r14, r1
 734:	f1 04       	cpc	r15, r1
 736:	31 f0       	breq	.+12     	; 0x744 <realloc+0xf8>
 738:	d7 01       	movw	r26, r14
 73a:	13 96       	adiw	r26, 0x03	; 3
 73c:	fc 93       	st	X, r31
 73e:	ee 93       	st	-X, r30
 740:	12 97       	sbiw	r26, 0x02	; 2
 742:	41 c0       	rjmp	.+130    	; 0x7c6 <realloc+0x17a>
 744:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 748:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 74c:	3c c0       	rjmp	.+120    	; 0x7c6 <realloc+0x17a>
 74e:	68 16       	cp	r6, r24
 750:	79 06       	cpc	r7, r25
 752:	08 f4       	brcc	.+2      	; 0x756 <realloc+0x10a>
 754:	3c 01       	movw	r6, r24
 756:	7d 01       	movw	r14, r26
 758:	12 96       	adiw	r26, 0x02	; 2
 75a:	0d 90       	ld	r0, X+
 75c:	bc 91       	ld	r27, X
 75e:	a0 2d       	mov	r26, r0
 760:	b7 cf       	rjmp	.-146    	; 0x6d0 <realloc+0x84>
 762:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 766:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 76a:	88 16       	cp	r8, r24
 76c:	99 06       	cpc	r9, r25
 76e:	e1 f4       	brne	.+56     	; 0x7a8 <realloc+0x15c>
 770:	66 16       	cp	r6, r22
 772:	77 06       	cpc	r7, r23
 774:	c8 f4       	brcc	.+50     	; 0x7a8 <realloc+0x15c>
 776:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 77a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 77e:	00 97       	sbiw	r24, 0x00	; 0
 780:	41 f4       	brne	.+16     	; 0x792 <realloc+0x146>
 782:	8d b7       	in	r24, 0x3d	; 61
 784:	9e b7       	in	r25, 0x3e	; 62
 786:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 78a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 78e:	84 1b       	sub	r24, r20
 790:	95 0b       	sbc	r25, r21
 792:	e8 17       	cp	r30, r24
 794:	f9 07       	cpc	r31, r25
 796:	c8 f4       	brcc	.+50     	; 0x7ca <realloc+0x17e>
 798:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 79c:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 7a0:	f9 01       	movw	r30, r18
 7a2:	71 83       	std	Z+1, r23	; 0x01
 7a4:	60 83       	st	Z, r22
 7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <realloc+0x17a>
 7a8:	cb 01       	movw	r24, r22
 7aa:	0e 94 05 02 	call	0x40a	; 0x40a <malloc>
 7ae:	7c 01       	movw	r14, r24
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	59 f0       	breq	.+22     	; 0x7ca <realloc+0x17e>
 7b4:	a8 01       	movw	r20, r16
 7b6:	be 01       	movw	r22, r28
 7b8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <memcpy>
 7bc:	ce 01       	movw	r24, r28
 7be:	0e 94 9d 02 	call	0x53a	; 0x53a <free>
 7c2:	c7 01       	movw	r24, r14
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <realloc+0x182>
 7c6:	ce 01       	movw	r24, r28
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <realloc+0x182>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	ee e0       	ldi	r30, 0x0E	; 14
 7d4:	0c 94 15 04 	jmp	0x82a	; 0x82a <__epilogue_restores__+0x8>

000007d8 <memcpy>:
 7d8:	fb 01       	movw	r30, r22
 7da:	dc 01       	movw	r26, r24
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <memcpy+0xa>
 7de:	01 90       	ld	r0, Z+
 7e0:	0d 92       	st	X+, r0
 7e2:	41 50       	subi	r20, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	d8 f7       	brcc	.-10     	; 0x7de <memcpy+0x6>
 7e8:	08 95       	ret

000007ea <__prologue_saves__>:
 7ea:	2f 92       	push	r2
 7ec:	3f 92       	push	r3
 7ee:	4f 92       	push	r4
 7f0:	5f 92       	push	r5
 7f2:	6f 92       	push	r6
 7f4:	7f 92       	push	r7
 7f6:	8f 92       	push	r8
 7f8:	9f 92       	push	r9
 7fa:	af 92       	push	r10
 7fc:	bf 92       	push	r11
 7fe:	cf 92       	push	r12
 800:	df 92       	push	r13
 802:	ef 92       	push	r14
 804:	ff 92       	push	r15
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	ca 1b       	sub	r28, r26
 814:	db 0b       	sbc	r29, r27
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	f8 94       	cli
 81a:	de bf       	out	0x3e, r29	; 62
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	cd bf       	out	0x3d, r28	; 61
 820:	09 94       	ijmp

00000822 <__epilogue_restores__>:
 822:	2a 88       	ldd	r2, Y+18	; 0x12
 824:	39 88       	ldd	r3, Y+17	; 0x11
 826:	48 88       	ldd	r4, Y+16	; 0x10
 828:	5f 84       	ldd	r5, Y+15	; 0x0f
 82a:	6e 84       	ldd	r6, Y+14	; 0x0e
 82c:	7d 84       	ldd	r7, Y+13	; 0x0d
 82e:	8c 84       	ldd	r8, Y+12	; 0x0c
 830:	9b 84       	ldd	r9, Y+11	; 0x0b
 832:	aa 84       	ldd	r10, Y+10	; 0x0a
 834:	b9 84       	ldd	r11, Y+9	; 0x09
 836:	c8 84       	ldd	r12, Y+8	; 0x08
 838:	df 80       	ldd	r13, Y+7	; 0x07
 83a:	ee 80       	ldd	r14, Y+6	; 0x06
 83c:	fd 80       	ldd	r15, Y+5	; 0x05
 83e:	0c 81       	ldd	r16, Y+4	; 0x04
 840:	1b 81       	ldd	r17, Y+3	; 0x03
 842:	aa 81       	ldd	r26, Y+2	; 0x02
 844:	b9 81       	ldd	r27, Y+1	; 0x01
 846:	ce 0f       	add	r28, r30
 848:	d1 1d       	adc	r29, r1
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
 854:	ed 01       	movw	r28, r26
 856:	08 95       	ret

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
