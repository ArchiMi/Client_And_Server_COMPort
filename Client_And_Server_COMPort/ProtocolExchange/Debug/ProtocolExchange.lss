
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000916  000009aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000916  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  00000ab0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001261  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a07  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087e  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090a  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000414a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  9e:	0c 94 89 04 	jmp	0x912	; 0x912 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	}
				
	//a.array[9]  // Get and set byte to array element
	//a.used  // Number of elements
	freeArray(&a);
}
  a6:	78 94       	sei
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	a8 95       	wdr
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  bc:	0f be       	out	0x3f, r0	; 63
  be:	84 b7       	in	r24, 0x34	; 52
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	84 bf       	out	0x34, r24	; 52
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	99 e2       	ldi	r25, 0x29	; 41
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	a8 95       	wdr
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  d8:	90 e4       	ldi	r25, 0x40	; 64
  da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <USART_Init+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <USART_Init+0x5c>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <USART_Receive>:
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <USART_Receive+0x4>
 110:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 114:	08 95       	ret

00000116 <USART_Receive_Str>:
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	8c 01       	movw	r16, r24
 126:	7b 01       	movw	r14, r22
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	0f 2e       	mov	r0, r31
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	df 2e       	mov	r13, r31
 132:	f0 2d       	mov	r31, r0
 134:	0e 94 83 00 	call	0x106	; 0x106 <USART_Receive>
 138:	8a 33       	cpi	r24, 0x3A	; 58
 13a:	01 f1       	breq	.+64     	; 0x17c <USART_Receive_Str+0x66>
 13c:	20 97       	sbiw	r28, 0x00	; 0
 13e:	d1 f3       	breq	.-12     	; 0x134 <USART_Receive_Str+0x1e>
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	e1 f4       	brne	.+56     	; 0x17c <USART_Receive_Str+0x66>
 144:	1c 16       	cp	r1, r28
 146:	1d 06       	cpc	r1, r29
 148:	cc f4       	brge	.+50     	; 0x17c <USART_Receive_Str+0x66>
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	49 f4       	brne	.+18     	; 0x16a <USART_Receive_Str+0x54>
 158:	c0 0f       	add	r28, r16
 15a:	d1 1f       	adc	r29, r17
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	88 83       	st	Y, r24
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	c7 01       	movw	r24, r14
 164:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
 168:	15 c0       	rjmp	.+42     	; 0x194 <USART_Receive_Str+0x7e>
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	d0 82       	st	Z, r13
 172:	6d 2d       	mov	r22, r13
 174:	c7 01       	movw	r24, r14
 176:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
 17a:	08 c0       	rjmp	.+16     	; 0x18c <USART_Receive_Str+0x76>
 17c:	f8 01       	movw	r30, r16
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	80 83       	st	Z, r24
 184:	68 2f       	mov	r22, r24
 186:	c7 01       	movw	r24, r14
 188:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	c0 32       	cpi	r28, 0x20	; 32
 190:	d1 05       	cpc	r29, r1
 192:	81 f6       	brne	.-96     	; 0x134 <USART_Receive_Str+0x1e>
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	08 95       	ret

000001a4 <USART_Send>:
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	90 81       	ld	r25, Z
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <USART_Send+0x4>
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b2:	08 95       	ret

000001b4 <USART_Transmit_Str>:
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	fc 01       	movw	r30, r24
 1c2:	e4 80       	ldd	r14, Z+4	; 0x04
 1c4:	f5 80       	ldd	r15, Z+5	; 0x05
 1c6:	1e 14       	cp	r1, r14
 1c8:	1f 04       	cpc	r1, r15
 1ca:	c4 f4       	brge	.+48     	; 0x1fc <USART_Transmit_Str+0x48>
 1cc:	a0 81       	ld	r26, Z
 1ce:	b1 81       	ldd	r27, Z+1	; 0x01
 1d0:	8c 91       	ld	r24, X
 1d2:	81 11       	cpse	r24, r1
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <USART_Transmit_Str+0x36>
 1d6:	12 c0       	rjmp	.+36     	; 0x1fc <USART_Transmit_Str+0x48>
 1d8:	d8 01       	movw	r26, r16
 1da:	ed 91       	ld	r30, X+
 1dc:	fc 91       	ld	r31, X
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	80 81       	ld	r24, Z
 1e4:	81 11       	cpse	r24, r1
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <USART_Transmit_Str+0x3c>
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <USART_Transmit_Str+0x48>
 1ea:	8f 01       	movw	r16, r30
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Send>
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	ec 16       	cp	r14, r28
 1f8:	fd 06       	cpc	r15, r29
 1fa:	71 f7       	brne	.-36     	; 0x1d8 <USART_Transmit_Str+0x24>
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <blink_WD>:
 20a:	2c 9a       	sbi	0x05, 4	; 5
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <blink_WD+0x6>
 214:	00 c0       	rjmp	.+0      	; 0x216 <blink_WD+0xc>
 216:	00 00       	nop
 218:	2c 98       	cbi	0x05, 4	; 5
 21a:	08 95       	ret

0000021c <blink>:
 21c:	2d 9a       	sbi	0x05, 5	; 5
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <blink+0x6>
 226:	00 c0       	rjmp	.+0      	; 0x228 <blink+0xc>
 228:	00 00       	nop
 22a:	2d 98       	cbi	0x05, 5	; 5
 22c:	08 95       	ret

0000022e <Clean_Data>:
 22e:	fc 01       	movw	r30, r24
 230:	80 96       	adiw	r24, 0x20	; 32
 232:	11 92       	st	Z+, r1
 234:	e8 17       	cp	r30, r24
 236:	f9 07       	cpc	r31, r25
 238:	e1 f7       	brne	.-8      	; 0x232 <Clean_Data+0x4>
 23a:	08 95       	ret

0000023c <__vector_6>:
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
 25e:	a8 95       	wdr
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
 264:	0e 94 05 01 	call	0x20a	; 0x20a <blink_WD>
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <main>:

int main(void) {
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	a6 97       	sbiw	r28, 0x26	; 38
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTB as Output
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 2a2:	fe 01       	movw	r30, r28
 2a4:	31 96       	adiw	r30, 0x01	; 1
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	df 01       	movw	r26, r30
 2aa:	1d 92       	st	X+, r1
 2ac:	8a 95       	dec	r24
 2ae:	e9 f7       	brne	.-6      	; 0x2aa <main+0x20>
	
	USART_Init();       
 2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	while(1) {
		// Init Array
		Array inputArray;
		initArray(&inputArray, 50);
 2b4:	62 e3       	ldi	r22, 0x32	; 50
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	ce 01       	movw	r24, r28
 2ba:	81 96       	adiw	r24, 0x21	; 33
 2bc:	0e 94 15 02 	call	0x42a	; 0x42a <initArray>
		
		// Get request
		USART_Receive_Str(input, &inputArray);
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5d       	subi	r22, 0xDF	; 223
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 8b 00 	call	0x116	; 0x116 <USART_Receive_Str>
		
		// Get CRC8 byte index
		byte index_crc8 = GetCRC8Index(input, FRAME_SIZE, CHR_COLON);
 2ce:	4a e3       	ldi	r20, 0x3A	; 58
 2d0:	60 e2       	ldi	r22, 0x20	; 32
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <GetCRC8Index>
 2da:	18 2f       	mov	r17, r24
			
		// Add CRC8 byte
		byte crc8 = Crc8(input, index_crc8);
 2dc:	68 2f       	mov	r22, r24
 2de:	ce 01       	movw	r24, r28
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Crc8>
		//input[index_crc8] = crc8;
		
		if (input[index_crc8] == crc8) {
 2e6:	e1 e0       	ldi	r30, 0x01	; 1
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ec 0f       	add	r30, r28
 2ec:	fd 1f       	adc	r31, r29
 2ee:	e1 0f       	add	r30, r17
 2f0:	f1 1d       	adc	r31, r1
 2f2:	90 81       	ld	r25, Z
 2f4:	89 13       	cpse	r24, r25
 2f6:	61 c0       	rjmp	.+194    	; 0x3ba <main+0x130>
			
			///i-60660
			freeArray(&inputArray);	
 2f8:	ce 01       	movw	r24, r28
 2fa:	81 96       	adiw	r24, 0x21	; 33
 2fc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <freeArray>
			initArray(&inputArray, 50);
 300:	62 e3       	ldi	r22, 0x32	; 50
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	ce 01       	movw	r24, r28
 306:	81 96       	adiw	r24, 0x21	; 33
 308:	0e 94 15 02 	call	0x42a	; 0x42a <initArray>
			
			insertArray(&inputArray, CHR_COLON);
 30c:	6a e3       	ldi	r22, 0x3A	; 58
 30e:	ce 01       	movw	r24, r28
 310:	81 96       	adiw	r24, 0x21	; 33
 312:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 316:	67 e3       	ldi	r22, 0x37	; 55
 318:	ce 01       	movw	r24, r28
 31a:	81 96       	adiw	r24, 0x21	; 33
 31c:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 320:	67 e3       	ldi	r22, 0x37	; 55
 322:	ce 01       	movw	r24, r28
 324:	81 96       	adiw	r24, 0x21	; 33
 326:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 32a:	67 e3       	ldi	r22, 0x37	; 55
 32c:	ce 01       	movw	r24, r28
 32e:	81 96       	adiw	r24, 0x21	; 33
 330:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 334:	67 e3       	ldi	r22, 0x37	; 55
 336:	ce 01       	movw	r24, r28
 338:	81 96       	adiw	r24, 0x21	; 33
 33a:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 33e:	67 e3       	ldi	r22, 0x37	; 55
 340:	ce 01       	movw	r24, r28
 342:	81 96       	adiw	r24, 0x21	; 33
 344:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 348:	67 e3       	ldi	r22, 0x37	; 55
 34a:	ce 01       	movw	r24, r28
 34c:	81 96       	adiw	r24, 0x21	; 33
 34e:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 352:	67 e3       	ldi	r22, 0x37	; 55
 354:	ce 01       	movw	r24, r28
 356:	81 96       	adiw	r24, 0x21	; 33
 358:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 35c:	67 e3       	ldi	r22, 0x37	; 55
 35e:	ce 01       	movw	r24, r28
 360:	81 96       	adiw	r24, 0x21	; 33
 362:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 366:	67 e3       	ldi	r22, 0x37	; 55
 368:	ce 01       	movw	r24, r28
 36a:	81 96       	adiw	r24, 0x21	; 33
 36c:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 370:	67 e3       	ldi	r22, 0x37	; 55
 372:	ce 01       	movw	r24, r28
 374:	81 96       	adiw	r24, 0x21	; 33
 376:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 37a:	67 e3       	ldi	r22, 0x37	; 55
 37c:	ce 01       	movw	r24, r28
 37e:	81 96       	adiw	r24, 0x21	; 33
 380:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, 55);
 384:	67 e3       	ldi	r22, 0x37	; 55
 386:	ce 01       	movw	r24, r28
 388:	81 96       	adiw	r24, 0x21	; 33
 38a:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, CHR_COLON);
 38e:	6a e3       	ldi	r22, 0x3A	; 58
 390:	ce 01       	movw	r24, r28
 392:	81 96       	adiw	r24, 0x21	; 33
 394:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, CHR_CARRET_RETURN);
 398:	6d e0       	ldi	r22, 0x0D	; 13
 39a:	ce 01       	movw	r24, r28
 39c:	81 96       	adiw	r24, 0x21	; 33
 39e:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			insertArray(&inputArray, CHR_LINE_FEED);
 3a2:	6a e0       	ldi	r22, 0x0A	; 10
 3a4:	ce 01       	movw	r24, r28
 3a6:	81 96       	adiw	r24, 0x21	; 33
 3a8:	0e 94 29 02 	call	0x452	; 0x452 <insertArray>
			
			// Send response ( ECHO )
			//USART_Transmit_Str(input, &inputArray);
			USART_Transmit_Str(&inputArray);
 3ac:	ce 01       	movw	r24, r28
 3ae:	81 96       	adiw	r24, 0x21	; 33
 3b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_Str>
			
			// Info Blink
			blink();
 3b4:	0e 94 0e 01 	call	0x21c	; 0x21c <blink>
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <main+0x138>
			answer[8] = CHR_CARRET_RETURN;
			answer[9] = CHR_LINE_FEED;
			
			// Send response
			//USART_Transmit_Str(answer, &inputArray);
			USART_Transmit_Str(&inputArray);
 3ba:	ce 01       	movw	r24, r28
 3bc:	81 96       	adiw	r24, 0x21	; 33
 3be:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_LINE_FEED, &inputArray);
			*/
		}
		
		// Clear array
		Clean_Data(input);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 17 01 	call	0x22e	; 0x22e <Clean_Data>
		
		// Free Array
		freeArray(&inputArray);	
 3ca:	ce 01       	movw	r24, r28
 3cc:	81 96       	adiw	r24, 0x21	; 33
 3ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <freeArray>
		
		// Info Blink
		//blink();
	}
 3d2:	70 cf       	rjmp	.-288    	; 0x2b4 <main+0x2a>

000003d4 <Crc8>:
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 3d4:	66 23       	and	r22, r22
 3d6:	81 f0       	breq	.+32     	; 0x3f8 <Crc8+0x24>
 3d8:	dc 01       	movw	r26, r24
 3da:	9c 01       	movw	r18, r24
 3dc:	26 0f       	add	r18, r22
 3de:	31 1d       	adc	r19, r1
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
 3e2:	ed 91       	ld	r30, X+
 3e4:	8e 27       	eor	r24, r30
 3e6:	e8 2f       	mov	r30, r24
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	ea 5f       	subi	r30, 0xFA	; 250
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
 3ee:	80 81       	ld	r24, Z
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 3f0:	a2 17       	cp	r26, r18
 3f2:	b3 07       	cpc	r27, r19
 3f4:	b1 f7       	brne	.-20     	; 0x3e2 <Crc8+0xe>
 3f6:	08 95       	ret
	0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
	}

	return crc;
}
 3fa:	08 95       	ret

000003fc <GetCRC8Index>:

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 3fc:	66 23       	and	r22, r22
 3fe:	99 f0       	breq	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	e8 2f       	mov	r30, r24
 402:	f9 2f       	mov	r31, r25
 404:	90 e0       	ldi	r25, 0x00	; 0
		// Need many checkeds
		if (input_data[i] == CHR_COLON && i > 0) {
 406:	21 91       	ld	r18, Z+
 408:	2a 33       	cpi	r18, 0x3A	; 58
 40a:	41 f4       	brne	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40c:	99 23       	and	r25, r25
 40e:	31 f0       	breq	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
 410:	80 81       	ld	r24, Z
 412:	8d 30       	cpi	r24, 0x0D	; 13
 414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				return i - 1;
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	89 0f       	add	r24, r25
 41a:	08 95       	ret
			}
		}
		
		x++;
 41c:	9f 5f       	subi	r25, 0xFF	; 255

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 41e:	69 13       	cpse	r22, r25
 420:	f2 cf       	rjmp	.-28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
				return i - 1;
			}
		}
		
		x++;
 422:	86 2f       	mov	r24, r22
 424:	08 95       	ret
}

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
 426:	80 e0       	ldi	r24, 0x00	; 0
		
		x++;
	}
	
	return x;
 428:	08 95       	ret

0000042a <initArray>:
	byte* array;
	int used;
	int size;
} Array;

void initArray(Array* a, size_t initialSize) {
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	8b 01       	movw	r16, r22
	a->array = (byte*)malloc(initialSize * sizeof(byte));
 436:	cb 01       	movw	r24, r22
 438:	0e 94 62 02 	call	0x4c4	; 0x4c4 <malloc>
 43c:	99 83       	std	Y+1, r25	; 0x01
 43e:	88 83       	st	Y, r24
	a->used = 0;
 440:	1b 82       	std	Y+3, r1	; 0x03
 442:	1a 82       	std	Y+2, r1	; 0x02
	a->size = initialSize;
 444:	1d 83       	std	Y+5, r17	; 0x05
 446:	0c 83       	std	Y+4, r16	; 0x04
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <insertArray>:

void insertArray(Array* a, byte element_byte) {
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
 45a:	16 2f       	mov	r17, r22
	if (a->used == a->size) {
 45c:	6a 81       	ldd	r22, Y+2	; 0x02
 45e:	7b 81       	ldd	r23, Y+3	; 0x03
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	68 17       	cp	r22, r24
 466:	79 07       	cpc	r23, r25
 468:	61 f4       	brne	.+24     	; 0x482 <insertArray+0x30>
		a->size += 1;
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	7d 83       	std	Y+5, r23	; 0x05
 470:	6c 83       	std	Y+4, r22	; 0x04
		byte* newarr = (byte*)realloc(a->array, a->size * sizeof(byte));
 472:	88 81       	ld	r24, Y
 474:	99 81       	ldd	r25, Y+1	; 0x01
 476:	0e 94 83 03 	call	0x706	; 0x706 <realloc>
		if (newarr == NULL) return; // Block don't selected - return
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	79 f0       	breq	.+30     	; 0x49c <insertArray+0x4a>
		a->array = newarr;
 47e:	99 83       	std	Y+1, r25	; 0x01
 480:	88 83       	st	Y, r24
	}

	a->array[a->used++] = element_byte;
 482:	28 81       	ld	r18, Y
 484:	39 81       	ldd	r19, Y+1	; 0x01
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	9b 81       	ldd	r25, Y+3	; 0x03
 48a:	ac 01       	movw	r20, r24
 48c:	4f 5f       	subi	r20, 0xFF	; 255
 48e:	5f 4f       	sbci	r21, 0xFF	; 255
 490:	5b 83       	std	Y+3, r21	; 0x03
 492:	4a 83       	std	Y+2, r20	; 0x02
 494:	f9 01       	movw	r30, r18
 496:	e8 0f       	add	r30, r24
 498:	f9 1f       	adc	r31, r25
 49a:	10 83       	st	Z, r17
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	08 95       	ret

000004a4 <freeArray>:

void freeArray(Array* a) {
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
	free(a->array);
 4aa:	88 81       	ld	r24, Y
 4ac:	99 81       	ldd	r25, Y+1	; 0x01
 4ae:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <free>
	a->array = NULL;
 4b2:	19 82       	std	Y+1, r1	; 0x01
 4b4:	18 82       	st	Y, r1
	a->used = a->size = 0;
 4b6:	1d 82       	std	Y+5, r1	; 0x05
 4b8:	1c 82       	std	Y+4, r1	; 0x04
 4ba:	1b 82       	std	Y+3, r1	; 0x03
 4bc:	1a 82       	std	Y+2, r1	; 0x02
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <malloc>:
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	91 05       	cpc	r25, r1
 4d0:	10 f4       	brcc	.+4      	; 0x4d6 <malloc+0x12>
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 4da:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	a0 e0       	ldi	r26, 0x00	; 0
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	30 97       	sbiw	r30, 0x00	; 0
 4e8:	19 f1       	breq	.+70     	; 0x530 <malloc+0x6c>
 4ea:	40 81       	ld	r20, Z
 4ec:	51 81       	ldd	r21, Z+1	; 0x01
 4ee:	02 81       	ldd	r16, Z+2	; 0x02
 4f0:	13 81       	ldd	r17, Z+3	; 0x03
 4f2:	48 17       	cp	r20, r24
 4f4:	59 07       	cpc	r21, r25
 4f6:	c8 f0       	brcs	.+50     	; 0x52a <malloc+0x66>
 4f8:	84 17       	cp	r24, r20
 4fa:	95 07       	cpc	r25, r21
 4fc:	69 f4       	brne	.+26     	; 0x518 <malloc+0x54>
 4fe:	10 97       	sbiw	r26, 0x00	; 0
 500:	31 f0       	breq	.+12     	; 0x50e <malloc+0x4a>
 502:	12 96       	adiw	r26, 0x02	; 2
 504:	0c 93       	st	X, r16
 506:	12 97       	sbiw	r26, 0x02	; 2
 508:	13 96       	adiw	r26, 0x03	; 3
 50a:	1c 93       	st	X, r17
 50c:	27 c0       	rjmp	.+78     	; 0x55c <malloc+0x98>
 50e:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 512:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 516:	22 c0       	rjmp	.+68     	; 0x55c <malloc+0x98>
 518:	21 15       	cp	r18, r1
 51a:	31 05       	cpc	r19, r1
 51c:	19 f0       	breq	.+6      	; 0x524 <malloc+0x60>
 51e:	42 17       	cp	r20, r18
 520:	53 07       	cpc	r21, r19
 522:	18 f4       	brcc	.+6      	; 0x52a <malloc+0x66>
 524:	9a 01       	movw	r18, r20
 526:	bd 01       	movw	r22, r26
 528:	ef 01       	movw	r28, r30
 52a:	df 01       	movw	r26, r30
 52c:	f8 01       	movw	r30, r16
 52e:	db cf       	rjmp	.-74     	; 0x4e6 <malloc+0x22>
 530:	21 15       	cp	r18, r1
 532:	31 05       	cpc	r19, r1
 534:	f9 f0       	breq	.+62     	; 0x574 <malloc+0xb0>
 536:	28 1b       	sub	r18, r24
 538:	39 0b       	sbc	r19, r25
 53a:	24 30       	cpi	r18, 0x04	; 4
 53c:	31 05       	cpc	r19, r1
 53e:	80 f4       	brcc	.+32     	; 0x560 <malloc+0x9c>
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	9b 81       	ldd	r25, Y+3	; 0x03
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	21 f0       	breq	.+8      	; 0x552 <malloc+0x8e>
 54a:	fb 01       	movw	r30, r22
 54c:	93 83       	std	Z+3, r25	; 0x03
 54e:	82 83       	std	Z+2, r24	; 0x02
 550:	04 c0       	rjmp	.+8      	; 0x55a <malloc+0x96>
 552:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 556:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 55a:	fe 01       	movw	r30, r28
 55c:	32 96       	adiw	r30, 0x02	; 2
 55e:	44 c0       	rjmp	.+136    	; 0x5e8 <malloc+0x124>
 560:	fe 01       	movw	r30, r28
 562:	e2 0f       	add	r30, r18
 564:	f3 1f       	adc	r31, r19
 566:	81 93       	st	Z+, r24
 568:	91 93       	st	Z+, r25
 56a:	22 50       	subi	r18, 0x02	; 2
 56c:	31 09       	sbc	r19, r1
 56e:	39 83       	std	Y+1, r19	; 0x01
 570:	28 83       	st	Y, r18
 572:	3a c0       	rjmp	.+116    	; 0x5e8 <malloc+0x124>
 574:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 578:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 57c:	23 2b       	or	r18, r19
 57e:	41 f4       	brne	.+16     	; 0x590 <malloc+0xcc>
 580:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 584:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 588:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 58c:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 590:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 594:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 598:	21 15       	cp	r18, r1
 59a:	31 05       	cpc	r19, r1
 59c:	41 f4       	brne	.+16     	; 0x5ae <malloc+0xea>
 59e:	2d b7       	in	r18, 0x3d	; 61
 5a0:	3e b7       	in	r19, 0x3e	; 62
 5a2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5a6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5aa:	24 1b       	sub	r18, r20
 5ac:	35 0b       	sbc	r19, r21
 5ae:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 5b2:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 5b6:	e2 17       	cp	r30, r18
 5b8:	f3 07       	cpc	r31, r19
 5ba:	a0 f4       	brcc	.+40     	; 0x5e4 <malloc+0x120>
 5bc:	2e 1b       	sub	r18, r30
 5be:	3f 0b       	sbc	r19, r31
 5c0:	28 17       	cp	r18, r24
 5c2:	39 07       	cpc	r19, r25
 5c4:	78 f0       	brcs	.+30     	; 0x5e4 <malloc+0x120>
 5c6:	ac 01       	movw	r20, r24
 5c8:	4e 5f       	subi	r20, 0xFE	; 254
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	24 17       	cp	r18, r20
 5ce:	35 07       	cpc	r19, r21
 5d0:	48 f0       	brcs	.+18     	; 0x5e4 <malloc+0x120>
 5d2:	4e 0f       	add	r20, r30
 5d4:	5f 1f       	adc	r21, r31
 5d6:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 5da:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 5de:	81 93       	st	Z+, r24
 5e0:	91 93       	st	Z+, r25
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <malloc+0x124>
 5e4:	e0 e0       	ldi	r30, 0x00	; 0
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	cf 01       	movw	r24, r30
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	08 95       	ret

000005f4 <free>:
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	09 f4       	brne	.+2      	; 0x5fe <free+0xa>
 5fc:	81 c0       	rjmp	.+258    	; 0x700 <free+0x10c>
 5fe:	fc 01       	movw	r30, r24
 600:	32 97       	sbiw	r30, 0x02	; 2
 602:	13 82       	std	Z+3, r1	; 0x03
 604:	12 82       	std	Z+2, r1	; 0x02
 606:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 60a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 60e:	10 97       	sbiw	r26, 0x00	; 0
 610:	81 f4       	brne	.+32     	; 0x632 <free+0x3e>
 612:	20 81       	ld	r18, Z
 614:	31 81       	ldd	r19, Z+1	; 0x01
 616:	82 0f       	add	r24, r18
 618:	93 1f       	adc	r25, r19
 61a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 61e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 622:	28 17       	cp	r18, r24
 624:	39 07       	cpc	r19, r25
 626:	51 f5       	brne	.+84     	; 0x67c <free+0x88>
 628:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 62c:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 630:	67 c0       	rjmp	.+206    	; 0x700 <free+0x10c>
 632:	ed 01       	movw	r28, r26
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	ce 17       	cp	r28, r30
 63a:	df 07       	cpc	r29, r31
 63c:	40 f4       	brcc	.+16     	; 0x64e <free+0x5a>
 63e:	4a 81       	ldd	r20, Y+2	; 0x02
 640:	5b 81       	ldd	r21, Y+3	; 0x03
 642:	9e 01       	movw	r18, r28
 644:	41 15       	cp	r20, r1
 646:	51 05       	cpc	r21, r1
 648:	f1 f0       	breq	.+60     	; 0x686 <free+0x92>
 64a:	ea 01       	movw	r28, r20
 64c:	f5 cf       	rjmp	.-22     	; 0x638 <free+0x44>
 64e:	d3 83       	std	Z+3, r29	; 0x03
 650:	c2 83       	std	Z+2, r28	; 0x02
 652:	40 81       	ld	r20, Z
 654:	51 81       	ldd	r21, Z+1	; 0x01
 656:	84 0f       	add	r24, r20
 658:	95 1f       	adc	r25, r21
 65a:	c8 17       	cp	r28, r24
 65c:	d9 07       	cpc	r29, r25
 65e:	59 f4       	brne	.+22     	; 0x676 <free+0x82>
 660:	88 81       	ld	r24, Y
 662:	99 81       	ldd	r25, Y+1	; 0x01
 664:	84 0f       	add	r24, r20
 666:	95 1f       	adc	r25, r21
 668:	02 96       	adiw	r24, 0x02	; 2
 66a:	91 83       	std	Z+1, r25	; 0x01
 66c:	80 83       	st	Z, r24
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	9b 81       	ldd	r25, Y+3	; 0x03
 672:	93 83       	std	Z+3, r25	; 0x03
 674:	82 83       	std	Z+2, r24	; 0x02
 676:	21 15       	cp	r18, r1
 678:	31 05       	cpc	r19, r1
 67a:	29 f4       	brne	.+10     	; 0x686 <free+0x92>
 67c:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 680:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 684:	3d c0       	rjmp	.+122    	; 0x700 <free+0x10c>
 686:	e9 01       	movw	r28, r18
 688:	fb 83       	std	Y+3, r31	; 0x03
 68a:	ea 83       	std	Y+2, r30	; 0x02
 68c:	49 91       	ld	r20, Y+
 68e:	59 91       	ld	r21, Y+
 690:	c4 0f       	add	r28, r20
 692:	d5 1f       	adc	r29, r21
 694:	ec 17       	cp	r30, r28
 696:	fd 07       	cpc	r31, r29
 698:	61 f4       	brne	.+24     	; 0x6b2 <free+0xbe>
 69a:	80 81       	ld	r24, Z
 69c:	91 81       	ldd	r25, Z+1	; 0x01
 69e:	84 0f       	add	r24, r20
 6a0:	95 1f       	adc	r25, r21
 6a2:	02 96       	adiw	r24, 0x02	; 2
 6a4:	e9 01       	movw	r28, r18
 6a6:	99 83       	std	Y+1, r25	; 0x01
 6a8:	88 83       	st	Y, r24
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	9b 83       	std	Y+3, r25	; 0x03
 6b0:	8a 83       	std	Y+2, r24	; 0x02
 6b2:	e0 e0       	ldi	r30, 0x00	; 0
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	12 96       	adiw	r26, 0x02	; 2
 6b8:	8d 91       	ld	r24, X+
 6ba:	9c 91       	ld	r25, X
 6bc:	13 97       	sbiw	r26, 0x03	; 3
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <free+0xd4>
 6c2:	fd 01       	movw	r30, r26
 6c4:	dc 01       	movw	r26, r24
 6c6:	f7 cf       	rjmp	.-18     	; 0x6b6 <free+0xc2>
 6c8:	8d 91       	ld	r24, X+
 6ca:	9c 91       	ld	r25, X
 6cc:	11 97       	sbiw	r26, 0x01	; 1
 6ce:	9d 01       	movw	r18, r26
 6d0:	2e 5f       	subi	r18, 0xFE	; 254
 6d2:	3f 4f       	sbci	r19, 0xFF	; 255
 6d4:	82 0f       	add	r24, r18
 6d6:	93 1f       	adc	r25, r19
 6d8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 6dc:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 6e0:	28 17       	cp	r18, r24
 6e2:	39 07       	cpc	r19, r25
 6e4:	69 f4       	brne	.+26     	; 0x700 <free+0x10c>
 6e6:	30 97       	sbiw	r30, 0x00	; 0
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <free+0x100>
 6ea:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 6ee:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <free+0x104>
 6f4:	13 82       	std	Z+3, r1	; 0x03
 6f6:	12 82       	std	Z+2, r1	; 0x02
 6f8:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 6fc:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <realloc>:
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	e9 e8       	ldi	r30, 0x89	; 137
 70c:	f3 e0       	ldi	r31, 0x03	; 3
 70e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__prologue_saves__+0x8>
 712:	ec 01       	movw	r28, r24
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	21 f4       	brne	.+8      	; 0x720 <realloc+0x1a>
 718:	cb 01       	movw	r24, r22
 71a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <malloc>
 71e:	b4 c0       	rjmp	.+360    	; 0x888 <realloc+0x182>
 720:	fc 01       	movw	r30, r24
 722:	e6 0f       	add	r30, r22
 724:	f7 1f       	adc	r31, r23
 726:	9c 01       	movw	r18, r24
 728:	22 50       	subi	r18, 0x02	; 2
 72a:	31 09       	sbc	r19, r1
 72c:	e2 17       	cp	r30, r18
 72e:	f3 07       	cpc	r31, r19
 730:	08 f4       	brcc	.+2      	; 0x734 <realloc+0x2e>
 732:	a8 c0       	rjmp	.+336    	; 0x884 <realloc+0x17e>
 734:	d9 01       	movw	r26, r18
 736:	0d 91       	ld	r16, X+
 738:	1c 91       	ld	r17, X
 73a:	11 97       	sbiw	r26, 0x01	; 1
 73c:	06 17       	cp	r16, r22
 73e:	17 07       	cpc	r17, r23
 740:	b0 f0       	brcs	.+44     	; 0x76e <realloc+0x68>
 742:	05 30       	cpi	r16, 0x05	; 5
 744:	11 05       	cpc	r17, r1
 746:	08 f4       	brcc	.+2      	; 0x74a <realloc+0x44>
 748:	9b c0       	rjmp	.+310    	; 0x880 <realloc+0x17a>
 74a:	c8 01       	movw	r24, r16
 74c:	04 97       	sbiw	r24, 0x04	; 4
 74e:	86 17       	cp	r24, r22
 750:	97 07       	cpc	r25, r23
 752:	08 f4       	brcc	.+2      	; 0x756 <realloc+0x50>
 754:	95 c0       	rjmp	.+298    	; 0x880 <realloc+0x17a>
 756:	02 50       	subi	r16, 0x02	; 2
 758:	11 09       	sbc	r17, r1
 75a:	06 1b       	sub	r16, r22
 75c:	17 0b       	sbc	r17, r23
 75e:	01 93       	st	Z+, r16
 760:	11 93       	st	Z+, r17
 762:	6d 93       	st	X+, r22
 764:	7c 93       	st	X, r23
 766:	cf 01       	movw	r24, r30
 768:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <free>
 76c:	89 c0       	rjmp	.+274    	; 0x880 <realloc+0x17a>
 76e:	5b 01       	movw	r10, r22
 770:	a0 1a       	sub	r10, r16
 772:	b1 0a       	sbc	r11, r17
 774:	4c 01       	movw	r8, r24
 776:	80 0e       	add	r8, r16
 778:	91 1e       	adc	r9, r17
 77a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 77e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 782:	61 2c       	mov	r6, r1
 784:	71 2c       	mov	r7, r1
 786:	e1 2c       	mov	r14, r1
 788:	f1 2c       	mov	r15, r1
 78a:	10 97       	sbiw	r26, 0x00	; 0
 78c:	09 f4       	brne	.+2      	; 0x790 <realloc+0x8a>
 78e:	46 c0       	rjmp	.+140    	; 0x81c <realloc+0x116>
 790:	8d 91       	ld	r24, X+
 792:	9c 91       	ld	r25, X
 794:	11 97       	sbiw	r26, 0x01	; 1
 796:	a8 15       	cp	r26, r8
 798:	b9 05       	cpc	r27, r9
 79a:	b1 f5       	brne	.+108    	; 0x808 <realloc+0x102>
 79c:	6c 01       	movw	r12, r24
 79e:	42 e0       	ldi	r20, 0x02	; 2
 7a0:	c4 0e       	add	r12, r20
 7a2:	d1 1c       	adc	r13, r1
 7a4:	ca 14       	cp	r12, r10
 7a6:	db 04       	cpc	r13, r11
 7a8:	78 f1       	brcs	.+94     	; 0x808 <realloc+0x102>
 7aa:	4c 01       	movw	r8, r24
 7ac:	8a 18       	sub	r8, r10
 7ae:	9b 08       	sbc	r9, r11
 7b0:	64 01       	movw	r12, r8
 7b2:	42 e0       	ldi	r20, 0x02	; 2
 7b4:	c4 0e       	add	r12, r20
 7b6:	d1 1c       	adc	r13, r1
 7b8:	12 96       	adiw	r26, 0x02	; 2
 7ba:	bc 90       	ld	r11, X
 7bc:	12 97       	sbiw	r26, 0x02	; 2
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	ac 91       	ld	r26, X
 7c2:	b5 e0       	ldi	r27, 0x05	; 5
 7c4:	cb 16       	cp	r12, r27
 7c6:	d1 04       	cpc	r13, r1
 7c8:	40 f0       	brcs	.+16     	; 0x7da <realloc+0xd4>
 7ca:	b2 82       	std	Z+2, r11	; 0x02
 7cc:	a3 83       	std	Z+3, r26	; 0x03
 7ce:	91 82       	std	Z+1, r9	; 0x01
 7d0:	80 82       	st	Z, r8
 7d2:	d9 01       	movw	r26, r18
 7d4:	6d 93       	st	X+, r22
 7d6:	7c 93       	st	X, r23
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <realloc+0xe6>
 7da:	0e 5f       	subi	r16, 0xFE	; 254
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	80 0f       	add	r24, r16
 7e0:	91 1f       	adc	r25, r17
 7e2:	f9 01       	movw	r30, r18
 7e4:	91 83       	std	Z+1, r25	; 0x01
 7e6:	80 83       	st	Z, r24
 7e8:	eb 2d       	mov	r30, r11
 7ea:	fa 2f       	mov	r31, r26
 7ec:	e1 14       	cp	r14, r1
 7ee:	f1 04       	cpc	r15, r1
 7f0:	31 f0       	breq	.+12     	; 0x7fe <realloc+0xf8>
 7f2:	d7 01       	movw	r26, r14
 7f4:	13 96       	adiw	r26, 0x03	; 3
 7f6:	fc 93       	st	X, r31
 7f8:	ee 93       	st	-X, r30
 7fa:	12 97       	sbiw	r26, 0x02	; 2
 7fc:	41 c0       	rjmp	.+130    	; 0x880 <realloc+0x17a>
 7fe:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 802:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 806:	3c c0       	rjmp	.+120    	; 0x880 <realloc+0x17a>
 808:	68 16       	cp	r6, r24
 80a:	79 06       	cpc	r7, r25
 80c:	08 f4       	brcc	.+2      	; 0x810 <realloc+0x10a>
 80e:	3c 01       	movw	r6, r24
 810:	7d 01       	movw	r14, r26
 812:	12 96       	adiw	r26, 0x02	; 2
 814:	0d 90       	ld	r0, X+
 816:	bc 91       	ld	r27, X
 818:	a0 2d       	mov	r26, r0
 81a:	b7 cf       	rjmp	.-146    	; 0x78a <realloc+0x84>
 81c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 820:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 824:	88 16       	cp	r8, r24
 826:	99 06       	cpc	r9, r25
 828:	e1 f4       	brne	.+56     	; 0x862 <realloc+0x15c>
 82a:	66 16       	cp	r6, r22
 82c:	77 06       	cpc	r7, r23
 82e:	c8 f4       	brcc	.+50     	; 0x862 <realloc+0x15c>
 830:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 834:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	41 f4       	brne	.+16     	; 0x84c <realloc+0x146>
 83c:	8d b7       	in	r24, 0x3d	; 61
 83e:	9e b7       	in	r25, 0x3e	; 62
 840:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 844:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 848:	84 1b       	sub	r24, r20
 84a:	95 0b       	sbc	r25, r21
 84c:	e8 17       	cp	r30, r24
 84e:	f9 07       	cpc	r31, r25
 850:	c8 f4       	brcc	.+50     	; 0x884 <realloc+0x17e>
 852:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 856:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 85a:	f9 01       	movw	r30, r18
 85c:	71 83       	std	Z+1, r23	; 0x01
 85e:	60 83       	st	Z, r22
 860:	0f c0       	rjmp	.+30     	; 0x880 <realloc+0x17a>
 862:	cb 01       	movw	r24, r22
 864:	0e 94 62 02 	call	0x4c4	; 0x4c4 <malloc>
 868:	7c 01       	movw	r14, r24
 86a:	00 97       	sbiw	r24, 0x00	; 0
 86c:	59 f0       	breq	.+22     	; 0x884 <realloc+0x17e>
 86e:	a8 01       	movw	r20, r16
 870:	be 01       	movw	r22, r28
 872:	0e 94 49 04 	call	0x892	; 0x892 <memcpy>
 876:	ce 01       	movw	r24, r28
 878:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <free>
 87c:	c7 01       	movw	r24, r14
 87e:	04 c0       	rjmp	.+8      	; 0x888 <realloc+0x182>
 880:	ce 01       	movw	r24, r28
 882:	02 c0       	rjmp	.+4      	; 0x888 <realloc+0x182>
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
 88c:	ee e0       	ldi	r30, 0x0E	; 14
 88e:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__epilogue_restores__+0x8>

00000892 <memcpy>:
 892:	fb 01       	movw	r30, r22
 894:	dc 01       	movw	r26, r24
 896:	02 c0       	rjmp	.+4      	; 0x89c <memcpy+0xa>
 898:	01 90       	ld	r0, Z+
 89a:	0d 92       	st	X+, r0
 89c:	41 50       	subi	r20, 0x01	; 1
 89e:	50 40       	sbci	r21, 0x00	; 0
 8a0:	d8 f7       	brcc	.-10     	; 0x898 <memcpy+0x6>
 8a2:	08 95       	ret

000008a4 <__prologue_saves__>:
 8a4:	2f 92       	push	r2
 8a6:	3f 92       	push	r3
 8a8:	4f 92       	push	r4
 8aa:	5f 92       	push	r5
 8ac:	6f 92       	push	r6
 8ae:	7f 92       	push	r7
 8b0:	8f 92       	push	r8
 8b2:	9f 92       	push	r9
 8b4:	af 92       	push	r10
 8b6:	bf 92       	push	r11
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
 8cc:	ca 1b       	sub	r28, r26
 8ce:	db 0b       	sbc	r29, r27
 8d0:	0f b6       	in	r0, 0x3f	; 63
 8d2:	f8 94       	cli
 8d4:	de bf       	out	0x3e, r29	; 62
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	cd bf       	out	0x3d, r28	; 61
 8da:	09 94       	ijmp

000008dc <__epilogue_restores__>:
 8dc:	2a 88       	ldd	r2, Y+18	; 0x12
 8de:	39 88       	ldd	r3, Y+17	; 0x11
 8e0:	48 88       	ldd	r4, Y+16	; 0x10
 8e2:	5f 84       	ldd	r5, Y+15	; 0x0f
 8e4:	6e 84       	ldd	r6, Y+14	; 0x0e
 8e6:	7d 84       	ldd	r7, Y+13	; 0x0d
 8e8:	8c 84       	ldd	r8, Y+12	; 0x0c
 8ea:	9b 84       	ldd	r9, Y+11	; 0x0b
 8ec:	aa 84       	ldd	r10, Y+10	; 0x0a
 8ee:	b9 84       	ldd	r11, Y+9	; 0x09
 8f0:	c8 84       	ldd	r12, Y+8	; 0x08
 8f2:	df 80       	ldd	r13, Y+7	; 0x07
 8f4:	ee 80       	ldd	r14, Y+6	; 0x06
 8f6:	fd 80       	ldd	r15, Y+5	; 0x05
 8f8:	0c 81       	ldd	r16, Y+4	; 0x04
 8fa:	1b 81       	ldd	r17, Y+3	; 0x03
 8fc:	aa 81       	ldd	r26, Y+2	; 0x02
 8fe:	b9 81       	ldd	r27, Y+1	; 0x01
 900:	ce 0f       	add	r28, r30
 902:	d1 1d       	adc	r29, r1
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	ed 01       	movw	r28, r26
 910:	08 95       	ret

00000912 <_exit>:
 912:	f8 94       	cli

00000914 <__stop_program>:
 914:	ff cf       	rjmp	.-2      	; 0x914 <__stop_program>
