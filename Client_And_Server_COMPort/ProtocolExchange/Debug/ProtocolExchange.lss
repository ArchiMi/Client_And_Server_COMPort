
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000938  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  00000ad8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcb  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000925  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ad  00000000  00000000  0000347a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  9e:	0c 94 9a 04 	jmp	0x934	; 0x934 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initArray>:
	byte* array;
	int used;
	int size;
} Array;

void initArray(Array* a, size_t initialSize) {
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	8b 01       	movw	r16, r22
	a->array = (byte*)malloc(initialSize * sizeof(byte));
  b2:	cb 01       	movw	r24, r22
  b4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <malloc>
  b8:	99 83       	std	Y+1, r25	; 0x01
  ba:	88 83       	st	Y, r24
	a->used = 0;
  bc:	1b 82       	std	Y+3, r1	; 0x03
  be:	1a 82       	std	Y+2, r1	; 0x02
	a->size = initialSize;
  c0:	1d 83       	std	Y+5, r17	; 0x05
  c2:	0c 83       	std	Y+4, r16	; 0x04
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	08 95       	ret

000000ce <insertArray>:

void insertArray(Array* a, byte element_byte) {
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	16 2f       	mov	r17, r22
	if (a->used == a->size) {
  d8:	6a 81       	ldd	r22, Y+2	; 0x02
  da:	7b 81       	ldd	r23, Y+3	; 0x03
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	9d 81       	ldd	r25, Y+5	; 0x05
  e0:	68 17       	cp	r22, r24
  e2:	79 07       	cpc	r23, r25
  e4:	61 f4       	brne	.+24     	; 0xfe <insertArray+0x30>
		a->size += 1;
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	7d 83       	std	Y+5, r23	; 0x05
  ec:	6c 83       	std	Y+4, r22	; 0x04
		byte* newarr = (byte*)realloc(a->array, a->size * sizeof(byte));
  ee:	88 81       	ld	r24, Y
  f0:	99 81       	ldd	r25, Y+1	; 0x01
  f2:	0e 94 94 03 	call	0x728	; 0x728 <realloc>
		if (newarr == NULL) return; // Выделить блок не удалось - выходим без изменения
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	79 f0       	breq	.+30     	; 0x118 <insertArray+0x4a>
		a->array = newarr;
  fa:	99 83       	std	Y+1, r25	; 0x01
  fc:	88 83       	st	Y, r24
	}

	a->array[a->used++] = element_byte;
  fe:	28 81       	ld	r18, Y
 100:	39 81       	ldd	r19, Y+1	; 0x01
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	9b 81       	ldd	r25, Y+3	; 0x03
 106:	ac 01       	movw	r20, r24
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	5b 83       	std	Y+3, r21	; 0x03
 10e:	4a 83       	std	Y+2, r20	; 0x02
 110:	f9 01       	movw	r30, r18
 112:	e8 0f       	add	r30, r24
 114:	f9 1f       	adc	r31, r25
 116:	10 83       	st	Z, r17
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	08 95       	ret

00000120 <freeArray>:

void freeArray(Array* a) {
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
	free(a->array);
 126:	88 81       	ld	r24, Y
 128:	99 81       	ldd	r25, Y+1	; 0x01
 12a:	0e 94 0b 03 	call	0x616	; 0x616 <free>
	a->array = NULL;
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	18 82       	st	Y, r1
	a->used = a->size = 0;
 132:	1d 82       	std	Y+5, r1	; 0x05
 134:	1c 82       	std	Y+4, r1	; 0x04
 136:	1b 82       	std	Y+3, r1	; 0x03
 138:	1a 82       	std	Y+2, r1	; 0x02
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <USART_Init>:



void USART_Init() {
	sei();
 140:	78 94       	sei
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	a8 95       	wdr
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 156:	0f be       	out	0x3f, r0	; 63
	
	//BEGIN Test	
	wdt_disable();
	
	bool WD_RST = MCUSR & 0x08;
 158:	84 b7       	in	r24, 0x34	; 52
	bool BO_RST = MCUSR & 0x04;
 15a:	84 b7       	in	r24, 0x34	; 52
	bool EXT_RST = MCUSR & 0x02;
 15c:	84 b7       	in	r24, 0x34	; 52
	bool PON_RST = MCUSR & 0x01;
 15e:	84 b7       	in	r24, 0x34	; 52
	MCUSR = MCUSR & 0xF0;
 160:	84 b7       	in	r24, 0x34	; 52
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	84 bf       	out	0x34, r24	; 52
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	99 e2       	ldi	r25, 0x29	; 41
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	a8 95       	wdr
 170:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 174:	0f be       	out	0x3f, r0	; 63
 176:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	//END Test
		
	wdt_enable(WDTO_8S);
	
	WDTCSR = 1<<WDIE;
 17a:	90 e4       	ldi	r25, 0x40	; 64
 17c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	
	//UCSR0A |= (1<<U2X0); //Удвоение частоты
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //Разрешаем прием и передачу по USART - T/R ENable = True
 180:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01) | (1 << UCSZ00);
 184:	8e e0       	ldi	r24, 0x0E	; 14
 186:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0L = BAUD_PRESCALE;
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = BAUD_PRESCALE >> 8;
 190:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 ef       	ldi	r24, 0xF9	; 249
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <USART_Init+0x5a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <USART_Init+0x64>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <USART_Receive>:

	_delay_ms(20);
}

byte USART_Receive(void) {	
	while( !(UCSR0A & (1<<RXC0)) );
 1a8:	e0 ec       	ldi	r30, 0xC0	; 192
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	ec f7       	brge	.-6      	; 0x1ac <USART_Receive+0x4>
	return UDR0;	
 1b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1b6:	08 95       	ret

000001b8 <USART_Receive_Str>:

void USART_Receive_Str(byte *calledstring) {
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	8c 01       	movw	r16, r24
	char ch;
	
	int i = 0;	
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
				int previous_index = i - 1;
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
					calledstring[i] = CHR_LINE_FEED;
					return;
				} else {
					calledstring[i] = ch;
 1c8:	0f 2e       	mov	r0, r31
 1ca:	fa e0       	ldi	r31, 0x0A	; 10
 1cc:	ff 2e       	mov	r15, r31
 1ce:	f0 2d       	mov	r31, r0
		if (i == FRAME_SIZE) {
			return;
		}		
	
		// Get input char	
		ch = USART_Receive();
 1d0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Receive>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
 1d4:	8a 33       	cpi	r24, 0x3A	; 58
 1d6:	c1 f0       	breq	.+48     	; 0x208 <USART_Receive_Str+0x50>
 1d8:	20 97       	sbiw	r28, 0x00	; 0
 1da:	d1 f3       	breq	.-12     	; 0x1d0 <USART_Receive_Str+0x18>
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 1dc:	8a 30       	cpi	r24, 0x0A	; 10
 1de:	a1 f4       	brne	.+40     	; 0x208 <USART_Receive_Str+0x50>
 1e0:	1c 16       	cp	r1, r28
 1e2:	1d 06       	cpc	r1, r29
 1e4:	8c f4       	brge	.+34     	; 0x208 <USART_Receive_Str+0x50>
				int previous_index = i - 1;
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
 1e6:	f8 01       	movw	r30, r16
 1e8:	ec 0f       	add	r30, r28
 1ea:	fd 1f       	adc	r31, r29
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	80 81       	ld	r24, Z
 1f0:	8d 30       	cpi	r24, 0x0D	; 13
 1f2:	29 f4       	brne	.+10     	; 0x1fe <USART_Receive_Str+0x46>
					calledstring[i] = CHR_LINE_FEED;
 1f4:	c0 0f       	add	r28, r16
 1f6:	d1 1f       	adc	r29, r17
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	88 83       	st	Y, r24
					return;
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <USART_Receive_Str+0x60>
				} else {
					calledstring[i] = ch;
 1fe:	f8 01       	movw	r30, r16
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	f0 82       	st	Z, r15
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 206:	04 c0       	rjmp	.+8      	; 0x210 <USART_Receive_Str+0x58>
					return;
				} else {
					calledstring[i] = ch;
				}
			} else {
				calledstring[i] = ch;
 208:	f8 01       	movw	r30, r16
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	80 83       	st	Z, r24
			}	
		}
		
		i++;
 210:	21 96       	adiw	r28, 0x01	; 1
	char ch;
	
	int i = 0;	
	while(1) {				
		// Обработка ошибок при приеме запроса
		if (i == FRAME_SIZE) {
 212:	c0 32       	cpi	r28, 0x20	; 32
 214:	d1 05       	cpc	r29, r1
 216:	e1 f6       	brne	.-72     	; 0x1d0 <USART_Receive_Str+0x18>
			}	
		}
		
		i++;
	}	
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	08 95       	ret

00000224 <USART_Send>:

void USART_Send(byte data) {
	while( !(UCSR0A & ( 1 << UDRE0 )) );
 224:	e0 ec       	ldi	r30, 0xC0	; 192
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	95 ff       	sbrs	r25, 5
 22c:	fd cf       	rjmp	.-6      	; 0x228 <USART_Send+0x4>
	UDR0 = data;
 22e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 232:	08 95       	ret

00000234 <USART_Transmit_Str>:
}

void USART_Transmit_Str(byte *calledstring) {
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fc 01       	movw	r30, r24
	for (int i = 0; i <= FRAME_SIZE; i++) {
		if (calledstring[i] != 0)
 23e:	80 81       	ld	r24, Z
 240:	81 11       	cpse	r24, r1
 242:	0a c0       	rjmp	.+20     	; 0x258 <USART_Transmit_Str+0x24>
 244:	11 c0       	rjmp	.+34     	; 0x268 <USART_Transmit_Str+0x34>
 246:	89 91       	ld	r24, Y+
 248:	88 23       	and	r24, r24
 24a:	71 f0       	breq	.+28     	; 0x268 <USART_Transmit_Str+0x34>
			// Send char
			USART_Send(calledstring[i]);
 24c:	0e 94 12 01 	call	0x224	; 0x224 <USART_Send>
	while( !(UCSR0A & ( 1 << UDRE0 )) );
	UDR0 = data;
}

void USART_Transmit_Str(byte *calledstring) {
	for (int i = 0; i <= FRAME_SIZE; i++) {
 250:	0c 17       	cp	r16, r28
 252:	1d 07       	cpc	r17, r29
 254:	c1 f7       	brne	.-16     	; 0x246 <USART_Transmit_Str+0x12>
 256:	08 c0       	rjmp	.+16     	; 0x268 <USART_Transmit_Str+0x34>
 258:	8f 01       	movw	r16, r30
		if (calledstring[i] != 0)
			// Send char
			USART_Send(calledstring[i]);
 25a:	0e 94 12 01 	call	0x224	; 0x224 <USART_Send>
 25e:	e8 01       	movw	r28, r16
 260:	21 96       	adiw	r28, 0x01	; 1
 262:	0f 5d       	subi	r16, 0xDF	; 223
 264:	1f 4f       	sbci	r17, 0xFF	; 255
 266:	ef cf       	rjmp	.-34     	; 0x246 <USART_Transmit_Str+0x12>
		else 
			break;		
	}
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <blink_WD>:

void blink_WD() {
	PORTB |= ( 1 << PINB4 ); //0xFF; //On
 272:	2c 9a       	sbi	0x05, 4	; 5
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <blink_WD+0x6>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <blink_WD+0xc>
 27e:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB4 ); //0x00; //OFF
 280:	2c 98       	cbi	0x05, 4	; 5
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <blink_WD+0x14>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <blink_WD+0x1a>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <blink>:
	_delay_ms(1);
}

void blink() {
	PORTB |= ( 1 << PINB5 ); //0xFF; //On
 290:	2d 9a       	sbi	0x05, 5	; 5
 292:	8f e1       	ldi	r24, 0x1F	; 31
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <blink+0x6>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <blink+0xc>
 29c:	00 00       	nop
	_delay_ms(5);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
 29e:	2d 98       	cbi	0x05, 5	; 5
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <blink+0x14>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <blink+0x1a>
 2aa:	00 00       	nop
 2ac:	08 95       	ret

000002ae <Clean_Data>:
	_delay_ms(5);
}

void Clean_Data(byte *input_data) {
 2ae:	fc 01       	movw	r30, r24
 2b0:	80 96       	adiw	r24, 0x20	; 32
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		input_data[i] = 0;
 2b2:	11 92       	st	Z+, r1
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
	_delay_ms(5);
}

void Clean_Data(byte *input_data) {
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 2b4:	e8 17       	cp	r30, r24
 2b6:	f9 07       	cpc	r31, r25
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <Clean_Data+0x4>
		input_data[i] = 0;
	}
}
 2ba:	08 95       	ret

000002bc <__vector_6>:

// Watch dog
ISR(WDT_vect) {
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	wdt_reset();
 2de:	a8 95       	wdr

	USART_Init();
 2e0:	0e 94 a0 00 	call	0x140	; 0x140 <USART_Init>
	
	blink_WD();
 2e4:	0e 94 39 01 	call	0x272	; 0x272 <blink_WD>
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <Testfunc>:

void Testfunc() {
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <Testfunc+0x8>
 312:	00 d0       	rcall	.+0      	; 0x314 <Testfunc+0xa>
 314:	00 d0       	rcall	.+0      	; 0x316 <Testfunc+0xc>
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
	Array a;
	int i;
				
	initArray(&a, 5);  // initially 5 elements
 31a:	65 e0       	ldi	r22, 0x05	; 5
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	0e 94 53 00 	call	0xa6	; 0xa6 <initArray>
 326:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i < 100; i++)
	insertArray(&a, i);  // automatically resizes as necessary
 328:	61 2f       	mov	r22, r17
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	0e 94 67 00 	call	0xce	; 0xce <insertArray>
 332:	1f 5f       	subi	r17, 0xFF	; 255
void Testfunc() {
	Array a;
	int i;
				
	initArray(&a, 5);  // initially 5 elements
	for (i = 0; i < 100; i++)
 334:	14 36       	cpi	r17, 0x64	; 100
 336:	c1 f7       	brne	.-16     	; 0x328 <Testfunc+0x1e>
	insertArray(&a, i);  // automatically resizes as necessary
				
	int count = a.size;
 338:	2d 81       	ldd	r18, Y+5	; 0x05
 33a:	3e 81       	ldd	r19, Y+6	; 0x06
	for (i = 0; i < count; i++)
 33c:	12 16       	cp	r1, r18
 33e:	13 06       	cpc	r1, r19
 340:	5c f4       	brge	.+22     	; 0x358 <Testfunc+0x4e>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
	a.array[i] = i;
 346:	e9 81       	ldd	r30, Y+1	; 0x01
 348:	fa 81       	ldd	r31, Y+2	; 0x02
 34a:	e8 0f       	add	r30, r24
 34c:	f9 1f       	adc	r31, r25
 34e:	80 83       	st	Z, r24
	initArray(&a, 5);  // initially 5 elements
	for (i = 0; i < 100; i++)
	insertArray(&a, i);  // automatically resizes as necessary
				
	int count = a.size;
	for (i = 0; i < count; i++)
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	28 17       	cp	r18, r24
 354:	39 07       	cpc	r19, r25
 356:	b9 f7       	brne	.-18     	; 0x346 <Testfunc+0x3c>
	a.array[i] = i;
				
	//a.array[9]  // get and set byte to array element
	//a.used  // number of elements
	freeArray(&a);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 90 00 	call	0x120	; 0x120 <freeArray>
}
 360:	26 96       	adiw	r28, 0x06	; 6
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	08 95       	ret

00000374 <main>:

int main(void) {
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	c0 54       	subi	r28, 0x40	; 64
 37e:	d1 09       	sbc	r29, r1
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTB as Output
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 38e:	fe 01       	movw	r30, r28
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	df 01       	movw	r26, r30
 396:	1d 92       	st	X+, r1
 398:	8a 95       	dec	r24
 39a:	e9 f7       	brne	.-6      	; 0x396 <main+0x22>
	USART_Init();       
 39c:	0e 94 a0 00 	call	0x140	; 0x140 <USART_Init>
			USART_Transmit_Str(CHR_LINE_FEED);
		} else /* ERROR */ {
			// Info Blink
			blink();
	
			byte answer[FRAME_SIZE] = { 0 };
 3a0:	7e 01       	movw	r14, r28
 3a2:	b1 e2       	ldi	r27, 0x21	; 33
 3a4:	eb 0e       	add	r14, r27
 3a6:	f1 1c       	adc	r15, r1
			answer[0] = CHR_COLON;
			answer[1] = crc8;
			answer[2] = input[index_crc8];
			answer[3] = index_crc8;
			answer[4] = "2";
 3a8:	0f 2e       	mov	r0, r31
 3aa:	f6 e0       	ldi	r31, 0x06	; 6
 3ac:	8f 2e       	mov	r8, r31
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	9f 2e       	mov	r9, r31
 3b2:	f0 2d       	mov	r31, r0
			answer[5] = "3";
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f8 e0       	ldi	r31, 0x08	; 8
 3b8:	af 2e       	mov	r10, r31
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	bf 2e       	mov	r11, r31
 3be:	f0 2d       	mov	r31, r0
			answer[6] = "4";
 3c0:	0f 2e       	mov	r0, r31
 3c2:	fa e0       	ldi	r31, 0x0A	; 10
 3c4:	cf 2e       	mov	r12, r31
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	df 2e       	mov	r13, r31
 3ca:	f0 2d       	mov	r31, r0
			answer[7] = CHR_COLON;
			answer[8] = CHR_CARRET_RETURN;
 3cc:	0f 2e       	mov	r0, r31
 3ce:	fd e0       	ldi	r31, 0x0D	; 13
 3d0:	4f 2e       	mov	r4, r31
 3d2:	f0 2d       	mov	r31, r0
			answer[9] = CHR_LINE_FEED;
 3d4:	0f 2e       	mov	r0, r31
 3d6:	fa e0       	ldi	r31, 0x0A	; 10
 3d8:	5f 2e       	mov	r5, r31
 3da:	f0 2d       	mov	r31, r0
	byte input[FRAME_SIZE] = { 0 };
	USART_Init();       
	
	while(1) {
		// Get request
		USART_Receive_Str(input);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Receive_Str>
		
		// Get CRC8 byte index
		byte index_crc8 = GetCRC8Index(input, FRAME_SIZE, CHR_COLON);
 3e4:	4a e3       	ldi	r20, 0x3A	; 58
 3e6:	60 e2       	ldi	r22, 0x20	; 32
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GetCRC8Index>
 3f0:	78 2e       	mov	r7, r24
			
		// Add CRC8 byte
		byte crc8 = Crc8(input, index_crc8);
 3f2:	68 2f       	mov	r22, r24
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	0e 94 48 02 	call	0x490	; 0x490 <Crc8>
 3fc:	68 2e       	mov	r6, r24
		//input[index_crc8] = crc8;
		
		if (input[index_crc8] == crc8) {
 3fe:	07 2d       	mov	r16, r7
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	e1 e0       	ldi	r30, 0x01	; 1
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ec 0f       	add	r30, r28
 408:	fd 1f       	adc	r31, r29
 40a:	e0 0f       	add	r30, r16
 40c:	f1 1f       	adc	r31, r17
 40e:	80 81       	ld	r24, Z
 410:	68 12       	cpse	r6, r24
 412:	15 c0       	rjmp	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			
			// Info Blink
			blink();
 414:	0e 94 48 01 	call	0x290	; 0x290 <blink>
			
			// TEST TEMP FUNC
			Testfunc();
 418:	0e 94 85 01 	call	0x30a	; 0x30a <Testfunc>
			USART_Transmit_Str(output);
			USART_Transmit_Str(CHR_CARRET_RETURN);
			*/
			
			// Send response ( ECHO )
			USART_Transmit_Str(input);
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_COLON);
 424:	8a e3       	ldi	r24, 0x3A	; 58
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_CARRET_RETURN);
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_LINE_FEED);
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
 43c:	24 c0       	rjmp	.+72     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		} else /* ERROR */ {
			// Info Blink
			blink();
 43e:	0e 94 48 01 	call	0x290	; 0x290 <blink>
	
			byte answer[FRAME_SIZE] = { 0 };
 442:	80 e2       	ldi	r24, 0x20	; 32
 444:	f7 01       	movw	r30, r14
 446:	11 92       	st	Z+, r1
 448:	8a 95       	dec	r24
 44a:	e9 f7       	brne	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			answer[0] = CHR_COLON;
 44c:	8a e3       	ldi	r24, 0x3A	; 58
 44e:	89 a3       	std	Y+33, r24	; 0x21
			answer[1] = crc8;
 450:	6a a2       	std	Y+34, r6	; 0x22
			answer[2] = input[index_crc8];
 452:	e1 e0       	ldi	r30, 0x01	; 1
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ec 0f       	add	r30, r28
 458:	fd 1f       	adc	r31, r29
 45a:	e0 0f       	add	r30, r16
 45c:	f1 1f       	adc	r31, r17
 45e:	90 81       	ld	r25, Z
 460:	9b a3       	std	Y+35, r25	; 0x23
			answer[3] = index_crc8;
 462:	7c a2       	std	Y+36, r7	; 0x24
			answer[4] = "2";
 464:	8d a2       	std	Y+37, r8	; 0x25
			answer[5] = "3";
 466:	ae a2       	std	Y+38, r10	; 0x26
			answer[6] = "4";
 468:	cf a2       	std	Y+39, r12	; 0x27
			answer[7] = CHR_COLON;
 46a:	88 a7       	std	Y+40, r24	; 0x28
			answer[8] = CHR_CARRET_RETURN;
 46c:	49 a6       	std	Y+41, r4	; 0x29
			answer[9] = CHR_LINE_FEED;
 46e:	5a a6       	std	Y+42, r5	; 0x2a
			
			// Send response
			USART_Transmit_Str(answer);
 470:	c7 01       	movw	r24, r14
 472:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
			
			// End answer message chars
			USART_Transmit_Str(CHR_CARRET_RETURN);
 476:	8d e0       	ldi	r24, 0x0D	; 13
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_LINE_FEED);
 47e:	8a e0       	ldi	r24, 0x0A	; 10
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Transmit_Str>
		}
		
		// Clean array
		Clean_Data(input);
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	0e 94 57 01 	call	0x2ae	; 0x2ae <Clean_Data>
	}
 48e:	a6 cf       	rjmp	.-180    	; 0x3dc <main+0x68>

00000490 <Crc8>:
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 490:	66 23       	and	r22, r22
 492:	81 f0       	breq	.+32     	; 0x4b4 <Crc8+0x24>
 494:	dc 01       	movw	r26, r24
 496:	9c 01       	movw	r18, r24
 498:	26 0f       	add	r18, r22
 49a:	31 1d       	adc	r19, r1
 49c:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
 49e:	ed 91       	ld	r30, X+
 4a0:	8e 27       	eor	r24, r30
 4a2:	e8 2f       	mov	r30, r24
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	e4 5f       	subi	r30, 0xF4	; 244
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	80 81       	ld	r24, Z
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 4ac:	a2 17       	cp	r26, r18
 4ae:	b3 07       	cpc	r27, r19
 4b0:	b1 f7       	brne	.-20     	; 0x49e <Crc8+0xe>
 4b2:	08 95       	ret
	0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
	}

	return crc;
}
 4b6:	08 95       	ret

000004b8 <GetCRC8Index>:

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 4b8:	66 23       	and	r22, r22
 4ba:	99 f0       	breq	.+38     	; 0x4e2 <GetCRC8Index+0x2a>
 4bc:	e8 2f       	mov	r30, r24
 4be:	f9 2f       	mov	r31, r25
 4c0:	90 e0       	ldi	r25, 0x00	; 0
		// Need many checkeds
		if (input_data[i] == CHR_COLON && i > 0) {
 4c2:	21 91       	ld	r18, Z+
 4c4:	2a 33       	cpi	r18, 0x3A	; 58
 4c6:	41 f4       	brne	.+16     	; 0x4d8 <GetCRC8Index+0x20>
 4c8:	99 23       	and	r25, r25
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <GetCRC8Index+0x20>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
 4cc:	80 81       	ld	r24, Z
 4ce:	8d 30       	cpi	r24, 0x0D	; 13
 4d0:	19 f4       	brne	.+6      	; 0x4d8 <GetCRC8Index+0x20>
				return i - 1;
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	89 0f       	add	r24, r25
 4d6:	08 95       	ret
			}
		}
		
		x++;
 4d8:	9f 5f       	subi	r25, 0xFF	; 255

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 4da:	69 13       	cpse	r22, r25
 4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <GetCRC8Index+0xa>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
				return i - 1;
			}
		}
		
		x++;
 4de:	86 2f       	mov	r24, r22
 4e0:	08 95       	ret
}

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
		
		x++;
	}
	
	return x;
 4e4:	08 95       	ret

000004e6 <malloc>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	10 f4       	brcc	.+4      	; 0x4f8 <malloc+0x12>
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__flp>
 4fc:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__flp+0x1>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	a0 e0       	ldi	r26, 0x00	; 0
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	30 97       	sbiw	r30, 0x00	; 0
 50a:	19 f1       	breq	.+70     	; 0x552 <malloc+0x6c>
 50c:	40 81       	ld	r20, Z
 50e:	51 81       	ldd	r21, Z+1	; 0x01
 510:	02 81       	ldd	r16, Z+2	; 0x02
 512:	13 81       	ldd	r17, Z+3	; 0x03
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	c8 f0       	brcs	.+50     	; 0x54c <malloc+0x66>
 51a:	84 17       	cp	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	69 f4       	brne	.+26     	; 0x53a <malloc+0x54>
 520:	10 97       	sbiw	r26, 0x00	; 0
 522:	31 f0       	breq	.+12     	; 0x530 <malloc+0x4a>
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	0c 93       	st	X, r16
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	13 96       	adiw	r26, 0x03	; 3
 52c:	1c 93       	st	X, r17
 52e:	27 c0       	rjmp	.+78     	; 0x57e <malloc+0x98>
 530:	00 93 0e 02 	sts	0x020E, r16	; 0x80020e <__flp>
 534:	10 93 0f 02 	sts	0x020F, r17	; 0x80020f <__flp+0x1>
 538:	22 c0       	rjmp	.+68     	; 0x57e <malloc+0x98>
 53a:	21 15       	cp	r18, r1
 53c:	31 05       	cpc	r19, r1
 53e:	19 f0       	breq	.+6      	; 0x546 <malloc+0x60>
 540:	42 17       	cp	r20, r18
 542:	53 07       	cpc	r21, r19
 544:	18 f4       	brcc	.+6      	; 0x54c <malloc+0x66>
 546:	9a 01       	movw	r18, r20
 548:	bd 01       	movw	r22, r26
 54a:	ef 01       	movw	r28, r30
 54c:	df 01       	movw	r26, r30
 54e:	f8 01       	movw	r30, r16
 550:	db cf       	rjmp	.-74     	; 0x508 <malloc+0x22>
 552:	21 15       	cp	r18, r1
 554:	31 05       	cpc	r19, r1
 556:	f9 f0       	breq	.+62     	; 0x596 <malloc+0xb0>
 558:	28 1b       	sub	r18, r24
 55a:	39 0b       	sbc	r19, r25
 55c:	24 30       	cpi	r18, 0x04	; 4
 55e:	31 05       	cpc	r19, r1
 560:	80 f4       	brcc	.+32     	; 0x582 <malloc+0x9c>
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	9b 81       	ldd	r25, Y+3	; 0x03
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	21 f0       	breq	.+8      	; 0x574 <malloc+0x8e>
 56c:	fb 01       	movw	r30, r22
 56e:	93 83       	std	Z+3, r25	; 0x03
 570:	82 83       	std	Z+2, r24	; 0x02
 572:	04 c0       	rjmp	.+8      	; 0x57c <malloc+0x96>
 574:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__flp+0x1>
 578:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__flp>
 57c:	fe 01       	movw	r30, r28
 57e:	32 96       	adiw	r30, 0x02	; 2
 580:	44 c0       	rjmp	.+136    	; 0x60a <malloc+0x124>
 582:	fe 01       	movw	r30, r28
 584:	e2 0f       	add	r30, r18
 586:	f3 1f       	adc	r31, r19
 588:	81 93       	st	Z+, r24
 58a:	91 93       	st	Z+, r25
 58c:	22 50       	subi	r18, 0x02	; 2
 58e:	31 09       	sbc	r19, r1
 590:	39 83       	std	Y+1, r19	; 0x01
 592:	28 83       	st	Y, r18
 594:	3a c0       	rjmp	.+116    	; 0x60a <malloc+0x124>
 596:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
 59a:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
 59e:	23 2b       	or	r18, r19
 5a0:	41 f4       	brne	.+16     	; 0x5b2 <malloc+0xcc>
 5a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5aa:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <__data_end+0x1>
 5ae:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <__data_end>
 5b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xea>
 5c0:	2d b7       	in	r18, 0x3d	; 61
 5c2:	3e b7       	in	r19, 0x3e	; 62
 5c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5cc:	24 1b       	sub	r18, r20
 5ce:	35 0b       	sbc	r19, r21
 5d0:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 5d4:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 5d8:	e2 17       	cp	r30, r18
 5da:	f3 07       	cpc	r31, r19
 5dc:	a0 f4       	brcc	.+40     	; 0x606 <malloc+0x120>
 5de:	2e 1b       	sub	r18, r30
 5e0:	3f 0b       	sbc	r19, r31
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	78 f0       	brcs	.+30     	; 0x606 <malloc+0x120>
 5e8:	ac 01       	movw	r20, r24
 5ea:	4e 5f       	subi	r20, 0xFE	; 254
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	24 17       	cp	r18, r20
 5f0:	35 07       	cpc	r19, r21
 5f2:	48 f0       	brcs	.+18     	; 0x606 <malloc+0x120>
 5f4:	4e 0f       	add	r20, r30
 5f6:	5f 1f       	adc	r21, r31
 5f8:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <__data_end+0x1>
 5fc:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <__data_end>
 600:	81 93       	st	Z+, r24
 602:	91 93       	st	Z+, r25
 604:	02 c0       	rjmp	.+4      	; 0x60a <malloc+0x124>
 606:	e0 e0       	ldi	r30, 0x00	; 0
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	cf 01       	movw	r24, r30
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <free>:
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	09 f4       	brne	.+2      	; 0x620 <free+0xa>
 61e:	81 c0       	rjmp	.+258    	; 0x722 <free+0x10c>
 620:	fc 01       	movw	r30, r24
 622:	32 97       	sbiw	r30, 0x02	; 2
 624:	13 82       	std	Z+3, r1	; 0x03
 626:	12 82       	std	Z+2, r1	; 0x02
 628:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__flp>
 62c:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__flp+0x1>
 630:	10 97       	sbiw	r26, 0x00	; 0
 632:	81 f4       	brne	.+32     	; 0x654 <free+0x3e>
 634:	20 81       	ld	r18, Z
 636:	31 81       	ldd	r19, Z+1	; 0x01
 638:	82 0f       	add	r24, r18
 63a:	93 1f       	adc	r25, r19
 63c:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
 640:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	51 f5       	brne	.+84     	; 0x69e <free+0x88>
 64a:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__data_end+0x1>
 64e:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__data_end>
 652:	67 c0       	rjmp	.+206    	; 0x722 <free+0x10c>
 654:	ed 01       	movw	r28, r26
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	ce 17       	cp	r28, r30
 65c:	df 07       	cpc	r29, r31
 65e:	40 f4       	brcc	.+16     	; 0x670 <free+0x5a>
 660:	4a 81       	ldd	r20, Y+2	; 0x02
 662:	5b 81       	ldd	r21, Y+3	; 0x03
 664:	9e 01       	movw	r18, r28
 666:	41 15       	cp	r20, r1
 668:	51 05       	cpc	r21, r1
 66a:	f1 f0       	breq	.+60     	; 0x6a8 <free+0x92>
 66c:	ea 01       	movw	r28, r20
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <free+0x44>
 670:	d3 83       	std	Z+3, r29	; 0x03
 672:	c2 83       	std	Z+2, r28	; 0x02
 674:	40 81       	ld	r20, Z
 676:	51 81       	ldd	r21, Z+1	; 0x01
 678:	84 0f       	add	r24, r20
 67a:	95 1f       	adc	r25, r21
 67c:	c8 17       	cp	r28, r24
 67e:	d9 07       	cpc	r29, r25
 680:	59 f4       	brne	.+22     	; 0x698 <free+0x82>
 682:	88 81       	ld	r24, Y
 684:	99 81       	ldd	r25, Y+1	; 0x01
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	9b 81       	ldd	r25, Y+3	; 0x03
 694:	93 83       	std	Z+3, r25	; 0x03
 696:	82 83       	std	Z+2, r24	; 0x02
 698:	21 15       	cp	r18, r1
 69a:	31 05       	cpc	r19, r1
 69c:	29 f4       	brne	.+10     	; 0x6a8 <free+0x92>
 69e:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__flp+0x1>
 6a2:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__flp>
 6a6:	3d c0       	rjmp	.+122    	; 0x722 <free+0x10c>
 6a8:	e9 01       	movw	r28, r18
 6aa:	fb 83       	std	Y+3, r31	; 0x03
 6ac:	ea 83       	std	Y+2, r30	; 0x02
 6ae:	49 91       	ld	r20, Y+
 6b0:	59 91       	ld	r21, Y+
 6b2:	c4 0f       	add	r28, r20
 6b4:	d5 1f       	adc	r29, r21
 6b6:	ec 17       	cp	r30, r28
 6b8:	fd 07       	cpc	r31, r29
 6ba:	61 f4       	brne	.+24     	; 0x6d4 <free+0xbe>
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	84 0f       	add	r24, r20
 6c2:	95 1f       	adc	r25, r21
 6c4:	02 96       	adiw	r24, 0x02	; 2
 6c6:	e9 01       	movw	r28, r18
 6c8:	99 83       	std	Y+1, r25	; 0x01
 6ca:	88 83       	st	Y, r24
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	9b 83       	std	Y+3, r25	; 0x03
 6d2:	8a 83       	std	Y+2, r24	; 0x02
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	12 96       	adiw	r26, 0x02	; 2
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	13 97       	sbiw	r26, 0x03	; 3
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <free+0xd4>
 6e4:	fd 01       	movw	r30, r26
 6e6:	dc 01       	movw	r26, r24
 6e8:	f7 cf       	rjmp	.-18     	; 0x6d8 <free+0xc2>
 6ea:	8d 91       	ld	r24, X+
 6ec:	9c 91       	ld	r25, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	9d 01       	movw	r18, r26
 6f2:	2e 5f       	subi	r18, 0xFE	; 254
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
 6fe:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	69 f4       	brne	.+26     	; 0x722 <free+0x10c>
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	29 f4       	brne	.+10     	; 0x716 <free+0x100>
 70c:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <__flp+0x1>
 710:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__flp>
 714:	02 c0       	rjmp	.+4      	; 0x71a <free+0x104>
 716:	13 82       	std	Z+3, r1	; 0x03
 718:	12 82       	std	Z+2, r1	; 0x02
 71a:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <__data_end+0x1>
 71e:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <__data_end>
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <realloc>:
 728:	a0 e0       	ldi	r26, 0x00	; 0
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	ea e9       	ldi	r30, 0x9A	; 154
 72e:	f3 e0       	ldi	r31, 0x03	; 3
 730:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__prologue_saves__+0x8>
 734:	ec 01       	movw	r28, r24
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	21 f4       	brne	.+8      	; 0x742 <realloc+0x1a>
 73a:	cb 01       	movw	r24, r22
 73c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <malloc>
 740:	b4 c0       	rjmp	.+360    	; 0x8aa <realloc+0x182>
 742:	fc 01       	movw	r30, r24
 744:	e6 0f       	add	r30, r22
 746:	f7 1f       	adc	r31, r23
 748:	9c 01       	movw	r18, r24
 74a:	22 50       	subi	r18, 0x02	; 2
 74c:	31 09       	sbc	r19, r1
 74e:	e2 17       	cp	r30, r18
 750:	f3 07       	cpc	r31, r19
 752:	08 f4       	brcc	.+2      	; 0x756 <realloc+0x2e>
 754:	a8 c0       	rjmp	.+336    	; 0x8a6 <realloc+0x17e>
 756:	d9 01       	movw	r26, r18
 758:	0d 91       	ld	r16, X+
 75a:	1c 91       	ld	r17, X
 75c:	11 97       	sbiw	r26, 0x01	; 1
 75e:	06 17       	cp	r16, r22
 760:	17 07       	cpc	r17, r23
 762:	b0 f0       	brcs	.+44     	; 0x790 <realloc+0x68>
 764:	05 30       	cpi	r16, 0x05	; 5
 766:	11 05       	cpc	r17, r1
 768:	08 f4       	brcc	.+2      	; 0x76c <realloc+0x44>
 76a:	9b c0       	rjmp	.+310    	; 0x8a2 <realloc+0x17a>
 76c:	c8 01       	movw	r24, r16
 76e:	04 97       	sbiw	r24, 0x04	; 4
 770:	86 17       	cp	r24, r22
 772:	97 07       	cpc	r25, r23
 774:	08 f4       	brcc	.+2      	; 0x778 <realloc+0x50>
 776:	95 c0       	rjmp	.+298    	; 0x8a2 <realloc+0x17a>
 778:	02 50       	subi	r16, 0x02	; 2
 77a:	11 09       	sbc	r17, r1
 77c:	06 1b       	sub	r16, r22
 77e:	17 0b       	sbc	r17, r23
 780:	01 93       	st	Z+, r16
 782:	11 93       	st	Z+, r17
 784:	6d 93       	st	X+, r22
 786:	7c 93       	st	X, r23
 788:	cf 01       	movw	r24, r30
 78a:	0e 94 0b 03 	call	0x616	; 0x616 <free>
 78e:	89 c0       	rjmp	.+274    	; 0x8a2 <realloc+0x17a>
 790:	5b 01       	movw	r10, r22
 792:	a0 1a       	sub	r10, r16
 794:	b1 0a       	sbc	r11, r17
 796:	4c 01       	movw	r8, r24
 798:	80 0e       	add	r8, r16
 79a:	91 1e       	adc	r9, r17
 79c:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__flp>
 7a0:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__flp+0x1>
 7a4:	61 2c       	mov	r6, r1
 7a6:	71 2c       	mov	r7, r1
 7a8:	e1 2c       	mov	r14, r1
 7aa:	f1 2c       	mov	r15, r1
 7ac:	10 97       	sbiw	r26, 0x00	; 0
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <realloc+0x8a>
 7b0:	46 c0       	rjmp	.+140    	; 0x83e <realloc+0x116>
 7b2:	8d 91       	ld	r24, X+
 7b4:	9c 91       	ld	r25, X
 7b6:	11 97       	sbiw	r26, 0x01	; 1
 7b8:	a8 15       	cp	r26, r8
 7ba:	b9 05       	cpc	r27, r9
 7bc:	b1 f5       	brne	.+108    	; 0x82a <realloc+0x102>
 7be:	6c 01       	movw	r12, r24
 7c0:	42 e0       	ldi	r20, 0x02	; 2
 7c2:	c4 0e       	add	r12, r20
 7c4:	d1 1c       	adc	r13, r1
 7c6:	ca 14       	cp	r12, r10
 7c8:	db 04       	cpc	r13, r11
 7ca:	78 f1       	brcs	.+94     	; 0x82a <realloc+0x102>
 7cc:	4c 01       	movw	r8, r24
 7ce:	8a 18       	sub	r8, r10
 7d0:	9b 08       	sbc	r9, r11
 7d2:	64 01       	movw	r12, r8
 7d4:	42 e0       	ldi	r20, 0x02	; 2
 7d6:	c4 0e       	add	r12, r20
 7d8:	d1 1c       	adc	r13, r1
 7da:	12 96       	adiw	r26, 0x02	; 2
 7dc:	bc 90       	ld	r11, X
 7de:	12 97       	sbiw	r26, 0x02	; 2
 7e0:	13 96       	adiw	r26, 0x03	; 3
 7e2:	ac 91       	ld	r26, X
 7e4:	b5 e0       	ldi	r27, 0x05	; 5
 7e6:	cb 16       	cp	r12, r27
 7e8:	d1 04       	cpc	r13, r1
 7ea:	40 f0       	brcs	.+16     	; 0x7fc <realloc+0xd4>
 7ec:	b2 82       	std	Z+2, r11	; 0x02
 7ee:	a3 83       	std	Z+3, r26	; 0x03
 7f0:	91 82       	std	Z+1, r9	; 0x01
 7f2:	80 82       	st	Z, r8
 7f4:	d9 01       	movw	r26, r18
 7f6:	6d 93       	st	X+, r22
 7f8:	7c 93       	st	X, r23
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <realloc+0xe6>
 7fc:	0e 5f       	subi	r16, 0xFE	; 254
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	80 0f       	add	r24, r16
 802:	91 1f       	adc	r25, r17
 804:	f9 01       	movw	r30, r18
 806:	91 83       	std	Z+1, r25	; 0x01
 808:	80 83       	st	Z, r24
 80a:	eb 2d       	mov	r30, r11
 80c:	fa 2f       	mov	r31, r26
 80e:	e1 14       	cp	r14, r1
 810:	f1 04       	cpc	r15, r1
 812:	31 f0       	breq	.+12     	; 0x820 <realloc+0xf8>
 814:	d7 01       	movw	r26, r14
 816:	13 96       	adiw	r26, 0x03	; 3
 818:	fc 93       	st	X, r31
 81a:	ee 93       	st	-X, r30
 81c:	12 97       	sbiw	r26, 0x02	; 2
 81e:	41 c0       	rjmp	.+130    	; 0x8a2 <realloc+0x17a>
 820:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__flp+0x1>
 824:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__flp>
 828:	3c c0       	rjmp	.+120    	; 0x8a2 <realloc+0x17a>
 82a:	68 16       	cp	r6, r24
 82c:	79 06       	cpc	r7, r25
 82e:	08 f4       	brcc	.+2      	; 0x832 <realloc+0x10a>
 830:	3c 01       	movw	r6, r24
 832:	7d 01       	movw	r14, r26
 834:	12 96       	adiw	r26, 0x02	; 2
 836:	0d 90       	ld	r0, X+
 838:	bc 91       	ld	r27, X
 83a:	a0 2d       	mov	r26, r0
 83c:	b7 cf       	rjmp	.-146    	; 0x7ac <realloc+0x84>
 83e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 842:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 846:	88 16       	cp	r8, r24
 848:	99 06       	cpc	r9, r25
 84a:	e1 f4       	brne	.+56     	; 0x884 <realloc+0x15c>
 84c:	66 16       	cp	r6, r22
 84e:	77 06       	cpc	r7, r23
 850:	c8 f4       	brcc	.+50     	; 0x884 <realloc+0x15c>
 852:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 856:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	41 f4       	brne	.+16     	; 0x86e <realloc+0x146>
 85e:	8d b7       	in	r24, 0x3d	; 61
 860:	9e b7       	in	r25, 0x3e	; 62
 862:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 866:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 86a:	84 1b       	sub	r24, r20
 86c:	95 0b       	sbc	r25, r21
 86e:	e8 17       	cp	r30, r24
 870:	f9 07       	cpc	r31, r25
 872:	c8 f4       	brcc	.+50     	; 0x8a6 <realloc+0x17e>
 874:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__data_end+0x1>
 878:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__data_end>
 87c:	f9 01       	movw	r30, r18
 87e:	71 83       	std	Z+1, r23	; 0x01
 880:	60 83       	st	Z, r22
 882:	0f c0       	rjmp	.+30     	; 0x8a2 <realloc+0x17a>
 884:	cb 01       	movw	r24, r22
 886:	0e 94 73 02 	call	0x4e6	; 0x4e6 <malloc>
 88a:	7c 01       	movw	r14, r24
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	59 f0       	breq	.+22     	; 0x8a6 <realloc+0x17e>
 890:	a8 01       	movw	r20, r16
 892:	be 01       	movw	r22, r28
 894:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <memcpy>
 898:	ce 01       	movw	r24, r28
 89a:	0e 94 0b 03 	call	0x616	; 0x616 <free>
 89e:	c7 01       	movw	r24, r14
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <realloc+0x182>
 8a2:	ce 01       	movw	r24, r28
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <realloc+0x182>
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	ee e0       	ldi	r30, 0x0E	; 14
 8b0:	0c 94 83 04 	jmp	0x906	; 0x906 <__stack+0x7>

000008b4 <memcpy>:
 8b4:	fb 01       	movw	r30, r22
 8b6:	dc 01       	movw	r26, r24
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <memcpy+0xa>
 8ba:	01 90       	ld	r0, Z+
 8bc:	0d 92       	st	X+, r0
 8be:	41 50       	subi	r20, 0x01	; 1
 8c0:	50 40       	sbci	r21, 0x00	; 0
 8c2:	d8 f7       	brcc	.-10     	; 0x8ba <memcpy+0x6>
 8c4:	08 95       	ret

000008c6 <__prologue_saves__>:
 8c6:	2f 92       	push	r2
 8c8:	3f 92       	push	r3
 8ca:	4f 92       	push	r4
 8cc:	5f 92       	push	r5
 8ce:	6f 92       	push	r6
 8d0:	7f 92       	push	r7
 8d2:	8f 92       	push	r8
 8d4:	9f 92       	push	r9
 8d6:	af 92       	push	r10
 8d8:	bf 92       	push	r11
 8da:	cf 92       	push	r12
 8dc:	df 92       	push	r13
 8de:	ef 92       	push	r14
 8e0:	ff 92       	push	r15
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	ca 1b       	sub	r28, r26
 8f0:	db 0b       	sbc	r29, r27
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	f8 94       	cli
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	cd bf       	out	0x3d, r28	; 61
 8fc:	09 94       	ijmp

000008fe <__epilogue_restores__>:
 8fe:	2a 88       	ldd	r2, Y+18	; 0x12
 900:	39 88       	ldd	r3, Y+17	; 0x11
 902:	48 88       	ldd	r4, Y+16	; 0x10
 904:	5f 84       	ldd	r5, Y+15	; 0x0f
 906:	6e 84       	ldd	r6, Y+14	; 0x0e
 908:	7d 84       	ldd	r7, Y+13	; 0x0d
 90a:	8c 84       	ldd	r8, Y+12	; 0x0c
 90c:	9b 84       	ldd	r9, Y+11	; 0x0b
 90e:	aa 84       	ldd	r10, Y+10	; 0x0a
 910:	b9 84       	ldd	r11, Y+9	; 0x09
 912:	c8 84       	ldd	r12, Y+8	; 0x08
 914:	df 80       	ldd	r13, Y+7	; 0x07
 916:	ee 80       	ldd	r14, Y+6	; 0x06
 918:	fd 80       	ldd	r15, Y+5	; 0x05
 91a:	0c 81       	ldd	r16, Y+4	; 0x04
 91c:	1b 81       	ldd	r17, Y+3	; 0x03
 91e:	aa 81       	ldd	r26, Y+2	; 0x02
 920:	b9 81       	ldd	r27, Y+1	; 0x01
 922:	ce 0f       	add	r28, r30
 924:	d1 1d       	adc	r29, r1
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	f8 94       	cli
 92a:	de bf       	out	0x3e, r29	; 62
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	cd bf       	out	0x3d, r28	; 61
 930:	ed 01       	movw	r28, r26
 932:	08 95       	ret

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
