
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000002b8  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad8  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050e  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000542  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_6>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  8e:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Crc8>:

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {

	uint8_t crc = 0xFF;
	
	for (int i = 0; i < len; i++) {		
  96:	66 23       	and	r22, r22
  98:	81 f0       	breq	.+32     	; 0xba <Crc8+0x24>
  9a:	dc 01       	movw	r26, r24
  9c:	9c 01       	movw	r18, r24
  9e:	26 0f       	add	r18, r22
  a0:	31 1d       	adc	r19, r1
  a2:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
  a4:	ed 91       	ld	r30, X+
  a6:	8e 27       	eor	r24, r30
  a8:	e8 2f       	mov	r30, r24
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	ee 5f       	subi	r30, 0xFE	; 254
  ae:	fe 4f       	sbci	r31, 0xFE	; 254
  b0:	80 81       	ld	r24, Z

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {

	uint8_t crc = 0xFF;
	
	for (int i = 0; i < len; i++) {		
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	b1 f7       	brne	.-20     	; 0xa4 <Crc8+0xe>
  b8:	08 95       	ret
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {

	uint8_t crc = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
	}

	return crc;
}
  bc:	08 95       	ret

000000be <USART_Init>:

void USART_Init() {
	UBRR0H = BAUD_PRESCALE >> 8;
  be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE;
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0A |= (1<<U2X0); //Удвоение частоты
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //Разрешаем прием и передачу по USART - T/R ENable = True
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01) | (1 << UCSZ00);
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  de:	08 95       	ret

000000e0 <USART_Receive>:
}

byte USART_Receive(void) {	
	while( !(UCSR0A & (1<<RXC0)) );
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <USART_Receive+0x4>
	return UDR0;
  ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ee:	08 95       	ret

000000f0 <USART_Receive_Str>:

void USART_Receive_Str(byte *calledstring) {
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	7c 01       	movw	r14, r24
  fe:	8c 01       	movw	r16, r24
	char ch;
	
	int i = 0;	
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
	while(1) {		
		ch = USART_Receive();
 104:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Receive>
		
		if (ch == END_LINE) {
 108:	8d 30       	cpi	r24, 0x0D	; 13
 10a:	21 f4       	brne	.+8      	; 0x114 <USART_Receive_Str+0x24>
			calledstring[i] = END_LINE;	
 10c:	ce 0d       	add	r28, r14
 10e:	df 1d       	adc	r29, r15
 110:	88 83       	st	Y, r24
			return;
 112:	05 c0       	rjmp	.+10     	; 0x11e <USART_Receive_Str+0x2e>
		} else {
			calledstring[i] = ch;			
 114:	f8 01       	movw	r30, r16
 116:	81 93       	st	Z+, r24
 118:	8f 01       	movw	r16, r30
		}
		
		i++;
 11a:	21 96       	adiw	r28, 0x01	; 1
	}	
 11c:	f3 cf       	rjmp	.-26     	; 0x104 <USART_Receive_Str+0x14>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	08 95       	ret

0000012c <USART_Send>:

void USART_Send(byte data) {
	while( !(UCSR0A & (1<<UDRE0)) );
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	90 81       	ld	r25, Z
 132:	95 ff       	sbrs	r25, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <USART_Send+0x4>
	UDR0 = data;
 136:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13a:	08 95       	ret

0000013c <USART_Transmit_Str>:
}

void USART_Transmit_Str(byte *calledstring) {
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	fc 01       	movw	r30, r24
	for (int i = 0; i < FRAME_SIZE; i++) {
		if (calledstring[i] != 0)
 146:	80 81       	ld	r24, Z
 148:	81 11       	cpse	r24, r1
 14a:	0a c0       	rjmp	.+20     	; 0x160 <USART_Transmit_Str+0x24>
 14c:	11 c0       	rjmp	.+34     	; 0x170 <USART_Transmit_Str+0x34>
 14e:	89 91       	ld	r24, Y+
 150:	88 23       	and	r24, r24
 152:	71 f0       	breq	.+28     	; 0x170 <USART_Transmit_Str+0x34>
			USART_Send(calledstring[i]);
 154:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Send>
	while( !(UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
}

void USART_Transmit_Str(byte *calledstring) {
	for (int i = 0; i < FRAME_SIZE; i++) {
 158:	0c 17       	cp	r16, r28
 15a:	1d 07       	cpc	r17, r29
 15c:	c1 f7       	brne	.-16     	; 0x14e <USART_Transmit_Str+0x12>
 15e:	08 c0       	rjmp	.+16     	; 0x170 <USART_Transmit_Str+0x34>
 160:	8f 01       	movw	r16, r30
		if (calledstring[i] != 0)
			USART_Send(calledstring[i]);
 162:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Send>
 166:	e8 01       	movw	r28, r16
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	00 5e       	subi	r16, 0xE0	; 224
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	ef cf       	rjmp	.-34     	; 0x14e <USART_Transmit_Str+0x12>
		else 
			break;		
	}
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <blink>:

void blink() {
	PORTB = 0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f e7       	ldi	r18, 0x7F	; 127
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <blink+0xa>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <blink+0x14>
 18e:	00 00       	nop
	_delay_ms(25);
	PORTB= 0x00;
 190:	15 b8       	out	0x05, r1	; 5
 192:	2f e7       	ldi	r18, 0x7F	; 127
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <blink+0x1e>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <blink+0x28>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <Clean_Data>:
	_delay_ms(25);
}

void Clean_Data(byte *input_data) {
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 96       	adiw	r24, 0x20	; 32
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		input_data[i] = 0;
 1aa:	11 92       	st	Z+, r1
	PORTB= 0x00;
	_delay_ms(25);
}

void Clean_Data(byte *input_data) {
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 1ac:	e8 17       	cp	r30, r24
 1ae:	f9 07       	cpc	r31, r25
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <Clean_Data+0x4>
		input_data[i] = 0;
	}
}
 1b2:	08 95       	ret

000001b4 <GetCRC8Index>:

byte GetCRC8Index(byte *input_data) {
	uint8_t x = 0;
	
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		if (input_data[i] == END_LINE) {
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 81       	ld	r18, Z
 1b8:	2d 30       	cpi	r18, 0x0D	; 13
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <GetCRC8Index+0x14>
 1bc:	31 96       	adiw	r30, 0x01	; 1
			return i - 1;	
		}
		
		x++;
 1be:	91 e0       	ldi	r25, 0x01	; 1

byte GetCRC8Index(byte *input_data) {
	uint8_t x = 0;
	
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		if (input_data[i] == END_LINE) {
 1c0:	81 91       	ld	r24, Z+
 1c2:	8d 30       	cpi	r24, 0x0D	; 13
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <GetCRC8Index+0x1c>
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <GetCRC8Index+0x16>
}

byte GetCRC8Index(byte *input_data) {
	uint8_t x = 0;
	
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 1c8:	90 e0       	ldi	r25, 0x00	; 0
		if (input_data[i] == END_LINE) {
			return i - 1;	
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	89 0f       	add	r24, r25
 1ce:	08 95       	ret
		}
		
		x++;
 1d0:	9f 5f       	subi	r25, 0xFF	; 255
}

byte GetCRC8Index(byte *input_data) {
	uint8_t x = 0;
	
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 1d2:	90 32       	cpi	r25, 0x20	; 32
 1d4:	a9 f7       	brne	.-22     	; 0x1c0 <GetCRC8Index+0xc>
		if (input_data[i] == END_LINE) {
			return i - 1;	
		}
		
		x++;
 1d6:	80 e2       	ldi	r24, 0x20	; 32
	}
	
	return x;
}
 1d8:	08 95       	ret

000001da <__vector_6>:

ISR(WDT_vect) {
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	
	wdt_reset();
 1fc:	a8 95       	wdr
	
	WDTCSR = 1 << WDIE;
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	
	blink();
 204:	0e 94 bd 00 	call	0x17a	; 0x17a <blink>
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:

int main(void) {
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	a0 97       	sbiw	r28, 0x20	; 32
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
	
	sei();
 23e:	78 94       	sei
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 240:	99 e2       	ldi	r25, 0x29	; 41
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	a8 95       	wdr
 24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 24e:	0f be       	out	0x3f, r0	; 63
 250:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	wdt_enable(WDTO_8S);
	WDTCSR = 1 << WDIE;
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	//wdt_disable();
	//wdt_enable (WDTO_15MS);
	//setup_watchdog(WDTO_1S);
	//sei();      // разрешить прерывания
	
	DDRB = 0xFF; //PORTC as Output
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 25e:	fe 01       	movw	r30, r28
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	80 e2       	ldi	r24, 0x20	; 32
 264:	df 01       	movw	r26, r30
 266:	1d 92       	st	X+, r1
 268:	8a 95       	dec	r24
 26a:	e9 f7       	brne	.-6      	; 0x266 <main+0x3c>
	USART_Init();       
 26c:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Init>
	
	while(1) {
		USART_Receive_Str(input);
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	0e 94 78 00 	call	0xf0	; 0xf0 <USART_Receive_Str>
		byte index_crc8 = GetCRC8Index(input);
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GetCRC8Index>
 280:	18 2f       	mov	r17, r24
		
		unsigned char crc_value = Crc8(input_str, 6);
		input_str[8] = crc_value;
		*/
		
		input[index_crc8] = Crc8(input, index_crc8);
 282:	68 2f       	mov	r22, r24
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 4b 00 	call	0x96	; 0x96 <Crc8>
 28c:	e1 e0       	ldi	r30, 0x01	; 1
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ec 0f       	add	r30, r28
 292:	fd 1f       	adc	r31, r29
 294:	e1 0f       	add	r30, r17
 296:	f1 1d       	adc	r31, r1
 298:	80 83       	st	Z, r24
		
		USART_Transmit_Str(input);
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Transmit_Str>
		USART_Transmit_Str("\r");
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Transmit_Str>

		Clean_Data(input);
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Clean_Data>
 2b2:	de cf       	rjmp	.-68     	; 0x270 <main+0x46>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
