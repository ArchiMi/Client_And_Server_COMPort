
Protocol_1_0_0_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094e  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078d  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030b  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  8e:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
//#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)
#define FRAME_SIZE 32
#define END_LINE '9'

void USART_Init() {
	UBRR0H = BAUD_PRESCALE >> 8;
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE;
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0A |= (1<<U2X0); //Удвоение частоты
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	80 83       	st	Z, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //Разрешаем прием и передачу по USART - T/R ENable = True
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01) | (1 << UCSZ00);
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b6:	08 95       	ret

000000b8 <USART_Receive>:
}

unsigned char USART_Receive(void) {	
	while( !(UCSR0A & (1<<RXC0)) );
  b8:	e0 ec       	ldi	r30, 0xC0	; 192
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <USART_Receive+0x4>
	return UDR0;
  c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c6:	08 95       	ret

000000c8 <USART_Receive_Str>:

void USART_Receive_Str(char *calledstring) {
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	7c 01       	movw	r14, r24
  d6:	8c 01       	movw	r16, r24
	char ch;
	int i = 0;
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1) {		
		ch = USART_Receive();
  dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Receive>
		
		if (ch == END_LINE) {
  e0:	89 33       	cpi	r24, 0x39	; 57
  e2:	21 f4       	brne	.+8      	; 0xec <USART_Receive_Str+0x24>
			calledstring[i] = 0;	
  e4:	ce 0d       	add	r28, r14
  e6:	df 1d       	adc	r29, r15
  e8:	18 82       	st	Y, r1
			return;
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <USART_Receive_Str+0x2e>
		} else {
			calledstring[i] = ch;
  ec:	f8 01       	movw	r30, r16
  ee:	81 93       	st	Z+, r24
  f0:	8f 01       	movw	r16, r30
			i++;
  f2:	21 96       	adiw	r28, 0x01	; 1
		}
	}	
  f4:	f3 cf       	rjmp	.-26     	; 0xdc <USART_Receive_Str+0x14>
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	08 95       	ret

00000104 <USART_Send>:

void USART_Send(unsigned char data) {
	while( !(UCSR0A & (1<<UDRE0)) );
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	95 ff       	sbrs	r25, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <USART_Send+0x4>
	UDR0 = data;
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 112:	08 95       	ret

00000114 <USART_Transmit_Str>:
}

void USART_Transmit_Str(char *calledstring) {
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	fc 01       	movw	r30, r24
	for (int i = 0; i < FRAME_SIZE; i++) {
		if (calledstring[i] != 0)
 11e:	80 81       	ld	r24, Z
 120:	81 11       	cpse	r24, r1
 122:	0a c0       	rjmp	.+20     	; 0x138 <USART_Transmit_Str+0x24>
 124:	11 c0       	rjmp	.+34     	; 0x148 <USART_Transmit_Str+0x34>
 126:	89 91       	ld	r24, Y+
 128:	88 23       	and	r24, r24
 12a:	71 f0       	breq	.+28     	; 0x148 <USART_Transmit_Str+0x34>
			USART_Send(calledstring[i]);
 12c:	0e 94 82 00 	call	0x104	; 0x104 <USART_Send>
	while( !(UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
}

void USART_Transmit_Str(char *calledstring) {
	for (int i = 0; i < FRAME_SIZE; i++) {
 130:	0c 17       	cp	r16, r28
 132:	1d 07       	cpc	r17, r29
 134:	c1 f7       	brne	.-16     	; 0x126 <USART_Transmit_Str+0x12>
 136:	08 c0       	rjmp	.+16     	; 0x148 <USART_Transmit_Str+0x34>
 138:	8f 01       	movw	r16, r30
		if (calledstring[i] != 0)
			USART_Send(calledstring[i]);
 13a:	0e 94 82 00 	call	0x104	; 0x104 <USART_Send>
 13e:	e8 01       	movw	r28, r16
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	00 5e       	subi	r16, 0xE0	; 224
 144:	1f 4f       	sbci	r17, 0xFF	; 255
 146:	ef cf       	rjmp	.-34     	; 0x126 <USART_Transmit_Str+0x12>
		else 
			break;		
	}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <blink>:

void blink(){
	PORTB = 0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	81 ee       	ldi	r24, 0xE1	; 225
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <blink+0xa>
 164:	00 c0       	rjmp	.+0      	; 0x166 <blink+0x14>
 166:	00 00       	nop
	_delay_ms(100);
	PORTB= 0x00;
 168:	15 b8       	out	0x05, r1	; 5
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	81 ee       	ldi	r24, 0xE1	; 225
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <blink+0x1e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <blink+0x28>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <Clean_Data>:
	_delay_ms(100);
}

void Clean_Data(char *input_data) {
 17e:	fc 01       	movw	r30, r24
 180:	80 96       	adiw	r24, 0x20	; 32
	for (int i = 0; i < FRAME_SIZE; i++) {
		input_data[i] = 0;
 182:	11 92       	st	Z+, r1
	PORTB= 0x00;
	_delay_ms(100);
}

void Clean_Data(char *input_data) {
	for (int i = 0; i < FRAME_SIZE; i++) {
 184:	e8 17       	cp	r30, r24
 186:	f9 07       	cpc	r31, r25
 188:	e1 f7       	brne	.-8      	; 0x182 <Clean_Data+0x4>
		input_data[i] = 0;
	}
}
 18a:	08 95       	ret

0000018c <main>:

int main(void) {
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	c0 54       	subi	r28, 0x40	; 64
 196:	d1 09       	sbc	r29, r1
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTC as Output
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	84 b9       	out	0x04, r24	; 4
	
	char input[FRAME_SIZE] = { 0 };
 1a6:	fe 01       	movw	r30, r28
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	df 01       	movw	r26, r30
 1ae:	1d 92       	st	X+, r1
 1b0:	8a 95       	dec	r24
 1b2:	e9 f7       	brne	.-6      	; 0x1ae <main+0x22>
	USART_Init();       
 1b4:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
	while(1) {
		USART_Receive_Str(input);
		
		blink();
		
		char input_str[FRAME_SIZE] = { 0 };
 1b8:	68 94       	set
 1ba:	bb 24       	eor	r11, r11
 1bc:	b5 f8       	bld	r11, 5
 1be:	8e 01       	movw	r16, r28
 1c0:	0f 5d       	subi	r16, 0xDF	; 223
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
		input_str[0] = '0';
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f0 e3       	ldi	r31, 0x30	; 48
 1c8:	cf 2e       	mov	r12, r31
 1ca:	f0 2d       	mov	r31, r0
		input_str[1] = '1';
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f1 e3       	ldi	r31, 0x31	; 49
 1d0:	df 2e       	mov	r13, r31
 1d2:	f0 2d       	mov	r31, r0
		input_str[2] = '2';
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f2 e3       	ldi	r31, 0x32	; 50
 1d8:	ef 2e       	mov	r14, r31
 1da:	f0 2d       	mov	r31, r0
		input_str[3] = '3';
 1dc:	0f 2e       	mov	r0, r31
 1de:	f3 e3       	ldi	r31, 0x33	; 51
 1e0:	ff 2e       	mov	r15, r31
 1e2:	f0 2d       	mov	r31, r0
	
	char input[FRAME_SIZE] = { 0 };
	USART_Init();       
	
	while(1) {
		USART_Receive_Str(input);
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_Receive_Str>
		
		blink();
 1ec:	0e 94 a9 00 	call	0x152	; 0x152 <blink>
		
		char input_str[FRAME_SIZE] = { 0 };
 1f0:	f8 01       	movw	r30, r16
 1f2:	8b 2d       	mov	r24, r11
 1f4:	11 92       	st	Z+, r1
 1f6:	8a 95       	dec	r24
 1f8:	e9 f7       	brne	.-6      	; 0x1f4 <main+0x68>
		input_str[0] = '0';
 1fa:	c9 a2       	std	Y+33, r12	; 0x21
		input_str[1] = '1';
 1fc:	da a2       	std	Y+34, r13	; 0x22
		input_str[2] = '2';
 1fe:	eb a2       	std	Y+35, r14	; 0x23
		input_str[3] = '3';
 200:	fc a2       	std	Y+36, r15	; 0x24
		input_str[4] = '0';
 202:	cd a2       	std	Y+37, r12	; 0x25
		input_str[5] = '1';
 204:	de a2       	std	Y+38, r13	; 0x26
		input_str[6] = '2';
 206:	ef a2       	std	Y+39, r14	; 0x27
		input_str[7] = '3';
 208:	f8 a6       	std	Y+40, r15	; 0x28
			
		USART_Transmit_Str(input_str);
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 8a 00 	call	0x114	; 0x114 <USART_Transmit_Str>
		USART_Transmit_Str("\r");
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 8a 00 	call	0x114	; 0x114 <USART_Transmit_Str>
		
		Clean_Data(input_str);
 218:	c8 01       	movw	r24, r16
 21a:	0e 94 bf 00 	call	0x17e	; 0x17e <Clean_Data>
 21e:	e2 cf       	rjmp	.-60     	; 0x1e4 <main+0x58>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
