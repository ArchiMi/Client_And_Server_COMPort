
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  00000a96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001036  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000925  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000861  00000000  00000000  0000251b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000904  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 01 	call	0x328	; 0x328 <main>
  9e:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initArray>:
	}
				
	//a.array[9]  // Get and set byte to array element
	//a.used  // Number of elements
	freeArray(&a);
}
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	8b 01       	movw	r16, r22
  b2:	cb 01       	movw	r24, r22
  b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <malloc>
  b8:	99 83       	std	Y+1, r25	; 0x01
  ba:	88 83       	st	Y, r24
  bc:	1b 82       	std	Y+3, r1	; 0x03
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	1d 83       	std	Y+5, r17	; 0x05
  c2:	0c 83       	std	Y+4, r16	; 0x04
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	08 95       	ret

000000ce <insertArray>:
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	16 2f       	mov	r17, r22
  d8:	6a 81       	ldd	r22, Y+2	; 0x02
  da:	7b 81       	ldd	r23, Y+3	; 0x03
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	9d 81       	ldd	r25, Y+5	; 0x05
  e0:	68 17       	cp	r22, r24
  e2:	79 07       	cpc	r23, r25
  e4:	61 f4       	brne	.+24     	; 0xfe <insertArray+0x30>
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	7d 83       	std	Y+5, r23	; 0x05
  ec:	6c 83       	std	Y+4, r22	; 0x04
  ee:	88 81       	ld	r24, Y
  f0:	99 81       	ldd	r25, Y+1	; 0x01
  f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <realloc>
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	79 f0       	breq	.+30     	; 0x118 <insertArray+0x4a>
  fa:	99 83       	std	Y+1, r25	; 0x01
  fc:	88 83       	st	Y, r24
  fe:	28 81       	ld	r18, Y
 100:	39 81       	ldd	r19, Y+1	; 0x01
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	9b 81       	ldd	r25, Y+3	; 0x03
 106:	ac 01       	movw	r20, r24
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	5b 83       	std	Y+3, r21	; 0x03
 10e:	4a 83       	std	Y+2, r20	; 0x02
 110:	f9 01       	movw	r30, r18
 112:	e8 0f       	add	r30, r24
 114:	f9 1f       	adc	r31, r25
 116:	10 83       	st	Z, r17
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	08 95       	ret

00000120 <freeArray>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
 126:	88 81       	ld	r24, Y
 128:	99 81       	ldd	r25, Y+1	; 0x01
 12a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <free>
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	18 82       	st	Y, r1
 132:	1d 82       	std	Y+5, r1	; 0x05
 134:	1c 82       	std	Y+4, r1	; 0x04
 136:	1b 82       	std	Y+3, r1	; 0x03
 138:	1a 82       	std	Y+2, r1	; 0x02
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <USART_Init>:
 140:	78 94       	sei
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	a8 95       	wdr
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 156:	0f be       	out	0x3f, r0	; 63
 158:	84 b7       	in	r24, 0x34	; 52
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	84 bf       	out	0x34, r24	; 52
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	99 e2       	ldi	r25, 0x29	; 41
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	a8 95       	wdr
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 172:	90 e4       	ldi	r25, 0x40	; 64
 174:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 178:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 188:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 ef       	ldi	r24, 0xF9	; 249
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <USART_Init+0x52>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <USART_Init+0x5c>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <USART_Receive>:
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <USART_Receive+0x4>
 1aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ae:	08 95       	ret

000001b0 <USART_Receive_Str>:
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	8c 01       	movw	r16, r24
 1c0:	7b 01       	movw	r14, r22
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	0f 2e       	mov	r0, r31
 1c8:	fa e0       	ldi	r31, 0x0A	; 10
 1ca:	df 2e       	mov	r13, r31
 1cc:	f0 2d       	mov	r31, r0
 1ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <USART_Receive>
 1d2:	8a 33       	cpi	r24, 0x3A	; 58
 1d4:	01 f1       	breq	.+64     	; 0x216 <USART_Receive_Str+0x66>
 1d6:	20 97       	sbiw	r28, 0x00	; 0
 1d8:	d1 f3       	breq	.-12     	; 0x1ce <USART_Receive_Str+0x1e>
 1da:	8a 30       	cpi	r24, 0x0A	; 10
 1dc:	e1 f4       	brne	.+56     	; 0x216 <USART_Receive_Str+0x66>
 1de:	1c 16       	cp	r1, r28
 1e0:	1d 06       	cpc	r1, r29
 1e2:	cc f4       	brge	.+50     	; 0x216 <USART_Receive_Str+0x66>
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	80 81       	ld	r24, Z
 1ee:	8d 30       	cpi	r24, 0x0D	; 13
 1f0:	49 f4       	brne	.+18     	; 0x204 <USART_Receive_Str+0x54>
 1f2:	c0 0f       	add	r28, r16
 1f4:	d1 1f       	adc	r29, r17
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	88 83       	st	Y, r24
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	c7 01       	movw	r24, r14
 1fe:	0e 94 67 00 	call	0xce	; 0xce <insertArray>
 202:	15 c0       	rjmp	.+42     	; 0x22e <USART_Receive_Str+0x7e>
 204:	f8 01       	movw	r30, r16
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	d0 82       	st	Z, r13
 20c:	6d 2d       	mov	r22, r13
 20e:	c7 01       	movw	r24, r14
 210:	0e 94 67 00 	call	0xce	; 0xce <insertArray>
 214:	08 c0       	rjmp	.+16     	; 0x226 <USART_Receive_Str+0x76>
 216:	f8 01       	movw	r30, r16
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	80 83       	st	Z, r24
 21e:	68 2f       	mov	r22, r24
 220:	c7 01       	movw	r24, r14
 222:	0e 94 67 00 	call	0xce	; 0xce <insertArray>
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	c0 32       	cpi	r28, 0x20	; 32
 22a:	d1 05       	cpc	r29, r1
 22c:	81 f6       	brne	.-96     	; 0x1ce <USART_Receive_Str+0x1e>
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	ff 90       	pop	r15
 238:	ef 90       	pop	r14
 23a:	df 90       	pop	r13
 23c:	08 95       	ret

0000023e <USART_Send>:
 23e:	e0 ec       	ldi	r30, 0xC0	; 192
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	95 ff       	sbrs	r25, 5
 246:	fd cf       	rjmp	.-6      	; 0x242 <USART_Send+0x4>
 248:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24c:	08 95       	ret

0000024e <USART_Transmit_Str>:
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	db 01       	movw	r26, r22
 25c:	14 96       	adiw	r26, 0x04	; 4
 25e:	ed 90       	ld	r14, X+
 260:	fc 90       	ld	r15, X
 262:	15 97       	sbiw	r26, 0x05	; 5
 264:	1e 14       	cp	r1, r14
 266:	1f 04       	cpc	r1, r15
 268:	c4 f4       	brge	.+48     	; 0x29a <USART_Transmit_Str+0x4c>
 26a:	ed 91       	ld	r30, X+
 26c:	fc 91       	ld	r31, X
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	0a c0       	rjmp	.+20     	; 0x288 <USART_Transmit_Str+0x3a>
 274:	12 c0       	rjmp	.+36     	; 0x29a <USART_Transmit_Str+0x4c>
 276:	d8 01       	movw	r26, r16
 278:	ed 91       	ld	r30, X+
 27a:	fc 91       	ld	r31, X
 27c:	ec 0f       	add	r30, r28
 27e:	fd 1f       	adc	r31, r29
 280:	80 81       	ld	r24, Z
 282:	81 11       	cpse	r24, r1
 284:	04 c0       	rjmp	.+8      	; 0x28e <USART_Transmit_Str+0x40>
 286:	09 c0       	rjmp	.+18     	; 0x29a <USART_Transmit_Str+0x4c>
 288:	8b 01       	movw	r16, r22
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	0e 94 1f 01 	call	0x23e	; 0x23e <USART_Send>
 292:	21 96       	adiw	r28, 0x01	; 1
 294:	ec 16       	cp	r14, r28
 296:	fd 06       	cpc	r15, r29
 298:	71 f7       	brne	.-36     	; 0x276 <USART_Transmit_Str+0x28>
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	08 95       	ret

000002a8 <blink_WD>:
 2a8:	2c 9a       	sbi	0x05, 4	; 5
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <blink_WD+0x6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <blink_WD+0xc>
 2b4:	00 00       	nop
 2b6:	2c 98       	cbi	0x05, 4	; 5
 2b8:	08 95       	ret

000002ba <blink>:
 2ba:	2d 9a       	sbi	0x05, 5	; 5
 2bc:	8f e9       	ldi	r24, 0x9F	; 159
 2be:	9f e0       	ldi	r25, 0x0F	; 15
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <blink+0x6>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <blink+0xc>
 2c6:	00 00       	nop
 2c8:	2d 98       	cbi	0x05, 5	; 5
 2ca:	08 95       	ret

000002cc <Clean_Data>:
 2cc:	fc 01       	movw	r30, r24
 2ce:	80 96       	adiw	r24, 0x20	; 32
 2d0:	11 92       	st	Z+, r1
 2d2:	e8 17       	cp	r30, r24
 2d4:	f9 07       	cpc	r31, r25
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <Clean_Data+0x4>
 2d8:	08 95       	ret

000002da <__vector_6>:
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
 2fc:	a8 95       	wdr
 2fe:	0e 94 a0 00 	call	0x140	; 0x140 <USART_Init>
 302:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_WD>
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <main>:

int main(void) {
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	c6 54       	subi	r28, 0x46	; 70
 332:	d1 09       	sbc	r29, r1
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTB as Output
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 342:	fe 01       	movw	r30, r28
 344:	31 96       	adiw	r30, 0x01	; 1
 346:	80 e2       	ldi	r24, 0x20	; 32
 348:	df 01       	movw	r26, r30
 34a:	1d 92       	st	X+, r1
 34c:	8a 95       	dec	r24
 34e:	e9 f7       	brne	.-6      	; 0x34a <main+0x22>
	
	USART_Init();       
 350:	0e 94 a0 00 	call	0x140	; 0x140 <USART_Init>
			
		} else /* ERROR */ {
			// Info Blink
			//blink();
	
			byte answer[FRAME_SIZE] = { 0 };
 354:	7e 01       	movw	r14, r28
 356:	b1 e2       	ldi	r27, 0x21	; 33
 358:	eb 0e       	add	r14, r27
 35a:	f1 1c       	adc	r15, r1
			answer[0] = CHR_COLON;
			answer[1] = crc8;
			answer[2] = input[index_crc8];
			answer[3] = index_crc8;
			answer[4] = "2";
 35c:	0f 2e       	mov	r0, r31
 35e:	f6 e0       	ldi	r31, 0x06	; 6
 360:	8f 2e       	mov	r8, r31
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	9f 2e       	mov	r9, r31
 366:	f0 2d       	mov	r31, r0
			answer[5] = "3";
 368:	0f 2e       	mov	r0, r31
 36a:	f8 e0       	ldi	r31, 0x08	; 8
 36c:	af 2e       	mov	r10, r31
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	bf 2e       	mov	r11, r31
 372:	f0 2d       	mov	r31, r0
			answer[6] = "4";
 374:	0f 2e       	mov	r0, r31
 376:	fa e0       	ldi	r31, 0x0A	; 10
 378:	cf 2e       	mov	r12, r31
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	df 2e       	mov	r13, r31
 37e:	f0 2d       	mov	r31, r0
			answer[7] = CHR_COLON;
			answer[8] = CHR_CARRET_RETURN;
 380:	0f 2e       	mov	r0, r31
 382:	fd e0       	ldi	r31, 0x0D	; 13
 384:	7f 2e       	mov	r7, r31
 386:	f0 2d       	mov	r31, r0
			answer[9] = CHR_LINE_FEED;
 388:	0a e0       	ldi	r16, 0x0A	; 10
	USART_Init();       
	
	while(1) {
		// Init Array
		Array inputArray;
		initArray(&inputArray, 1000);
 38a:	68 ee       	ldi	r22, 0xE8	; 232
 38c:	73 e0       	ldi	r23, 0x03	; 3
 38e:	ce 01       	movw	r24, r28
 390:	8f 5b       	subi	r24, 0xBF	; 191
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	0e 94 53 00 	call	0xa6	; 0xa6 <initArray>
		
		// Get request
		USART_Receive_Str(input, &inputArray);
 398:	be 01       	movw	r22, r28
 39a:	6f 5b       	subi	r22, 0xBF	; 191
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Receive_Str>
		
		// Get CRC8 byte index
		byte index_crc8 = GetCRC8Index(input, FRAME_SIZE, CHR_COLON);
 3a6:	4a e3       	ldi	r20, 0x3A	; 58
 3a8:	60 e2       	ldi	r22, 0x20	; 32
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 3b 02 	call	0x476	; 0x476 <GetCRC8Index>
 3b2:	18 2f       	mov	r17, r24
			
		// Add CRC8 byte
		byte crc8 = Crc8(input, index_crc8);
 3b4:	68 2f       	mov	r22, r24
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 27 02 	call	0x44e	; 0x44e <Crc8>
		//input[index_crc8] = crc8;
		
		if (input[index_crc8] == crc8) {
 3be:	e1 e0       	ldi	r30, 0x01	; 1
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ec 0f       	add	r30, r28
 3c4:	fd 1f       	adc	r31, r29
 3c6:	e1 0f       	add	r30, r17
 3c8:	f1 1d       	adc	r31, r1
 3ca:	90 81       	ld	r25, Z
 3cc:	89 13       	cpse	r24, r25
 3ce:	0f c0       	rjmp	.+30     	; 0x3ee <main+0xc6>
			USART_Transmit_Str(output);
			USART_Transmit_Str(CHR_CARRET_RETURN);
			*/
			
			// Send response ( ECHO )
			USART_Transmit_Str(input, &inputArray);
 3d0:	be 01       	movw	r22, r28
 3d2:	6f 5b       	subi	r22, 0xBF	; 191
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit_Str>
			//USART_Transmit_Str(CHR_COLON);
			USART_Transmit_Str(CHR_CARRET_RETURN, &inputArray);
 3de:	be 01       	movw	r22, r28
 3e0:	6f 5b       	subi	r22, 0xBF	; 191
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	8d e0       	ldi	r24, 0x0D	; 13
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit_Str>
 3ec:	24 c0       	rjmp	.+72     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			
		} else /* ERROR */ {
			// Info Blink
			//blink();
	
			byte answer[FRAME_SIZE] = { 0 };
 3ee:	20 e2       	ldi	r18, 0x20	; 32
 3f0:	f7 01       	movw	r30, r14
 3f2:	11 92       	st	Z+, r1
 3f4:	2a 95       	dec	r18
 3f6:	e9 f7       	brne	.-6      	; 0x3f2 <main+0xca>
			answer[0] = CHR_COLON;
 3f8:	2a e3       	ldi	r18, 0x3A	; 58
 3fa:	29 a3       	std	Y+33, r18	; 0x21
			answer[1] = crc8;
 3fc:	8a a3       	std	Y+34, r24	; 0x22
			answer[2] = input[index_crc8];
 3fe:	9b a3       	std	Y+35, r25	; 0x23
			answer[3] = index_crc8;
 400:	1c a3       	std	Y+36, r17	; 0x24
			answer[4] = "2";
 402:	8d a2       	std	Y+37, r8	; 0x25
			answer[5] = "3";
 404:	ae a2       	std	Y+38, r10	; 0x26
			answer[6] = "4";
 406:	cf a2       	std	Y+39, r12	; 0x27
			answer[7] = CHR_COLON;
 408:	28 a7       	std	Y+40, r18	; 0x28
			answer[8] = CHR_CARRET_RETURN;
 40a:	79 a6       	std	Y+41, r7	; 0x29
			answer[9] = CHR_LINE_FEED;
 40c:	0a a7       	std	Y+42, r16	; 0x2a
			
			// Send response
			USART_Transmit_Str(answer, &inputArray);
 40e:	be 01       	movw	r22, r28
 410:	6f 5b       	subi	r22, 0xBF	; 191
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	c7 01       	movw	r24, r14
 416:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit_Str>
			
			// End answer message chars
			USART_Transmit_Str(CHR_CARRET_RETURN, &inputArray);
 41a:	be 01       	movw	r22, r28
 41c:	6f 5b       	subi	r22, 0xBF	; 191
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit_Str>
			USART_Transmit_Str(CHR_LINE_FEED, &inputArray);
 428:	be 01       	movw	r22, r28
 42a:	6f 5b       	subi	r22, 0xBF	; 191
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit_Str>
		}
		
		// Clear array
		Clean_Data(input);
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	0e 94 66 01 	call	0x2cc	; 0x2cc <Clean_Data>
		
		// Free Array
		freeArray(&inputArray);	
 43e:	ce 01       	movw	r24, r28
 440:	8f 5b       	subi	r24, 0xBF	; 191
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	0e 94 90 00 	call	0x120	; 0x120 <freeArray>
		
		// Info Blink
		blink();
 448:	0e 94 5d 01 	call	0x2ba	; 0x2ba <blink>
		
		// Info Blink
		//blinkDebig();
	}
 44c:	9e cf       	rjmp	.-196    	; 0x38a <main+0x62>

0000044e <Crc8>:
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 44e:	66 23       	and	r22, r22
 450:	81 f0       	breq	.+32     	; 0x472 <Crc8+0x24>
 452:	dc 01       	movw	r26, r24
 454:	9c 01       	movw	r18, r24
 456:	26 0f       	add	r18, r22
 458:	31 1d       	adc	r19, r1
 45a:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
 45c:	ed 91       	ld	r30, X+
 45e:	8e 27       	eor	r24, r30
 460:	e8 2f       	mov	r30, r24
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	e4 5f       	subi	r30, 0xF4	; 244
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	80 81       	ld	r24, Z
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 46a:	a2 17       	cp	r26, r18
 46c:	b3 07       	cpc	r27, r19
 46e:	b1 f7       	brne	.-20     	; 0x45c <Crc8+0xe>
 470:	08 95       	ret
	0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
 472:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
	}

	return crc;
}
 474:	08 95       	ret

00000476 <GetCRC8Index>:

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 476:	66 23       	and	r22, r22
 478:	99 f0       	breq	.+38     	; 0x4a0 <GetCRC8Index+0x2a>
 47a:	e8 2f       	mov	r30, r24
 47c:	f9 2f       	mov	r31, r25
 47e:	90 e0       	ldi	r25, 0x00	; 0
		// Need many checkeds
		if (input_data[i] == CHR_COLON && i > 0) {
 480:	21 91       	ld	r18, Z+
 482:	2a 33       	cpi	r18, 0x3A	; 58
 484:	41 f4       	brne	.+16     	; 0x496 <GetCRC8Index+0x20>
 486:	99 23       	and	r25, r25
 488:	31 f0       	breq	.+12     	; 0x496 <GetCRC8Index+0x20>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
 48a:	80 81       	ld	r24, Z
 48c:	8d 30       	cpi	r24, 0x0D	; 13
 48e:	19 f4       	brne	.+6      	; 0x496 <GetCRC8Index+0x20>
				return i - 1;
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	89 0f       	add	r24, r25
 494:	08 95       	ret
			}
		}
		
		x++;
 496:	9f 5f       	subi	r25, 0xFF	; 255

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 498:	69 13       	cpse	r22, r25
 49a:	f2 cf       	rjmp	.-28     	; 0x480 <GetCRC8Index+0xa>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
				return i - 1;
			}
		}
		
		x++;
 49c:	86 2f       	mov	r24, r22
 49e:	08 95       	ret
}

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
		
		x++;
	}
	
	return x;
 4a2:	08 95       	ret

000004a4 <malloc>:
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	91 05       	cpc	r25, r1
 4b0:	10 f4       	brcc	.+4      	; 0x4b6 <malloc+0x12>
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__flp>
 4ba:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__flp+0x1>
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	30 97       	sbiw	r30, 0x00	; 0
 4c8:	19 f1       	breq	.+70     	; 0x510 <malloc+0x6c>
 4ca:	40 81       	ld	r20, Z
 4cc:	51 81       	ldd	r21, Z+1	; 0x01
 4ce:	02 81       	ldd	r16, Z+2	; 0x02
 4d0:	13 81       	ldd	r17, Z+3	; 0x03
 4d2:	48 17       	cp	r20, r24
 4d4:	59 07       	cpc	r21, r25
 4d6:	c8 f0       	brcs	.+50     	; 0x50a <malloc+0x66>
 4d8:	84 17       	cp	r24, r20
 4da:	95 07       	cpc	r25, r21
 4dc:	69 f4       	brne	.+26     	; 0x4f8 <malloc+0x54>
 4de:	10 97       	sbiw	r26, 0x00	; 0
 4e0:	31 f0       	breq	.+12     	; 0x4ee <malloc+0x4a>
 4e2:	12 96       	adiw	r26, 0x02	; 2
 4e4:	0c 93       	st	X, r16
 4e6:	12 97       	sbiw	r26, 0x02	; 2
 4e8:	13 96       	adiw	r26, 0x03	; 3
 4ea:	1c 93       	st	X, r17
 4ec:	27 c0       	rjmp	.+78     	; 0x53c <malloc+0x98>
 4ee:	00 93 0e 02 	sts	0x020E, r16	; 0x80020e <__flp>
 4f2:	10 93 0f 02 	sts	0x020F, r17	; 0x80020f <__flp+0x1>
 4f6:	22 c0       	rjmp	.+68     	; 0x53c <malloc+0x98>
 4f8:	21 15       	cp	r18, r1
 4fa:	31 05       	cpc	r19, r1
 4fc:	19 f0       	breq	.+6      	; 0x504 <malloc+0x60>
 4fe:	42 17       	cp	r20, r18
 500:	53 07       	cpc	r21, r19
 502:	18 f4       	brcc	.+6      	; 0x50a <malloc+0x66>
 504:	9a 01       	movw	r18, r20
 506:	bd 01       	movw	r22, r26
 508:	ef 01       	movw	r28, r30
 50a:	df 01       	movw	r26, r30
 50c:	f8 01       	movw	r30, r16
 50e:	db cf       	rjmp	.-74     	; 0x4c6 <malloc+0x22>
 510:	21 15       	cp	r18, r1
 512:	31 05       	cpc	r19, r1
 514:	f9 f0       	breq	.+62     	; 0x554 <malloc+0xb0>
 516:	28 1b       	sub	r18, r24
 518:	39 0b       	sbc	r19, r25
 51a:	24 30       	cpi	r18, 0x04	; 4
 51c:	31 05       	cpc	r19, r1
 51e:	80 f4       	brcc	.+32     	; 0x540 <malloc+0x9c>
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	9b 81       	ldd	r25, Y+3	; 0x03
 524:	61 15       	cp	r22, r1
 526:	71 05       	cpc	r23, r1
 528:	21 f0       	breq	.+8      	; 0x532 <malloc+0x8e>
 52a:	fb 01       	movw	r30, r22
 52c:	93 83       	std	Z+3, r25	; 0x03
 52e:	82 83       	std	Z+2, r24	; 0x02
 530:	04 c0       	rjmp	.+8      	; 0x53a <malloc+0x96>
 532:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__flp+0x1>
 536:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__flp>
 53a:	fe 01       	movw	r30, r28
 53c:	32 96       	adiw	r30, 0x02	; 2
 53e:	44 c0       	rjmp	.+136    	; 0x5c8 <malloc+0x124>
 540:	fe 01       	movw	r30, r28
 542:	e2 0f       	add	r30, r18
 544:	f3 1f       	adc	r31, r19
 546:	81 93       	st	Z+, r24
 548:	91 93       	st	Z+, r25
 54a:	22 50       	subi	r18, 0x02	; 2
 54c:	31 09       	sbc	r19, r1
 54e:	39 83       	std	Y+1, r19	; 0x01
 550:	28 83       	st	Y, r18
 552:	3a c0       	rjmp	.+116    	; 0x5c8 <malloc+0x124>
 554:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
 558:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
 55c:	23 2b       	or	r18, r19
 55e:	41 f4       	brne	.+16     	; 0x570 <malloc+0xcc>
 560:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 564:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 568:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <__data_end+0x1>
 56c:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <__data_end>
 570:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 574:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 578:	21 15       	cp	r18, r1
 57a:	31 05       	cpc	r19, r1
 57c:	41 f4       	brne	.+16     	; 0x58e <malloc+0xea>
 57e:	2d b7       	in	r18, 0x3d	; 61
 580:	3e b7       	in	r19, 0x3e	; 62
 582:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 586:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 58a:	24 1b       	sub	r18, r20
 58c:	35 0b       	sbc	r19, r21
 58e:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 592:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 596:	e2 17       	cp	r30, r18
 598:	f3 07       	cpc	r31, r19
 59a:	a0 f4       	brcc	.+40     	; 0x5c4 <malloc+0x120>
 59c:	2e 1b       	sub	r18, r30
 59e:	3f 0b       	sbc	r19, r31
 5a0:	28 17       	cp	r18, r24
 5a2:	39 07       	cpc	r19, r25
 5a4:	78 f0       	brcs	.+30     	; 0x5c4 <malloc+0x120>
 5a6:	ac 01       	movw	r20, r24
 5a8:	4e 5f       	subi	r20, 0xFE	; 254
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	24 17       	cp	r18, r20
 5ae:	35 07       	cpc	r19, r21
 5b0:	48 f0       	brcs	.+18     	; 0x5c4 <malloc+0x120>
 5b2:	4e 0f       	add	r20, r30
 5b4:	5f 1f       	adc	r21, r31
 5b6:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <__data_end+0x1>
 5ba:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <__data_end>
 5be:	81 93       	st	Z+, r24
 5c0:	91 93       	st	Z+, r25
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <malloc+0x124>
 5c4:	e0 e0       	ldi	r30, 0x00	; 0
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	cf 01       	movw	r24, r30
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <free>:
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	09 f4       	brne	.+2      	; 0x5de <free+0xa>
 5dc:	81 c0       	rjmp	.+258    	; 0x6e0 <free+0x10c>
 5de:	fc 01       	movw	r30, r24
 5e0:	32 97       	sbiw	r30, 0x02	; 2
 5e2:	13 82       	std	Z+3, r1	; 0x03
 5e4:	12 82       	std	Z+2, r1	; 0x02
 5e6:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__flp>
 5ea:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__flp+0x1>
 5ee:	10 97       	sbiw	r26, 0x00	; 0
 5f0:	81 f4       	brne	.+32     	; 0x612 <free+0x3e>
 5f2:	20 81       	ld	r18, Z
 5f4:	31 81       	ldd	r19, Z+1	; 0x01
 5f6:	82 0f       	add	r24, r18
 5f8:	93 1f       	adc	r25, r19
 5fa:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
 5fe:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
 602:	28 17       	cp	r18, r24
 604:	39 07       	cpc	r19, r25
 606:	51 f5       	brne	.+84     	; 0x65c <free+0x88>
 608:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__data_end+0x1>
 60c:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__data_end>
 610:	67 c0       	rjmp	.+206    	; 0x6e0 <free+0x10c>
 612:	ed 01       	movw	r28, r26
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	ce 17       	cp	r28, r30
 61a:	df 07       	cpc	r29, r31
 61c:	40 f4       	brcc	.+16     	; 0x62e <free+0x5a>
 61e:	4a 81       	ldd	r20, Y+2	; 0x02
 620:	5b 81       	ldd	r21, Y+3	; 0x03
 622:	9e 01       	movw	r18, r28
 624:	41 15       	cp	r20, r1
 626:	51 05       	cpc	r21, r1
 628:	f1 f0       	breq	.+60     	; 0x666 <free+0x92>
 62a:	ea 01       	movw	r28, r20
 62c:	f5 cf       	rjmp	.-22     	; 0x618 <free+0x44>
 62e:	d3 83       	std	Z+3, r29	; 0x03
 630:	c2 83       	std	Z+2, r28	; 0x02
 632:	40 81       	ld	r20, Z
 634:	51 81       	ldd	r21, Z+1	; 0x01
 636:	84 0f       	add	r24, r20
 638:	95 1f       	adc	r25, r21
 63a:	c8 17       	cp	r28, r24
 63c:	d9 07       	cpc	r29, r25
 63e:	59 f4       	brne	.+22     	; 0x656 <free+0x82>
 640:	88 81       	ld	r24, Y
 642:	99 81       	ldd	r25, Y+1	; 0x01
 644:	84 0f       	add	r24, r20
 646:	95 1f       	adc	r25, r21
 648:	02 96       	adiw	r24, 0x02	; 2
 64a:	91 83       	std	Z+1, r25	; 0x01
 64c:	80 83       	st	Z, r24
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	9b 81       	ldd	r25, Y+3	; 0x03
 652:	93 83       	std	Z+3, r25	; 0x03
 654:	82 83       	std	Z+2, r24	; 0x02
 656:	21 15       	cp	r18, r1
 658:	31 05       	cpc	r19, r1
 65a:	29 f4       	brne	.+10     	; 0x666 <free+0x92>
 65c:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__flp+0x1>
 660:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__flp>
 664:	3d c0       	rjmp	.+122    	; 0x6e0 <free+0x10c>
 666:	e9 01       	movw	r28, r18
 668:	fb 83       	std	Y+3, r31	; 0x03
 66a:	ea 83       	std	Y+2, r30	; 0x02
 66c:	49 91       	ld	r20, Y+
 66e:	59 91       	ld	r21, Y+
 670:	c4 0f       	add	r28, r20
 672:	d5 1f       	adc	r29, r21
 674:	ec 17       	cp	r30, r28
 676:	fd 07       	cpc	r31, r29
 678:	61 f4       	brne	.+24     	; 0x692 <free+0xbe>
 67a:	80 81       	ld	r24, Z
 67c:	91 81       	ldd	r25, Z+1	; 0x01
 67e:	84 0f       	add	r24, r20
 680:	95 1f       	adc	r25, r21
 682:	02 96       	adiw	r24, 0x02	; 2
 684:	e9 01       	movw	r28, r18
 686:	99 83       	std	Y+1, r25	; 0x01
 688:	88 83       	st	Y, r24
 68a:	82 81       	ldd	r24, Z+2	; 0x02
 68c:	93 81       	ldd	r25, Z+3	; 0x03
 68e:	9b 83       	std	Y+3, r25	; 0x03
 690:	8a 83       	std	Y+2, r24	; 0x02
 692:	e0 e0       	ldi	r30, 0x00	; 0
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	12 96       	adiw	r26, 0x02	; 2
 698:	8d 91       	ld	r24, X+
 69a:	9c 91       	ld	r25, X
 69c:	13 97       	sbiw	r26, 0x03	; 3
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	19 f0       	breq	.+6      	; 0x6a8 <free+0xd4>
 6a2:	fd 01       	movw	r30, r26
 6a4:	dc 01       	movw	r26, r24
 6a6:	f7 cf       	rjmp	.-18     	; 0x696 <free+0xc2>
 6a8:	8d 91       	ld	r24, X+
 6aa:	9c 91       	ld	r25, X
 6ac:	11 97       	sbiw	r26, 0x01	; 1
 6ae:	9d 01       	movw	r18, r26
 6b0:	2e 5f       	subi	r18, 0xFE	; 254
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	82 0f       	add	r24, r18
 6b6:	93 1f       	adc	r25, r19
 6b8:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__data_end>
 6bc:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__data_end+0x1>
 6c0:	28 17       	cp	r18, r24
 6c2:	39 07       	cpc	r19, r25
 6c4:	69 f4       	brne	.+26     	; 0x6e0 <free+0x10c>
 6c6:	30 97       	sbiw	r30, 0x00	; 0
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <free+0x100>
 6ca:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <__flp+0x1>
 6ce:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__flp>
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <free+0x104>
 6d4:	13 82       	std	Z+3, r1	; 0x03
 6d6:	12 82       	std	Z+2, r1	; 0x02
 6d8:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <__data_end+0x1>
 6dc:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <__data_end>
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <realloc>:
 6e6:	a0 e0       	ldi	r26, 0x00	; 0
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e9 e7       	ldi	r30, 0x79	; 121
 6ec:	f3 e0       	ldi	r31, 0x03	; 3
 6ee:	0c 94 46 04 	jmp	0x88c	; 0x88c <__prologue_saves__+0x8>
 6f2:	ec 01       	movw	r28, r24
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	21 f4       	brne	.+8      	; 0x700 <realloc+0x1a>
 6f8:	cb 01       	movw	r24, r22
 6fa:	0e 94 52 02 	call	0x4a4	; 0x4a4 <malloc>
 6fe:	b4 c0       	rjmp	.+360    	; 0x868 <realloc+0x182>
 700:	fc 01       	movw	r30, r24
 702:	e6 0f       	add	r30, r22
 704:	f7 1f       	adc	r31, r23
 706:	9c 01       	movw	r18, r24
 708:	22 50       	subi	r18, 0x02	; 2
 70a:	31 09       	sbc	r19, r1
 70c:	e2 17       	cp	r30, r18
 70e:	f3 07       	cpc	r31, r19
 710:	08 f4       	brcc	.+2      	; 0x714 <realloc+0x2e>
 712:	a8 c0       	rjmp	.+336    	; 0x864 <realloc+0x17e>
 714:	d9 01       	movw	r26, r18
 716:	0d 91       	ld	r16, X+
 718:	1c 91       	ld	r17, X
 71a:	11 97       	sbiw	r26, 0x01	; 1
 71c:	06 17       	cp	r16, r22
 71e:	17 07       	cpc	r17, r23
 720:	b0 f0       	brcs	.+44     	; 0x74e <realloc+0x68>
 722:	05 30       	cpi	r16, 0x05	; 5
 724:	11 05       	cpc	r17, r1
 726:	08 f4       	brcc	.+2      	; 0x72a <realloc+0x44>
 728:	9b c0       	rjmp	.+310    	; 0x860 <realloc+0x17a>
 72a:	c8 01       	movw	r24, r16
 72c:	04 97       	sbiw	r24, 0x04	; 4
 72e:	86 17       	cp	r24, r22
 730:	97 07       	cpc	r25, r23
 732:	08 f4       	brcc	.+2      	; 0x736 <realloc+0x50>
 734:	95 c0       	rjmp	.+298    	; 0x860 <realloc+0x17a>
 736:	02 50       	subi	r16, 0x02	; 2
 738:	11 09       	sbc	r17, r1
 73a:	06 1b       	sub	r16, r22
 73c:	17 0b       	sbc	r17, r23
 73e:	01 93       	st	Z+, r16
 740:	11 93       	st	Z+, r17
 742:	6d 93       	st	X+, r22
 744:	7c 93       	st	X, r23
 746:	cf 01       	movw	r24, r30
 748:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <free>
 74c:	89 c0       	rjmp	.+274    	; 0x860 <realloc+0x17a>
 74e:	5b 01       	movw	r10, r22
 750:	a0 1a       	sub	r10, r16
 752:	b1 0a       	sbc	r11, r17
 754:	4c 01       	movw	r8, r24
 756:	80 0e       	add	r8, r16
 758:	91 1e       	adc	r9, r17
 75a:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__flp>
 75e:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__flp+0x1>
 762:	61 2c       	mov	r6, r1
 764:	71 2c       	mov	r7, r1
 766:	e1 2c       	mov	r14, r1
 768:	f1 2c       	mov	r15, r1
 76a:	10 97       	sbiw	r26, 0x00	; 0
 76c:	09 f4       	brne	.+2      	; 0x770 <realloc+0x8a>
 76e:	46 c0       	rjmp	.+140    	; 0x7fc <realloc+0x116>
 770:	8d 91       	ld	r24, X+
 772:	9c 91       	ld	r25, X
 774:	11 97       	sbiw	r26, 0x01	; 1
 776:	a8 15       	cp	r26, r8
 778:	b9 05       	cpc	r27, r9
 77a:	b1 f5       	brne	.+108    	; 0x7e8 <realloc+0x102>
 77c:	6c 01       	movw	r12, r24
 77e:	42 e0       	ldi	r20, 0x02	; 2
 780:	c4 0e       	add	r12, r20
 782:	d1 1c       	adc	r13, r1
 784:	ca 14       	cp	r12, r10
 786:	db 04       	cpc	r13, r11
 788:	78 f1       	brcs	.+94     	; 0x7e8 <realloc+0x102>
 78a:	4c 01       	movw	r8, r24
 78c:	8a 18       	sub	r8, r10
 78e:	9b 08       	sbc	r9, r11
 790:	64 01       	movw	r12, r8
 792:	42 e0       	ldi	r20, 0x02	; 2
 794:	c4 0e       	add	r12, r20
 796:	d1 1c       	adc	r13, r1
 798:	12 96       	adiw	r26, 0x02	; 2
 79a:	bc 90       	ld	r11, X
 79c:	12 97       	sbiw	r26, 0x02	; 2
 79e:	13 96       	adiw	r26, 0x03	; 3
 7a0:	ac 91       	ld	r26, X
 7a2:	b5 e0       	ldi	r27, 0x05	; 5
 7a4:	cb 16       	cp	r12, r27
 7a6:	d1 04       	cpc	r13, r1
 7a8:	40 f0       	brcs	.+16     	; 0x7ba <realloc+0xd4>
 7aa:	b2 82       	std	Z+2, r11	; 0x02
 7ac:	a3 83       	std	Z+3, r26	; 0x03
 7ae:	91 82       	std	Z+1, r9	; 0x01
 7b0:	80 82       	st	Z, r8
 7b2:	d9 01       	movw	r26, r18
 7b4:	6d 93       	st	X+, r22
 7b6:	7c 93       	st	X, r23
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <realloc+0xe6>
 7ba:	0e 5f       	subi	r16, 0xFE	; 254
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	80 0f       	add	r24, r16
 7c0:	91 1f       	adc	r25, r17
 7c2:	f9 01       	movw	r30, r18
 7c4:	91 83       	std	Z+1, r25	; 0x01
 7c6:	80 83       	st	Z, r24
 7c8:	eb 2d       	mov	r30, r11
 7ca:	fa 2f       	mov	r31, r26
 7cc:	e1 14       	cp	r14, r1
 7ce:	f1 04       	cpc	r15, r1
 7d0:	31 f0       	breq	.+12     	; 0x7de <realloc+0xf8>
 7d2:	d7 01       	movw	r26, r14
 7d4:	13 96       	adiw	r26, 0x03	; 3
 7d6:	fc 93       	st	X, r31
 7d8:	ee 93       	st	-X, r30
 7da:	12 97       	sbiw	r26, 0x02	; 2
 7dc:	41 c0       	rjmp	.+130    	; 0x860 <realloc+0x17a>
 7de:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__flp+0x1>
 7e2:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__flp>
 7e6:	3c c0       	rjmp	.+120    	; 0x860 <realloc+0x17a>
 7e8:	68 16       	cp	r6, r24
 7ea:	79 06       	cpc	r7, r25
 7ec:	08 f4       	brcc	.+2      	; 0x7f0 <realloc+0x10a>
 7ee:	3c 01       	movw	r6, r24
 7f0:	7d 01       	movw	r14, r26
 7f2:	12 96       	adiw	r26, 0x02	; 2
 7f4:	0d 90       	ld	r0, X+
 7f6:	bc 91       	ld	r27, X
 7f8:	a0 2d       	mov	r26, r0
 7fa:	b7 cf       	rjmp	.-146    	; 0x76a <realloc+0x84>
 7fc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 800:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 804:	88 16       	cp	r8, r24
 806:	99 06       	cpc	r9, r25
 808:	e1 f4       	brne	.+56     	; 0x842 <realloc+0x15c>
 80a:	66 16       	cp	r6, r22
 80c:	77 06       	cpc	r7, r23
 80e:	c8 f4       	brcc	.+50     	; 0x842 <realloc+0x15c>
 810:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 814:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 818:	00 97       	sbiw	r24, 0x00	; 0
 81a:	41 f4       	brne	.+16     	; 0x82c <realloc+0x146>
 81c:	8d b7       	in	r24, 0x3d	; 61
 81e:	9e b7       	in	r25, 0x3e	; 62
 820:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 824:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 828:	84 1b       	sub	r24, r20
 82a:	95 0b       	sbc	r25, r21
 82c:	e8 17       	cp	r30, r24
 82e:	f9 07       	cpc	r31, r25
 830:	c8 f4       	brcc	.+50     	; 0x864 <realloc+0x17e>
 832:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__data_end+0x1>
 836:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__data_end>
 83a:	f9 01       	movw	r30, r18
 83c:	71 83       	std	Z+1, r23	; 0x01
 83e:	60 83       	st	Z, r22
 840:	0f c0       	rjmp	.+30     	; 0x860 <realloc+0x17a>
 842:	cb 01       	movw	r24, r22
 844:	0e 94 52 02 	call	0x4a4	; 0x4a4 <malloc>
 848:	7c 01       	movw	r14, r24
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	59 f0       	breq	.+22     	; 0x864 <realloc+0x17e>
 84e:	a8 01       	movw	r20, r16
 850:	be 01       	movw	r22, r28
 852:	0e 94 39 04 	call	0x872	; 0x872 <memcpy>
 856:	ce 01       	movw	r24, r28
 858:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <free>
 85c:	c7 01       	movw	r24, r14
 85e:	04 c0       	rjmp	.+8      	; 0x868 <realloc+0x182>
 860:	ce 01       	movw	r24, r28
 862:	02 c0       	rjmp	.+4      	; 0x868 <realloc+0x182>
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
 86c:	ee e0       	ldi	r30, 0x0E	; 14
 86e:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__epilogue_restores__+0x8>

00000872 <memcpy>:
 872:	fb 01       	movw	r30, r22
 874:	dc 01       	movw	r26, r24
 876:	02 c0       	rjmp	.+4      	; 0x87c <memcpy+0xa>
 878:	01 90       	ld	r0, Z+
 87a:	0d 92       	st	X+, r0
 87c:	41 50       	subi	r20, 0x01	; 1
 87e:	50 40       	sbci	r21, 0x00	; 0
 880:	d8 f7       	brcc	.-10     	; 0x878 <memcpy+0x6>
 882:	08 95       	ret

00000884 <__prologue_saves__>:
 884:	2f 92       	push	r2
 886:	3f 92       	push	r3
 888:	4f 92       	push	r4
 88a:	5f 92       	push	r5
 88c:	6f 92       	push	r6
 88e:	7f 92       	push	r7
 890:	8f 92       	push	r8
 892:	9f 92       	push	r9
 894:	af 92       	push	r10
 896:	bf 92       	push	r11
 898:	cf 92       	push	r12
 89a:	df 92       	push	r13
 89c:	ef 92       	push	r14
 89e:	ff 92       	push	r15
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
 8ac:	ca 1b       	sub	r28, r26
 8ae:	db 0b       	sbc	r29, r27
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	f8 94       	cli
 8b4:	de bf       	out	0x3e, r29	; 62
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	cd bf       	out	0x3d, r28	; 61
 8ba:	09 94       	ijmp

000008bc <__epilogue_restores__>:
 8bc:	2a 88       	ldd	r2, Y+18	; 0x12
 8be:	39 88       	ldd	r3, Y+17	; 0x11
 8c0:	48 88       	ldd	r4, Y+16	; 0x10
 8c2:	5f 84       	ldd	r5, Y+15	; 0x0f
 8c4:	6e 84       	ldd	r6, Y+14	; 0x0e
 8c6:	7d 84       	ldd	r7, Y+13	; 0x0d
 8c8:	8c 84       	ldd	r8, Y+12	; 0x0c
 8ca:	9b 84       	ldd	r9, Y+11	; 0x0b
 8cc:	aa 84       	ldd	r10, Y+10	; 0x0a
 8ce:	b9 84       	ldd	r11, Y+9	; 0x09
 8d0:	c8 84       	ldd	r12, Y+8	; 0x08
 8d2:	df 80       	ldd	r13, Y+7	; 0x07
 8d4:	ee 80       	ldd	r14, Y+6	; 0x06
 8d6:	fd 80       	ldd	r15, Y+5	; 0x05
 8d8:	0c 81       	ldd	r16, Y+4	; 0x04
 8da:	1b 81       	ldd	r17, Y+3	; 0x03
 8dc:	aa 81       	ldd	r26, Y+2	; 0x02
 8de:	b9 81       	ldd	r27, Y+1	; 0x01
 8e0:	ce 0f       	add	r28, r30
 8e2:	d1 1d       	adc	r29, r1
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	de bf       	out	0x3e, r29	; 62
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	cd bf       	out	0x3d, r28	; 61
 8ee:	ed 01       	movw	r28, r26
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
