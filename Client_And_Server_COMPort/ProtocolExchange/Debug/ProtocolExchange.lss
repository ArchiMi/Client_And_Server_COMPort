
ProtocolExchange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000862  000008f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9d  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e0  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bb  00000000  00000000  000024a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000547  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086d  00000000  00000000  000033a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  9e:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#include "Src/crc8.h"
#include "Src/const.h"
#include "Src/dynamic_array.h"

void USART_Init() {
	sei();
  a6:	78 94       	sei
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	a8 95       	wdr
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  bc:	0f be       	out	0x3f, r0	; 63
	
	//bool WD_RST = MCUSR & 0x08;
	//bool BO_RST = MCUSR & 0x04;
	//bool EXT_RST = MCUSR & 0x02;
	//bool PON_RST = MCUSR & 0x01;
	MCUSR = MCUSR & 0xF0;
  be:	84 b7       	in	r24, 0x34	; 52
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	84 bf       	out	0x34, r24	; 52
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	99 e2       	ldi	r25, 0x29	; 41
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	a8 95       	wdr
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	//END Test
		
	wdt_enable(WDTO_8S);
	
	WDTCSR = 1<<WDIE;
  d8:	90 e4       	ldi	r25, 0x40	; 64
  da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	
	//UCSR0A |= (1<<U2X0); //Удвоение частоты
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //Trust transmit and receive from USART - T/R ENable = True
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01) | (1 << UCSZ00);
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0L = BAUD_PRESCALE;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = BAUD_PRESCALE >> 8;
  ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <USART_Init+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <USART_Init+0x5c>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <USART_Receive>:
	// Не менее 20 милисекунд соглано документации
	_delay_ms(20);
}

byte USART_Receive(void) {	
	while( !(UCSR0A & (1<<RXC0)) );
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <USART_Receive+0x4>
	return UDR0;	
 110:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 114:	08 95       	ret

00000116 <USART_Receive_Str>:

void USART_Receive_Str(byte *calledstring, Array* a) {
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	8c 01       	movw	r16, r24
 126:	7b 01       	movw	r14, r22
	char ch;
	
	int i = 0;	
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
					calledstring[i] = CHR_LINE_FEED;
					insertArray(a, CHR_LINE_FEED);
					return;
				} else {
					calledstring[i] = ch;
 12c:	0f 2e       	mov	r0, r31
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	df 2e       	mov	r13, r31
 132:	f0 2d       	mov	r31, r0
		if (i == FRAME_SIZE) {
			return;
		}		
	
		// Get input char	
		ch = USART_Receive();
 134:	0e 94 83 00 	call	0x106	; 0x106 <USART_Receive>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
 138:	8a 33       	cpi	r24, 0x3A	; 58
 13a:	01 f1       	breq	.+64     	; 0x17c <USART_Receive_Str+0x66>
 13c:	20 97       	sbiw	r28, 0x00	; 0
 13e:	d1 f3       	breq	.-12     	; 0x134 <USART_Receive_Str+0x1e>
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	e1 f4       	brne	.+56     	; 0x17c <USART_Receive_Str+0x66>
 144:	1c 16       	cp	r1, r28
 146:	1d 06       	cpc	r1, r29
 148:	cc f4       	brge	.+50     	; 0x17c <USART_Receive_Str+0x66>
				int previous_index = i - 1;
 				if (calledstring[previous_index] == CHR_CARRET_RETURN) {
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	49 f4       	brne	.+18     	; 0x16a <USART_Receive_Str+0x54>
					calledstring[i] = CHR_LINE_FEED;
 158:	c0 0f       	add	r28, r16
 15a:	d1 1f       	adc	r29, r17
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	88 83       	st	Y, r24
					insertArray(a, CHR_LINE_FEED);
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	c7 01       	movw	r24, r14
 164:	0e 94 cf 01 	call	0x39e	; 0x39e <insertArray>
					return;
 168:	15 c0       	rjmp	.+42     	; 0x194 <USART_Receive_Str+0x7e>
				} else {
					calledstring[i] = ch;
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	d0 82       	st	Z, r13
					insertArray(a, ch);
 172:	6d 2d       	mov	r22, r13
 174:	c7 01       	movw	r24, r14
 176:	0e 94 cf 01 	call	0x39e	; 0x39e <insertArray>
		
		// Check first char equal COLON
		if (ch != CHR_COLON && i == 0) {
			continue;
		} else {
			if (ch == CHR_LINE_FEED && i > 0) {
 17a:	08 c0       	rjmp	.+16     	; 0x18c <USART_Receive_Str+0x76>
				} else {
					calledstring[i] = ch;
					insertArray(a, ch);
				}
			} else {
				calledstring[i] = ch;
 17c:	f8 01       	movw	r30, r16
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	80 83       	st	Z, r24
				insertArray(a, ch);
 184:	68 2f       	mov	r22, r24
 186:	c7 01       	movw	r24, r14
 188:	0e 94 cf 01 	call	0x39e	; 0x39e <insertArray>
			}	
		}
		
		i++;
 18c:	21 96       	adiw	r28, 0x01	; 1
	char ch;
	
	int i = 0;	
	while(1) {				
		// Check error from receive 
		if (i == FRAME_SIZE) {
 18e:	c0 32       	cpi	r28, 0x20	; 32
 190:	d1 05       	cpc	r29, r1
 192:	81 f6       	brne	.-96     	; 0x134 <USART_Receive_Str+0x1e>
			}	
		}
		
		i++;
	}	
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	08 95       	ret

000001a4 <USART_Send>:

void USART_Send(byte data) {
	while( !(UCSR0A & ( 1 << UDRE0 )) );
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	90 81       	ld	r25, Z
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <USART_Send+0x4>
	UDR0 = data;
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b2:	08 95       	ret

000001b4 <USART_Transmit_Str>:
}

void USART_Transmit_Str(Array* a) {
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	fc 01       	movw	r30, r24
			break;		
	}
	*/
	
	//Array
	int count = a->size;
 1c2:	e4 80       	ldd	r14, Z+4	; 0x04
 1c4:	f5 80       	ldd	r15, Z+5	; 0x05
	for (int i = 0; i < count; i++) {		
 1c6:	1e 14       	cp	r1, r14
 1c8:	1f 04       	cpc	r1, r15
 1ca:	c4 f4       	brge	.+48     	; 0x1fc <USART_Transmit_Str+0x48>
		if (a->array[i] != 0)
 1cc:	a0 81       	ld	r26, Z
 1ce:	b1 81       	ldd	r27, Z+1	; 0x01
 1d0:	8c 91       	ld	r24, X
 1d2:	81 11       	cpse	r24, r1
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <USART_Transmit_Str+0x36>
 1d6:	12 c0       	rjmp	.+36     	; 0x1fc <USART_Transmit_Str+0x48>
 1d8:	d8 01       	movw	r26, r16
 1da:	ed 91       	ld	r30, X+
 1dc:	fc 91       	ld	r31, X
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	80 81       	ld	r24, Z
 1e4:	81 11       	cpse	r24, r1
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <USART_Transmit_Str+0x3c>
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <USART_Transmit_Str+0x48>
 1ea:	8f 01       	movw	r16, r30
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
			// Send char
			USART_Send(a->array[i]);
 1f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Send>
	}
	*/
	
	//Array
	int count = a->size;
	for (int i = 0; i < count; i++) {		
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	ec 16       	cp	r14, r28
 1f8:	fd 06       	cpc	r15, r29
 1fa:	71 f7       	brne	.-36     	; 0x1d8 <USART_Transmit_Str+0x24>
			USART_Send(a->array[i]);
			//USART_Send(55);
		else
			break;
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <blink_WD>:

void blink_WD() {
	PORTB |= ( 1 << PINB4 ); //0xFF; //On
 20a:	2c 9a       	sbi	0x05, 4	; 5
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <blink_WD+0x6>
 214:	00 c0       	rjmp	.+0      	; 0x216 <blink_WD+0xc>
 216:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB4 ); //0x00; //OFF
 218:	2c 98       	cbi	0x05, 4	; 5
 21a:	08 95       	ret

0000021c <blink>:
}

void blink() {
	PORTB |= ( 1 << PINB5 ); //0xFF; //On
 21c:	2d 9a       	sbi	0x05, 5	; 5
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <blink+0x6>
 226:	00 c0       	rjmp	.+0      	; 0x228 <blink+0xc>
 228:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
 22a:	2d 98       	cbi	0x05, 5	; 5
 22c:	08 95       	ret

0000022e <Clean_Data>:
}

void Clean_Data(byte *input_data) {
 22e:	fc 01       	movw	r30, r24
 230:	80 96       	adiw	r24, 0x20	; 32
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
		input_data[i] = 0;
 232:	11 92       	st	Z+, r1
	_delay_ms(1);
	PORTB &= ~( 1 << PINB5 ); //0x00; //OFF
}

void Clean_Data(byte *input_data) {
	for (uint8_t i = 0; i < FRAME_SIZE; i++) {
 234:	e8 17       	cp	r30, r24
 236:	f9 07       	cpc	r31, r25
 238:	e1 f7       	brne	.-8      	; 0x232 <Clean_Data+0x4>
		input_data[i] = 0;
	}
}
 23a:	08 95       	ret

0000023c <__vector_6>:

// Watch dog
ISR(WDT_vect) {
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	wdt_reset();
 25e:	a8 95       	wdr

	USART_Init();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	blink_WD();
 264:	0e 94 05 01 	call	0x20a	; 0x20a <blink_WD>
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <main>:

int main(void) {
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	a6 97       	sbiw	r28, 0x26	; 38
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; //PORTB as Output
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	84 b9       	out	0x04, r24	; 4
	
	byte input[FRAME_SIZE] = { 0 };
 2a2:	fe 01       	movw	r30, r28
 2a4:	31 96       	adiw	r30, 0x01	; 1
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	df 01       	movw	r26, r30
 2aa:	1d 92       	st	X+, r1
 2ac:	8a 95       	dec	r24
 2ae:	e9 f7       	brne	.-6      	; 0x2aa <main+0x20>
	
	USART_Init();       
 2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	while(1) {
		// Init Array
		Array inputArray;
		initArray(&inputArray, 50);
 2b4:	62 e3       	ldi	r22, 0x32	; 50
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	ce 01       	movw	r24, r28
 2ba:	81 96       	adiw	r24, 0x21	; 33
 2bc:	0e 94 bb 01 	call	0x376	; 0x376 <initArray>
		
		// Get request
		USART_Receive_Str(input, &inputArray);
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5d       	subi	r22, 0xDF	; 223
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 8b 00 	call	0x116	; 0x116 <USART_Receive_Str>
		
		// Get CRC8 byte index
		byte index_crc8 = GetCRC8Index(input, FRAME_SIZE, CHR_COLON);
 2ce:	4a e3       	ldi	r20, 0x3A	; 58
 2d0:	60 e2       	ldi	r22, 0x20	; 32
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	0e 94 a4 01 	call	0x348	; 0x348 <GetCRC8Index>
 2da:	18 2f       	mov	r17, r24
			
		// Add CRC8 byte
		byte crc8 = Crc8(input, index_crc8);
 2dc:	68 2f       	mov	r22, r24
 2de:	ce 01       	movw	r24, r28
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	0e 94 90 01 	call	0x320	; 0x320 <Crc8>
		//input[index_crc8] = crc8;
		
		if (input[index_crc8] == crc8) {
 2e6:	e1 e0       	ldi	r30, 0x01	; 1
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ec 0f       	add	r30, r28
 2ec:	fd 1f       	adc	r31, r29
 2ee:	e1 0f       	add	r30, r17
 2f0:	f1 1d       	adc	r31, r1
 2f2:	90 81       	ld	r25, Z
 2f4:	89 13       	cpse	r24, r25
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <main+0x7c>
			insertArray(&inputArray, CHR_LINE_FEED);
			*/
			
			// Send response ( ECHO )
			//USART_Transmit_Str(input, &inputArray);
			USART_Transmit_Str(&inputArray);
 2f8:	ce 01       	movw	r24, r28
 2fa:	81 96       	adiw	r24, 0x21	; 33
 2fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_Str>
			
			// Info Blink
			blink();
 300:	0e 94 0e 01 	call	0x21c	; 0x21c <blink>
 304:	04 c0       	rjmp	.+8      	; 0x30e <main+0x84>
			answer[8] = CHR_CARRET_RETURN;
			answer[9] = CHR_LINE_FEED;
			
			// Send response
			//USART_Transmit_Str(answer, &inputArray);
			USART_Transmit_Str(&inputArray);
 306:	ce 01       	movw	r24, r28
 308:	81 96       	adiw	r24, 0x21	; 33
 30a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_Str>
			USART_Transmit_Str(CHR_LINE_FEED, &inputArray);
			*/
		}
		
		// Clear array
		Clean_Data(input);
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	0e 94 17 01 	call	0x22e	; 0x22e <Clean_Data>
		
		// Free Array
		freeArray(&inputArray);	
 316:	ce 01       	movw	r24, r28
 318:	81 96       	adiw	r24, 0x21	; 33
 31a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <freeArray>
		
		// Info Blink
		//blink();
	}
 31e:	ca cf       	rjmp	.-108    	; 0x2b4 <main+0x2a>

00000320 <Crc8>:
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 320:	66 23       	and	r22, r22
 322:	81 f0       	breq	.+32     	; 0x344 <Crc8+0x24>
 324:	dc 01       	movw	r26, r24
 326:	9c 01       	movw	r18, r24
 328:	26 0f       	add	r18, r22
 32a:	31 1d       	adc	r19, r1
 32c:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
 32e:	ed 91       	ld	r30, X+
 330:	8e 27       	eor	r24, r30
 332:	e8 2f       	mov	r30, r24
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ea 5f       	subi	r30, 0xFA	; 250
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	80 81       	ld	r24, Z
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
	for (int i = 0; i < len; i++) {
 33c:	a2 17       	cp	r26, r18
 33e:	b3 07       	cpc	r27, r19
 340:	b1 f7       	brne	.-20     	; 0x32e <Crc8+0xe>
 342:	08 95       	ret
	0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
	0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

uint8_t Crc8(uint8_t *pcBlock, uint8_t len) {
	uint8_t crc = 0xFF;
 344:	8f ef       	ldi	r24, 0xFF	; 255
		//crc = pgm_read_byte(&Crc8Table[crc ^ *pcBlock++]);
		crc = Crc8Table[crc ^ *pcBlock++];
	}

	return crc;
}
 346:	08 95       	ret

00000348 <GetCRC8Index>:

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 348:	66 23       	and	r22, r22
 34a:	99 f0       	breq	.+38     	; 0x372 <GetCRC8Index+0x2a>
 34c:	e8 2f       	mov	r30, r24
 34e:	f9 2f       	mov	r31, r25
 350:	90 e0       	ldi	r25, 0x00	; 0
		// Need many checkeds
		if (input_data[i] == CHR_COLON && i > 0) {
 352:	21 91       	ld	r18, Z+
 354:	2a 33       	cpi	r18, 0x3A	; 58
 356:	41 f4       	brne	.+16     	; 0x368 <GetCRC8Index+0x20>
 358:	99 23       	and	r25, r25
 35a:	31 f0       	breq	.+12     	; 0x368 <GetCRC8Index+0x20>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
 35c:	80 81       	ld	r24, Z
 35e:	8d 30       	cpi	r24, 0x0D	; 13
 360:	19 f4       	brne	.+6      	; 0x368 <GetCRC8Index+0x20>
				return i - 1;
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	89 0f       	add	r24, r25
 366:	08 95       	ret
			}
		}
		
		x++;
 368:	9f 5f       	subi	r25, 0xFF	; 255

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
	for (uint8_t i = 0; i < frame_size; i++) {
 36a:	69 13       	cpse	r22, r25
 36c:	f2 cf       	rjmp	.-28     	; 0x352 <GetCRC8Index+0xa>
			if (input_data[i+1] == CHR_CARRET_RETURN) {
				return i - 1;
			}
		}
		
		x++;
 36e:	86 2f       	mov	r24, r22
 370:	08 95       	ret
}

// frame_size = 32
// end_line = 13
byte GetCRC8Index(byte *input_data, uint8_t frame_size) {
	uint8_t x = 0;
 372:	80 e0       	ldi	r24, 0x00	; 0
		
		x++;
	}
	
	return x;
 374:	08 95       	ret

00000376 <initArray>:
	byte* array;
	int used;
	int size;
} Array;

void initArray(Array* a, size_t initialSize) {
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ec 01       	movw	r28, r24
 380:	8b 01       	movw	r16, r22
	a->array = (byte*)malloc(initialSize * sizeof(byte));
 382:	cb 01       	movw	r24, r22
 384:	0e 94 08 02 	call	0x410	; 0x410 <malloc>
 388:	99 83       	std	Y+1, r25	; 0x01
 38a:	88 83       	st	Y, r24
	a->used = 0;
 38c:	1b 82       	std	Y+3, r1	; 0x03
 38e:	1a 82       	std	Y+2, r1	; 0x02
	a->size = initialSize;
 390:	1d 83       	std	Y+5, r17	; 0x05
 392:	0c 83       	std	Y+4, r16	; 0x04
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <insertArray>:

void insertArray(Array* a, byte element_byte) {
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
 3a6:	16 2f       	mov	r17, r22
	if (a->used == a->size) {
 3a8:	6a 81       	ldd	r22, Y+2	; 0x02
 3aa:	7b 81       	ldd	r23, Y+3	; 0x03
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	9d 81       	ldd	r25, Y+5	; 0x05
 3b0:	68 17       	cp	r22, r24
 3b2:	79 07       	cpc	r23, r25
 3b4:	61 f4       	brne	.+24     	; 0x3ce <insertArray+0x30>
		a->size += 1;
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	7d 83       	std	Y+5, r23	; 0x05
 3bc:	6c 83       	std	Y+4, r22	; 0x04
		byte* newarr = (byte*)realloc(a->array, a->size * sizeof(byte));
 3be:	88 81       	ld	r24, Y
 3c0:	99 81       	ldd	r25, Y+1	; 0x01
 3c2:	0e 94 29 03 	call	0x652	; 0x652 <realloc>
		if (newarr == NULL) return; // Block don't selected - return
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	79 f0       	breq	.+30     	; 0x3e8 <insertArray+0x4a>
		a->array = newarr;
 3ca:	99 83       	std	Y+1, r25	; 0x01
 3cc:	88 83       	st	Y, r24
	}

	a->array[a->used++] = element_byte;
 3ce:	28 81       	ld	r18, Y
 3d0:	39 81       	ldd	r19, Y+1	; 0x01
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	9b 81       	ldd	r25, Y+3	; 0x03
 3d6:	ac 01       	movw	r20, r24
 3d8:	4f 5f       	subi	r20, 0xFF	; 255
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	5b 83       	std	Y+3, r21	; 0x03
 3de:	4a 83       	std	Y+2, r20	; 0x02
 3e0:	f9 01       	movw	r30, r18
 3e2:	e8 0f       	add	r30, r24
 3e4:	f9 1f       	adc	r31, r25
 3e6:	10 83       	st	Z, r17
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	08 95       	ret

000003f0 <freeArray>:

void freeArray(Array* a) {
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
	free(a->array);
 3f6:	88 81       	ld	r24, Y
 3f8:	99 81       	ldd	r25, Y+1	; 0x01
 3fa:	0e 94 a0 02 	call	0x540	; 0x540 <free>
	a->array = NULL;
 3fe:	19 82       	std	Y+1, r1	; 0x01
 400:	18 82       	st	Y, r1
	a->used = a->size = 0;
 402:	1d 82       	std	Y+5, r1	; 0x05
 404:	1c 82       	std	Y+4, r1	; 0x04
 406:	1b 82       	std	Y+3, r1	; 0x03
 408:	1a 82       	std	Y+2, r1	; 0x02
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <malloc>:
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	91 05       	cpc	r25, r1
 41c:	10 f4       	brcc	.+4      	; 0x422 <malloc+0x12>
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 426:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	a0 e0       	ldi	r26, 0x00	; 0
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	30 97       	sbiw	r30, 0x00	; 0
 434:	19 f1       	breq	.+70     	; 0x47c <malloc+0x6c>
 436:	40 81       	ld	r20, Z
 438:	51 81       	ldd	r21, Z+1	; 0x01
 43a:	02 81       	ldd	r16, Z+2	; 0x02
 43c:	13 81       	ldd	r17, Z+3	; 0x03
 43e:	48 17       	cp	r20, r24
 440:	59 07       	cpc	r21, r25
 442:	c8 f0       	brcs	.+50     	; 0x476 <malloc+0x66>
 444:	84 17       	cp	r24, r20
 446:	95 07       	cpc	r25, r21
 448:	69 f4       	brne	.+26     	; 0x464 <malloc+0x54>
 44a:	10 97       	sbiw	r26, 0x00	; 0
 44c:	31 f0       	breq	.+12     	; 0x45a <malloc+0x4a>
 44e:	12 96       	adiw	r26, 0x02	; 2
 450:	0c 93       	st	X, r16
 452:	12 97       	sbiw	r26, 0x02	; 2
 454:	13 96       	adiw	r26, 0x03	; 3
 456:	1c 93       	st	X, r17
 458:	27 c0       	rjmp	.+78     	; 0x4a8 <malloc+0x98>
 45a:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 45e:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 462:	22 c0       	rjmp	.+68     	; 0x4a8 <malloc+0x98>
 464:	21 15       	cp	r18, r1
 466:	31 05       	cpc	r19, r1
 468:	19 f0       	breq	.+6      	; 0x470 <malloc+0x60>
 46a:	42 17       	cp	r20, r18
 46c:	53 07       	cpc	r21, r19
 46e:	18 f4       	brcc	.+6      	; 0x476 <malloc+0x66>
 470:	9a 01       	movw	r18, r20
 472:	bd 01       	movw	r22, r26
 474:	ef 01       	movw	r28, r30
 476:	df 01       	movw	r26, r30
 478:	f8 01       	movw	r30, r16
 47a:	db cf       	rjmp	.-74     	; 0x432 <malloc+0x22>
 47c:	21 15       	cp	r18, r1
 47e:	31 05       	cpc	r19, r1
 480:	f9 f0       	breq	.+62     	; 0x4c0 <malloc+0xb0>
 482:	28 1b       	sub	r18, r24
 484:	39 0b       	sbc	r19, r25
 486:	24 30       	cpi	r18, 0x04	; 4
 488:	31 05       	cpc	r19, r1
 48a:	80 f4       	brcc	.+32     	; 0x4ac <malloc+0x9c>
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	9b 81       	ldd	r25, Y+3	; 0x03
 490:	61 15       	cp	r22, r1
 492:	71 05       	cpc	r23, r1
 494:	21 f0       	breq	.+8      	; 0x49e <malloc+0x8e>
 496:	fb 01       	movw	r30, r22
 498:	93 83       	std	Z+3, r25	; 0x03
 49a:	82 83       	std	Z+2, r24	; 0x02
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <malloc+0x96>
 49e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 4a2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 4a6:	fe 01       	movw	r30, r28
 4a8:	32 96       	adiw	r30, 0x02	; 2
 4aa:	44 c0       	rjmp	.+136    	; 0x534 <malloc+0x124>
 4ac:	fe 01       	movw	r30, r28
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	81 93       	st	Z+, r24
 4b4:	91 93       	st	Z+, r25
 4b6:	22 50       	subi	r18, 0x02	; 2
 4b8:	31 09       	sbc	r19, r1
 4ba:	39 83       	std	Y+1, r19	; 0x01
 4bc:	28 83       	st	Y, r18
 4be:	3a c0       	rjmp	.+116    	; 0x534 <malloc+0x124>
 4c0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4c4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4c8:	23 2b       	or	r18, r19
 4ca:	41 f4       	brne	.+16     	; 0x4dc <malloc+0xcc>
 4cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 4d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 4d4:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 4d8:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 4dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4e4:	21 15       	cp	r18, r1
 4e6:	31 05       	cpc	r19, r1
 4e8:	41 f4       	brne	.+16     	; 0x4fa <malloc+0xea>
 4ea:	2d b7       	in	r18, 0x3d	; 61
 4ec:	3e b7       	in	r19, 0x3e	; 62
 4ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 4f2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 4f6:	24 1b       	sub	r18, r20
 4f8:	35 0b       	sbc	r19, r21
 4fa:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 4fe:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 502:	e2 17       	cp	r30, r18
 504:	f3 07       	cpc	r31, r19
 506:	a0 f4       	brcc	.+40     	; 0x530 <malloc+0x120>
 508:	2e 1b       	sub	r18, r30
 50a:	3f 0b       	sbc	r19, r31
 50c:	28 17       	cp	r18, r24
 50e:	39 07       	cpc	r19, r25
 510:	78 f0       	brcs	.+30     	; 0x530 <malloc+0x120>
 512:	ac 01       	movw	r20, r24
 514:	4e 5f       	subi	r20, 0xFE	; 254
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	24 17       	cp	r18, r20
 51a:	35 07       	cpc	r19, r21
 51c:	48 f0       	brcs	.+18     	; 0x530 <malloc+0x120>
 51e:	4e 0f       	add	r20, r30
 520:	5f 1f       	adc	r21, r31
 522:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 526:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 52a:	81 93       	st	Z+, r24
 52c:	91 93       	st	Z+, r25
 52e:	02 c0       	rjmp	.+4      	; 0x534 <malloc+0x124>
 530:	e0 e0       	ldi	r30, 0x00	; 0
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	cf 01       	movw	r24, r30
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <free>:
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	09 f4       	brne	.+2      	; 0x54a <free+0xa>
 548:	81 c0       	rjmp	.+258    	; 0x64c <free+0x10c>
 54a:	fc 01       	movw	r30, r24
 54c:	32 97       	sbiw	r30, 0x02	; 2
 54e:	13 82       	std	Z+3, r1	; 0x03
 550:	12 82       	std	Z+2, r1	; 0x02
 552:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 556:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 55a:	10 97       	sbiw	r26, 0x00	; 0
 55c:	81 f4       	brne	.+32     	; 0x57e <free+0x3e>
 55e:	20 81       	ld	r18, Z
 560:	31 81       	ldd	r19, Z+1	; 0x01
 562:	82 0f       	add	r24, r18
 564:	93 1f       	adc	r25, r19
 566:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 56a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 56e:	28 17       	cp	r18, r24
 570:	39 07       	cpc	r19, r25
 572:	51 f5       	brne	.+84     	; 0x5c8 <free+0x88>
 574:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 578:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 57c:	67 c0       	rjmp	.+206    	; 0x64c <free+0x10c>
 57e:	ed 01       	movw	r28, r26
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	ce 17       	cp	r28, r30
 586:	df 07       	cpc	r29, r31
 588:	40 f4       	brcc	.+16     	; 0x59a <free+0x5a>
 58a:	4a 81       	ldd	r20, Y+2	; 0x02
 58c:	5b 81       	ldd	r21, Y+3	; 0x03
 58e:	9e 01       	movw	r18, r28
 590:	41 15       	cp	r20, r1
 592:	51 05       	cpc	r21, r1
 594:	f1 f0       	breq	.+60     	; 0x5d2 <free+0x92>
 596:	ea 01       	movw	r28, r20
 598:	f5 cf       	rjmp	.-22     	; 0x584 <free+0x44>
 59a:	d3 83       	std	Z+3, r29	; 0x03
 59c:	c2 83       	std	Z+2, r28	; 0x02
 59e:	40 81       	ld	r20, Z
 5a0:	51 81       	ldd	r21, Z+1	; 0x01
 5a2:	84 0f       	add	r24, r20
 5a4:	95 1f       	adc	r25, r21
 5a6:	c8 17       	cp	r28, r24
 5a8:	d9 07       	cpc	r29, r25
 5aa:	59 f4       	brne	.+22     	; 0x5c2 <free+0x82>
 5ac:	88 81       	ld	r24, Y
 5ae:	99 81       	ldd	r25, Y+1	; 0x01
 5b0:	84 0f       	add	r24, r20
 5b2:	95 1f       	adc	r25, r21
 5b4:	02 96       	adiw	r24, 0x02	; 2
 5b6:	91 83       	std	Z+1, r25	; 0x01
 5b8:	80 83       	st	Z, r24
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	9b 81       	ldd	r25, Y+3	; 0x03
 5be:	93 83       	std	Z+3, r25	; 0x03
 5c0:	82 83       	std	Z+2, r24	; 0x02
 5c2:	21 15       	cp	r18, r1
 5c4:	31 05       	cpc	r19, r1
 5c6:	29 f4       	brne	.+10     	; 0x5d2 <free+0x92>
 5c8:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 5cc:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 5d0:	3d c0       	rjmp	.+122    	; 0x64c <free+0x10c>
 5d2:	e9 01       	movw	r28, r18
 5d4:	fb 83       	std	Y+3, r31	; 0x03
 5d6:	ea 83       	std	Y+2, r30	; 0x02
 5d8:	49 91       	ld	r20, Y+
 5da:	59 91       	ld	r21, Y+
 5dc:	c4 0f       	add	r28, r20
 5de:	d5 1f       	adc	r29, r21
 5e0:	ec 17       	cp	r30, r28
 5e2:	fd 07       	cpc	r31, r29
 5e4:	61 f4       	brne	.+24     	; 0x5fe <free+0xbe>
 5e6:	80 81       	ld	r24, Z
 5e8:	91 81       	ldd	r25, Z+1	; 0x01
 5ea:	84 0f       	add	r24, r20
 5ec:	95 1f       	adc	r25, r21
 5ee:	02 96       	adiw	r24, 0x02	; 2
 5f0:	e9 01       	movw	r28, r18
 5f2:	99 83       	std	Y+1, r25	; 0x01
 5f4:	88 83       	st	Y, r24
 5f6:	82 81       	ldd	r24, Z+2	; 0x02
 5f8:	93 81       	ldd	r25, Z+3	; 0x03
 5fa:	9b 83       	std	Y+3, r25	; 0x03
 5fc:	8a 83       	std	Y+2, r24	; 0x02
 5fe:	e0 e0       	ldi	r30, 0x00	; 0
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	12 96       	adiw	r26, 0x02	; 2
 604:	8d 91       	ld	r24, X+
 606:	9c 91       	ld	r25, X
 608:	13 97       	sbiw	r26, 0x03	; 3
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	19 f0       	breq	.+6      	; 0x614 <free+0xd4>
 60e:	fd 01       	movw	r30, r26
 610:	dc 01       	movw	r26, r24
 612:	f7 cf       	rjmp	.-18     	; 0x602 <free+0xc2>
 614:	8d 91       	ld	r24, X+
 616:	9c 91       	ld	r25, X
 618:	11 97       	sbiw	r26, 0x01	; 1
 61a:	9d 01       	movw	r18, r26
 61c:	2e 5f       	subi	r18, 0xFE	; 254
 61e:	3f 4f       	sbci	r19, 0xFF	; 255
 620:	82 0f       	add	r24, r18
 622:	93 1f       	adc	r25, r19
 624:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 628:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 62c:	28 17       	cp	r18, r24
 62e:	39 07       	cpc	r19, r25
 630:	69 f4       	brne	.+26     	; 0x64c <free+0x10c>
 632:	30 97       	sbiw	r30, 0x00	; 0
 634:	29 f4       	brne	.+10     	; 0x640 <free+0x100>
 636:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 63a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 63e:	02 c0       	rjmp	.+4      	; 0x644 <free+0x104>
 640:	13 82       	std	Z+3, r1	; 0x03
 642:	12 82       	std	Z+2, r1	; 0x02
 644:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 648:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <realloc>:
 652:	a0 e0       	ldi	r26, 0x00	; 0
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ef e2       	ldi	r30, 0x2F	; 47
 658:	f3 e0       	ldi	r31, 0x03	; 3
 65a:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__prologue_saves__+0x8>
 65e:	ec 01       	movw	r28, r24
 660:	00 97       	sbiw	r24, 0x00	; 0
 662:	21 f4       	brne	.+8      	; 0x66c <realloc+0x1a>
 664:	cb 01       	movw	r24, r22
 666:	0e 94 08 02 	call	0x410	; 0x410 <malloc>
 66a:	b4 c0       	rjmp	.+360    	; 0x7d4 <realloc+0x182>
 66c:	fc 01       	movw	r30, r24
 66e:	e6 0f       	add	r30, r22
 670:	f7 1f       	adc	r31, r23
 672:	9c 01       	movw	r18, r24
 674:	22 50       	subi	r18, 0x02	; 2
 676:	31 09       	sbc	r19, r1
 678:	e2 17       	cp	r30, r18
 67a:	f3 07       	cpc	r31, r19
 67c:	08 f4       	brcc	.+2      	; 0x680 <realloc+0x2e>
 67e:	a8 c0       	rjmp	.+336    	; 0x7d0 <realloc+0x17e>
 680:	d9 01       	movw	r26, r18
 682:	0d 91       	ld	r16, X+
 684:	1c 91       	ld	r17, X
 686:	11 97       	sbiw	r26, 0x01	; 1
 688:	06 17       	cp	r16, r22
 68a:	17 07       	cpc	r17, r23
 68c:	b0 f0       	brcs	.+44     	; 0x6ba <realloc+0x68>
 68e:	05 30       	cpi	r16, 0x05	; 5
 690:	11 05       	cpc	r17, r1
 692:	08 f4       	brcc	.+2      	; 0x696 <realloc+0x44>
 694:	9b c0       	rjmp	.+310    	; 0x7cc <realloc+0x17a>
 696:	c8 01       	movw	r24, r16
 698:	04 97       	sbiw	r24, 0x04	; 4
 69a:	86 17       	cp	r24, r22
 69c:	97 07       	cpc	r25, r23
 69e:	08 f4       	brcc	.+2      	; 0x6a2 <realloc+0x50>
 6a0:	95 c0       	rjmp	.+298    	; 0x7cc <realloc+0x17a>
 6a2:	02 50       	subi	r16, 0x02	; 2
 6a4:	11 09       	sbc	r17, r1
 6a6:	06 1b       	sub	r16, r22
 6a8:	17 0b       	sbc	r17, r23
 6aa:	01 93       	st	Z+, r16
 6ac:	11 93       	st	Z+, r17
 6ae:	6d 93       	st	X+, r22
 6b0:	7c 93       	st	X, r23
 6b2:	cf 01       	movw	r24, r30
 6b4:	0e 94 a0 02 	call	0x540	; 0x540 <free>
 6b8:	89 c0       	rjmp	.+274    	; 0x7cc <realloc+0x17a>
 6ba:	5b 01       	movw	r10, r22
 6bc:	a0 1a       	sub	r10, r16
 6be:	b1 0a       	sbc	r11, r17
 6c0:	4c 01       	movw	r8, r24
 6c2:	80 0e       	add	r8, r16
 6c4:	91 1e       	adc	r9, r17
 6c6:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 6ca:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 6ce:	61 2c       	mov	r6, r1
 6d0:	71 2c       	mov	r7, r1
 6d2:	e1 2c       	mov	r14, r1
 6d4:	f1 2c       	mov	r15, r1
 6d6:	10 97       	sbiw	r26, 0x00	; 0
 6d8:	09 f4       	brne	.+2      	; 0x6dc <realloc+0x8a>
 6da:	46 c0       	rjmp	.+140    	; 0x768 <realloc+0x116>
 6dc:	8d 91       	ld	r24, X+
 6de:	9c 91       	ld	r25, X
 6e0:	11 97       	sbiw	r26, 0x01	; 1
 6e2:	a8 15       	cp	r26, r8
 6e4:	b9 05       	cpc	r27, r9
 6e6:	b1 f5       	brne	.+108    	; 0x754 <realloc+0x102>
 6e8:	6c 01       	movw	r12, r24
 6ea:	42 e0       	ldi	r20, 0x02	; 2
 6ec:	c4 0e       	add	r12, r20
 6ee:	d1 1c       	adc	r13, r1
 6f0:	ca 14       	cp	r12, r10
 6f2:	db 04       	cpc	r13, r11
 6f4:	78 f1       	brcs	.+94     	; 0x754 <realloc+0x102>
 6f6:	4c 01       	movw	r8, r24
 6f8:	8a 18       	sub	r8, r10
 6fa:	9b 08       	sbc	r9, r11
 6fc:	64 01       	movw	r12, r8
 6fe:	42 e0       	ldi	r20, 0x02	; 2
 700:	c4 0e       	add	r12, r20
 702:	d1 1c       	adc	r13, r1
 704:	12 96       	adiw	r26, 0x02	; 2
 706:	bc 90       	ld	r11, X
 708:	12 97       	sbiw	r26, 0x02	; 2
 70a:	13 96       	adiw	r26, 0x03	; 3
 70c:	ac 91       	ld	r26, X
 70e:	b5 e0       	ldi	r27, 0x05	; 5
 710:	cb 16       	cp	r12, r27
 712:	d1 04       	cpc	r13, r1
 714:	40 f0       	brcs	.+16     	; 0x726 <realloc+0xd4>
 716:	b2 82       	std	Z+2, r11	; 0x02
 718:	a3 83       	std	Z+3, r26	; 0x03
 71a:	91 82       	std	Z+1, r9	; 0x01
 71c:	80 82       	st	Z, r8
 71e:	d9 01       	movw	r26, r18
 720:	6d 93       	st	X+, r22
 722:	7c 93       	st	X, r23
 724:	09 c0       	rjmp	.+18     	; 0x738 <realloc+0xe6>
 726:	0e 5f       	subi	r16, 0xFE	; 254
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	80 0f       	add	r24, r16
 72c:	91 1f       	adc	r25, r17
 72e:	f9 01       	movw	r30, r18
 730:	91 83       	std	Z+1, r25	; 0x01
 732:	80 83       	st	Z, r24
 734:	eb 2d       	mov	r30, r11
 736:	fa 2f       	mov	r31, r26
 738:	e1 14       	cp	r14, r1
 73a:	f1 04       	cpc	r15, r1
 73c:	31 f0       	breq	.+12     	; 0x74a <realloc+0xf8>
 73e:	d7 01       	movw	r26, r14
 740:	13 96       	adiw	r26, 0x03	; 3
 742:	fc 93       	st	X, r31
 744:	ee 93       	st	-X, r30
 746:	12 97       	sbiw	r26, 0x02	; 2
 748:	41 c0       	rjmp	.+130    	; 0x7cc <realloc+0x17a>
 74a:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 74e:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 752:	3c c0       	rjmp	.+120    	; 0x7cc <realloc+0x17a>
 754:	68 16       	cp	r6, r24
 756:	79 06       	cpc	r7, r25
 758:	08 f4       	brcc	.+2      	; 0x75c <realloc+0x10a>
 75a:	3c 01       	movw	r6, r24
 75c:	7d 01       	movw	r14, r26
 75e:	12 96       	adiw	r26, 0x02	; 2
 760:	0d 90       	ld	r0, X+
 762:	bc 91       	ld	r27, X
 764:	a0 2d       	mov	r26, r0
 766:	b7 cf       	rjmp	.-146    	; 0x6d6 <realloc+0x84>
 768:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 76c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 770:	88 16       	cp	r8, r24
 772:	99 06       	cpc	r9, r25
 774:	e1 f4       	brne	.+56     	; 0x7ae <realloc+0x15c>
 776:	66 16       	cp	r6, r22
 778:	77 06       	cpc	r7, r23
 77a:	c8 f4       	brcc	.+50     	; 0x7ae <realloc+0x15c>
 77c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 780:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	41 f4       	brne	.+16     	; 0x798 <realloc+0x146>
 788:	8d b7       	in	r24, 0x3d	; 61
 78a:	9e b7       	in	r25, 0x3e	; 62
 78c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 790:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 794:	84 1b       	sub	r24, r20
 796:	95 0b       	sbc	r25, r21
 798:	e8 17       	cp	r30, r24
 79a:	f9 07       	cpc	r31, r25
 79c:	c8 f4       	brcc	.+50     	; 0x7d0 <realloc+0x17e>
 79e:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 7a2:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 7a6:	f9 01       	movw	r30, r18
 7a8:	71 83       	std	Z+1, r23	; 0x01
 7aa:	60 83       	st	Z, r22
 7ac:	0f c0       	rjmp	.+30     	; 0x7cc <realloc+0x17a>
 7ae:	cb 01       	movw	r24, r22
 7b0:	0e 94 08 02 	call	0x410	; 0x410 <malloc>
 7b4:	7c 01       	movw	r14, r24
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <realloc+0x17e>
 7ba:	a8 01       	movw	r20, r16
 7bc:	be 01       	movw	r22, r28
 7be:	0e 94 ef 03 	call	0x7de	; 0x7de <memcpy>
 7c2:	ce 01       	movw	r24, r28
 7c4:	0e 94 a0 02 	call	0x540	; 0x540 <free>
 7c8:	c7 01       	movw	r24, r14
 7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <realloc+0x182>
 7cc:	ce 01       	movw	r24, r28
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <realloc+0x182>
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	ee e0       	ldi	r30, 0x0E	; 14
 7da:	0c 94 18 04 	jmp	0x830	; 0x830 <__epilogue_restores__+0x8>

000007de <memcpy>:
 7de:	fb 01       	movw	r30, r22
 7e0:	dc 01       	movw	r26, r24
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <memcpy+0xa>
 7e4:	01 90       	ld	r0, Z+
 7e6:	0d 92       	st	X+, r0
 7e8:	41 50       	subi	r20, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	d8 f7       	brcc	.-10     	; 0x7e4 <memcpy+0x6>
 7ee:	08 95       	ret

000007f0 <__prologue_saves__>:
 7f0:	2f 92       	push	r2
 7f2:	3f 92       	push	r3
 7f4:	4f 92       	push	r4
 7f6:	5f 92       	push	r5
 7f8:	6f 92       	push	r6
 7fa:	7f 92       	push	r7
 7fc:	8f 92       	push	r8
 7fe:	9f 92       	push	r9
 800:	af 92       	push	r10
 802:	bf 92       	push	r11
 804:	cf 92       	push	r12
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	ca 1b       	sub	r28, r26
 81a:	db 0b       	sbc	r29, r27
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	09 94       	ijmp

00000828 <__epilogue_restores__>:
 828:	2a 88       	ldd	r2, Y+18	; 0x12
 82a:	39 88       	ldd	r3, Y+17	; 0x11
 82c:	48 88       	ldd	r4, Y+16	; 0x10
 82e:	5f 84       	ldd	r5, Y+15	; 0x0f
 830:	6e 84       	ldd	r6, Y+14	; 0x0e
 832:	7d 84       	ldd	r7, Y+13	; 0x0d
 834:	8c 84       	ldd	r8, Y+12	; 0x0c
 836:	9b 84       	ldd	r9, Y+11	; 0x0b
 838:	aa 84       	ldd	r10, Y+10	; 0x0a
 83a:	b9 84       	ldd	r11, Y+9	; 0x09
 83c:	c8 84       	ldd	r12, Y+8	; 0x08
 83e:	df 80       	ldd	r13, Y+7	; 0x07
 840:	ee 80       	ldd	r14, Y+6	; 0x06
 842:	fd 80       	ldd	r15, Y+5	; 0x05
 844:	0c 81       	ldd	r16, Y+4	; 0x04
 846:	1b 81       	ldd	r17, Y+3	; 0x03
 848:	aa 81       	ldd	r26, Y+2	; 0x02
 84a:	b9 81       	ldd	r27, Y+1	; 0x01
 84c:	ce 0f       	add	r28, r30
 84e:	d1 1d       	adc	r29, r1
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	ed 01       	movw	r28, r26
 85c:	08 95       	ret

0000085e <_exit>:
 85e:	f8 94       	cli

00000860 <__stop_program>:
 860:	ff cf       	rjmp	.-2      	; 0x860 <__stop_program>
